(()=>{var Qh=Object.create;var yr=Object.defineProperty;var td=Object.getOwnPropertyDescriptor;var ed=Object.getOwnPropertyNames;var id=Object.getPrototypeOf,nd=Object.prototype.hasOwnProperty;var sd=(e,t,i)=>t in e?yr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var rd=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var od=(e,t,i,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of ed(t))!nd.call(e,s)&&s!==i&&yr(e,s,{get:()=>t[s],enumerable:!(n=td(t,s))||n.enumerable});return e};var ad=(e,t,i)=>(i=e!=null?Qh(id(e)):{},od(t||!e||!e.__esModule?yr(i,"default",{value:e,enumerable:!0}):i,e));var D=(e,t,i)=>(sd(e,typeof t!="symbol"?t+"":t,i),i);var Xh=rd((Uh,pr)=>{(function(e,t){"use strict";(function(){for(var h=0,d=["ms","moz","webkit","o"],u=0;u<d.length&&!e.requestAnimationFrame;++u)e.requestAnimationFrame=e[d[u]+"RequestAnimationFrame"],e.cancelAnimationFrame=e[d[u]+"CancelAnimationFrame"]||e[d[u]+"CancelRequestAnimationFrame"];e.requestAnimationFrame||(e.requestAnimationFrame=function(f,g){var m=new Date().getTime(),b=Math.max(0,16-(m-h)),v=e.setTimeout(function(){f(m+b)},b);return h=m+b,v}),e.cancelAnimationFrame||(e.cancelAnimationFrame=function(f){clearTimeout(f)})})();function i(){n.width=e.innerWidth,n.height=5*l.barThickness;var h=n.getContext("2d");h.shadowBlur=l.shadowBlur,h.shadowColor=l.shadowColor;var d,u=h.createLinearGradient(0,0,n.width,0);for(d in l.barColors)u.addColorStop(d,l.barColors[d]);h.lineWidth=l.barThickness,h.beginPath(),h.moveTo(0,l.barThickness/2),h.lineTo(Math.ceil(o*n.width),l.barThickness/2),h.strokeStyle=u,h.stroke()}var n,s,r,o,a,l={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},c={config:function(h){for(var d in h)l.hasOwnProperty(d)&&(l[d]=h[d])},show:function(){var h,d,u;a||(a=!0,r!==null&&e.cancelAnimationFrame(r),n||((u=(n=t.createElement("canvas")).style).position="fixed",u.top=u.left=u.right=u.margin=u.padding=0,u.zIndex=100001,u.display="none",l.className&&n.classList.add(l.className),t.body.appendChild(n),h="resize",d=i,(u=e).addEventListener?u.addEventListener(h,d,!1):u.attachEvent?u.attachEvent("on"+h,d):u["on"+h]=d),n.style.opacity=1,n.style.display="block",c.progress(0),l.autoRun&&function f(){s=e.requestAnimationFrame(f),c.progress("+"+.05*Math.pow(1-Math.sqrt(o),2))}())},progress:function(h){return h===void 0||(typeof h=="string"&&(h=(0<=h.indexOf("+")||0<=h.indexOf("-")?o:0)+parseFloat(h)),o=1<h?1:h,i()),o},hide:function(){a&&(a=!1,s!=null&&(e.cancelAnimationFrame(s),s=null),function h(){return 1<=c.progress("+.1")&&(n.style.opacity-=.05,n.style.opacity<=.05)?(n.style.display="none",void(r=null)):void(r=e.requestAnimationFrame(h))}())}};typeof pr=="object"&&typeof pr.exports=="object"?pr.exports=c:typeof define=="function"&&define.amd?define(function(){return c}):this.topbar=c}).call(Uh,window,document)});(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(r,o){o=o||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(r,o.bubbles,o.cancelable,o.detail),a}return s.prototype=window.Event.prototype,s}function i(s,r){var o=document.createElement("input");return o.type="hidden",o.name=s,o.value=r,o}function n(s,r){var o=s.getAttribute("data-to"),a=i("_method",s.getAttribute("data-method")),l=i("_csrf_token",s.getAttribute("data-csrf")),c=document.createElement("form"),h=document.createElement("input"),d=s.getAttribute("target");c.method=s.getAttribute("data-method")==="get"?"get":"post",c.action=o,c.style.display="none",d?c.target=d:r&&(c.target="_blank"),c.appendChild(l),c.appendChild(a),document.body.appendChild(c),h.type="submit",c.appendChild(h),h.click()}window.addEventListener("click",function(s){var r=s.target;if(!s.defaultPrevented)for(;r&&r.getAttribute;){var o=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!r.dispatchEvent(o))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(r.getAttribute("data-method"))return n(r,s.metaKey||s.shiftKey),s.preventDefault(),!1;r=r.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var r=s.target.getAttribute("data-confirm");r&&!window.confirm(r)&&s.preventDefault()},!1)})();function Qi(e){return e+.5|0}var Ee=(e,t,i)=>Math.max(Math.min(e,i),t);function Zi(e){return Ee(Qi(e*2.55),0,255)}function Pe(e){return Ee(Qi(e*255),0,255)}function fe(e){return Ee(Qi(e/2.55)/100,0,1)}function fa(e){return Ee(Qi(e*100),0,100)}var Nt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},_r=[..."0123456789ABCDEF"],ld=e=>_r[e&15],cd=e=>_r[(e&240)>>4]+_r[e&15],rs=e=>(e&240)>>4===(e&15),hd=e=>rs(e.r)&&rs(e.g)&&rs(e.b)&&rs(e.a);function dd(e){var t=e.length,i;return e[0]==="#"&&(t===4||t===5?i={r:255&Nt[e[1]]*17,g:255&Nt[e[2]]*17,b:255&Nt[e[3]]*17,a:t===5?Nt[e[4]]*17:255}:(t===7||t===9)&&(i={r:Nt[e[1]]<<4|Nt[e[2]],g:Nt[e[3]]<<4|Nt[e[4]],b:Nt[e[5]]<<4|Nt[e[6]],a:t===9?Nt[e[7]]<<4|Nt[e[8]]:255})),i}var ud=(e,t)=>e<255?t(e):"";function fd(e){var t=hd(e)?ld:cd;return e?"#"+t(e.r)+t(e.g)+t(e.b)+ud(e.a,t):void 0}var pd=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function ba(e,t,i){let n=t*Math.min(i,1-i),s=(r,o=(r+e/30)%12)=>i-n*Math.max(Math.min(o-3,9-o,1),-1);return[s(0),s(8),s(4)]}function gd(e,t,i){let n=(s,r=(s+e/60)%6)=>i-i*t*Math.max(Math.min(r,4-r,1),0);return[n(5),n(3),n(1)]}function md(e,t,i){let n=ba(e,1,.5),s;for(t+i>1&&(s=1/(t+i),t*=s,i*=s),s=0;s<3;s++)n[s]*=1-t-i,n[s]+=t;return n}function bd(e,t,i,n,s){return e===s?(t-i)/n+(t<i?6:0):t===s?(i-e)/n+2:(e-t)/n+4}function wr(e){let i=e.r/255,n=e.g/255,s=e.b/255,r=Math.max(i,n,s),o=Math.min(i,n,s),a=(r+o)/2,l,c,h;return r!==o&&(h=r-o,c=a>.5?h/(2-r-o):h/(r+o),l=bd(i,n,s,h,r),l=l*60+.5),[l|0,c||0,a]}function Sr(e,t,i,n){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,i,n)).map(Pe)}function kr(e,t,i){return Sr(ba,e,t,i)}function vd(e,t,i){return Sr(md,e,t,i)}function yd(e,t,i){return Sr(gd,e,t,i)}function va(e){return(e%360+360)%360}function xd(e){let t=pd.exec(e),i=255,n;if(!t)return;t[5]!==n&&(i=t[6]?Zi(+t[5]):Pe(+t[5]));let s=va(+t[2]),r=+t[3]/100,o=+t[4]/100;return t[1]==="hwb"?n=vd(s,r,o):t[1]==="hsv"?n=yd(s,r,o):n=kr(s,r,o),{r:n[0],g:n[1],b:n[2],a:i}}function _d(e,t){var i=wr(e);i[0]=va(i[0]+t),i=kr(i),e.r=i[0],e.g=i[1],e.b=i[2]}function wd(e){if(!e)return;let t=wr(e),i=t[0],n=fa(t[1]),s=fa(t[2]);return e.a<255?`hsla(${i}, ${n}%, ${s}%, ${fe(e.a)})`:`hsl(${i}, ${n}%, ${s}%)`}var pa={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},ga={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};function Sd(){let e={},t=Object.keys(ga),i=Object.keys(pa),n,s,r,o,a;for(n=0;n<t.length;n++){for(o=a=t[n],s=0;s<i.length;s++)r=i[s],a=a.replace(r,pa[r]);r=parseInt(ga[o],16),e[a]=[r>>16&255,r>>8&255,r&255]}return e}var os;function kd(e){os||(os=Sd(),os.transparent=[0,0,0,0]);let t=os[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:t.length===4?t[3]:255}}var Ad=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function Cd(e){let t=Ad.exec(e),i=255,n,s,r;if(!!t){if(t[7]!==n){let o=+t[7];i=t[8]?Zi(o):Ee(o*255,0,255)}return n=+t[1],s=+t[3],r=+t[5],n=255&(t[2]?Zi(n):Ee(n,0,255)),s=255&(t[4]?Zi(s):Ee(s,0,255)),r=255&(t[6]?Zi(r):Ee(r,0,255)),{r:n,g:s,b:r,a:i}}}function Ed(e){return e&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${fe(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`)}var xr=e=>e<=.0031308?e*12.92:Math.pow(e,1/2.4)*1.055-.055,mi=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function Pd(e,t,i){let n=mi(fe(e.r)),s=mi(fe(e.g)),r=mi(fe(e.b));return{r:Pe(xr(n+i*(mi(fe(t.r))-n))),g:Pe(xr(s+i*(mi(fe(t.g))-s))),b:Pe(xr(r+i*(mi(fe(t.b))-r))),a:e.a+i*(t.a-e.a)}}function as(e,t,i){if(e){let n=wr(e);n[t]=Math.max(0,Math.min(n[t]+n[t]*i,t===0?360:1)),n=kr(n),e.r=n[0],e.g=n[1],e.b=n[2]}}function ya(e,t){return e&&Object.assign(t||{},e)}function ma(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=Pe(e[3]))):(t=ya(e,{r:0,g:0,b:0,a:1}),t.a=Pe(t.a)),t}function Td(e){return e.charAt(0)==="r"?Cd(e):xd(e)}var Te=class{constructor(t){if(t instanceof Te)return t;let i=typeof t,n;i==="object"?n=ma(t):i==="string"&&(n=dd(t)||kd(t)||Td(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=ya(this._rgb);return t&&(t.a=fe(t.a)),t}set rgb(t){this._rgb=ma(t)}rgbString(){return this._valid?Ed(this._rgb):void 0}hexString(){return this._valid?fd(this._rgb):void 0}hslString(){return this._valid?wd(this._rgb):void 0}mix(t,i){if(t){let n=this.rgb,s=t.rgb,r,o=i===r?.5:i,a=2*o-1,l=n.a-s.a,c=((a*l===-1?a:(a+l)/(1+a*l))+1)/2;r=1-c,n.r=255&c*n.r+r*s.r+.5,n.g=255&c*n.g+r*s.g+.5,n.b=255&c*n.b+r*s.b+.5,n.a=o*n.a+(1-o)*s.a,this.rgb=n}return this}interpolate(t,i){return t&&(this._rgb=Pd(this._rgb,t._rgb,i)),this}clone(){return new Te(this.rgb)}alpha(t){return this._rgb.a=Pe(t),this}clearer(t){let i=this._rgb;return i.a*=1-t,this}greyscale(){let t=this._rgb,i=Qi(t.r*.3+t.g*.59+t.b*.11);return t.r=t.g=t.b=i,this}opaquer(t){let i=this._rgb;return i.a*=1+t,this}negate(){let t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return as(this._rgb,2,t),this}darken(t){return as(this._rgb,2,-t),this}saturate(t){return as(this._rgb,1,t),this}desaturate(t){return as(this._rgb,1,-t),this}rotate(t){return _d(this._rgb,t),this}};function ie(){}var Ma=(()=>{let e=0;return()=>e++})();function $(e){return e===null||typeof e>"u"}function K(e){if(Array.isArray&&Array.isArray(e))return!0;let t=Object.prototype.toString.call(e);return t.slice(0,7)==="[object"&&t.slice(-6)==="Array]"}function z(e){return e!==null&&Object.prototype.toString.call(e)==="[object Object]"}function it(e){return(typeof e=="number"||e instanceof Number)&&isFinite(+e)}function Et(e,t){return it(e)?e:t}function V(e,t){return typeof e>"u"?t:e}var Oa=(e,t)=>typeof e=="string"&&e.endsWith("%")?parseFloat(e)/100:+e/t,Pr=(e,t)=>typeof e=="string"&&e.endsWith("%")?parseFloat(e)/100*t:+e;function J(e,t,i){if(e&&typeof e.call=="function")return e.apply(i,t)}function Y(e,t,i,n){let s,r,o;if(K(e))if(r=e.length,n)for(s=r-1;s>=0;s--)t.call(i,e[s],s);else for(s=0;s<r;s++)t.call(i,e[s],s);else if(z(e))for(o=Object.keys(e),r=o.length,s=0;s<r;s++)t.call(i,e[o[s]],o[s])}function nn(e,t){let i,n,s,r;if(!e||!t||e.length!==t.length)return!1;for(i=0,n=e.length;i<n;++i)if(s=e[i],r=t[i],s.datasetIndex!==r.datasetIndex||s.index!==r.index)return!1;return!0}function ds(e){if(K(e))return e.map(ds);if(z(e)){let t=Object.create(null),i=Object.keys(e),n=i.length,s=0;for(;s<n;++s)t[i[s]]=ds(e[i[s]]);return t}return e}function Da(e){return["__proto__","prototype","constructor"].indexOf(e)===-1}function Md(e,t,i,n){if(!Da(e))return;let s=t[e],r=i[e];z(s)&&z(r)?vi(s,r,n):t[e]=ds(r)}function vi(e,t,i){let n=K(t)?t:[t],s=n.length;if(!z(e))return e;i=i||{};let r=i.merger||Md,o;for(let a=0;a<s;++a){if(o=n[a],!z(o))continue;let l=Object.keys(o);for(let c=0,h=l.length;c<h;++c)r(l[c],e,o,i)}return e}function xi(e,t){return vi(e,t,{merger:Od})}function Od(e,t,i){if(!Da(e))return;let n=t[e],s=i[e];z(n)&&z(s)?xi(n,s):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=ds(s))}var xa={"":e=>e,x:e=>e.x,y:e=>e.y};function Dd(e){let t=e.split("."),i=[],n="";for(let s of t)n+=s,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}function Ld(e){let t=Dd(e);return i=>{for(let n of t){if(n==="")break;i=i&&i[n]}return i}}function me(e,t){return(xa[t]||(xa[t]=Ld(t)))(e)}function gs(e){return e.charAt(0).toUpperCase()+e.slice(1)}var _i=e=>typeof e<"u",pe=e=>typeof e=="function",Tr=(e,t)=>{if(e.size!==t.size)return!1;for(let i of e)if(!t.has(i))return!1;return!0};function La(e){return e.type==="mouseup"||e.type==="click"||e.type==="contextmenu"}var Z=Math.PI,G=2*Z,Rd=G+Z,us=Number.POSITIVE_INFINITY,Id=Z/180,et=Z/2,Ue=Z/4,_a=Z*2/3,ge=Math.log10,Yt=Math.sign;function wi(e,t,i){return Math.abs(e-t)<i}function Mr(e){let t=Math.round(e);e=wi(e,t,e/1e3)?t:e;let i=Math.pow(10,Math.floor(ge(e))),n=e/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Ra(e){let t=[],i=Math.sqrt(e),n;for(n=1;n<i;n++)e%n===0&&(t.push(n),t.push(e/n));return i===(i|0)&&t.push(i),t.sort((s,r)=>s-r).pop(),t}function qe(e){return!isNaN(parseFloat(e))&&isFinite(e)}function Ia(e,t){let i=Math.round(e);return i-t<=e&&i+t>=e}function Or(e,t,i){let n,s,r;for(n=0,s=e.length;n<s;n++)r=e[n][i],isNaN(r)||(t.min=Math.min(t.min,r),t.max=Math.max(t.max,r))}function Bt(e){return e*(Z/180)}function ms(e){return e*(180/Z)}function Dr(e){if(!it(e))return;let t=1,i=0;for(;Math.round(e*t)/t!==e;)t*=10,i++;return i}function Lr(e,t){let i=t.x-e.x,n=t.y-e.y,s=Math.sqrt(i*i+n*n),r=Math.atan2(n,i);return r<-.5*Z&&(r+=G),{angle:r,distance:s}}function fs(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Fd(e,t){return(e-t+Rd)%G-Z}function Ct(e){return(e%G+G)%G}function Si(e,t,i,n){let s=Ct(e),r=Ct(t),o=Ct(i),a=Ct(r-s),l=Ct(o-s),c=Ct(s-r),h=Ct(s-o);return s===r||s===o||n&&r===o||a>l&&c<h}function ut(e,t,i){return Math.max(t,Math.min(i,e))}function Fa(e){return ut(e,-32768,32767)}function ne(e,t,i,n=1e-6){return e>=Math.min(t,i)-n&&e<=Math.max(t,i)+n}function bs(e,t,i){i=i||(o=>e[o]<t);let n=e.length-1,s=0,r;for(;n-s>1;)r=s+n>>1,i(r)?s=r:n=r;return{lo:s,hi:n}}var te=(e,t,i,n)=>bs(e,i,n?s=>{let r=e[s][t];return r<i||r===i&&e[s+1][t]===i}:s=>e[s][t]<i),Na=(e,t,i)=>bs(e,i,n=>e[n][t]>=i);function Ba(e,t,i){let n=0,s=e.length;for(;n<s&&e[n]<t;)n++;for(;s>n&&e[s-1]>i;)s--;return n>0||s<e.length?e.slice(n,s):e}var Ha=["push","pop","shift","splice","unshift"];function ja(e,t){if(e._chartjs){e._chartjs.listeners.push(t);return}Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),Ha.forEach(i=>{let n="_onData"+gs(i),s=e[i];Object.defineProperty(e,i,{configurable:!0,enumerable:!1,value(...r){let o=s.apply(this,r);return e._chartjs.listeners.forEach(a=>{typeof a[n]=="function"&&a[n](...r)}),o}})})}function Rr(e,t){let i=e._chartjs;if(!i)return;let n=i.listeners,s=n.indexOf(t);s!==-1&&n.splice(s,1),!(n.length>0)&&(Ha.forEach(r=>{delete e[r]}),delete e._chartjs)}function Ir(e){let t=new Set(e);return t.size===e.length?e:Array.from(t)}var Fr=function(){return typeof window>"u"?function(e){return e()}:window.requestAnimationFrame}();function Nr(e,t){let i=[],n=!1;return function(...s){i=s,n||(n=!0,Fr.call(window,()=>{n=!1,e.apply(t,i)}))}}function Va(e,t){let i;return function(...n){return t?(clearTimeout(i),i=setTimeout(e,t,n)):e.apply(this,n),t}}var vs=e=>e==="start"?"left":e==="end"?"right":"center",vt=(e,t,i)=>e==="start"?t:e==="end"?i:(t+i)/2,za=(e,t,i,n)=>e===(n?"left":"right")?i:e==="center"?(t+i)/2:t;function Br(e,t,i){let n=t.length,s=0,r=n;if(e._sorted){let{iScale:o,_parsed:a}=e,l=o.axis,{min:c,max:h,minDefined:d,maxDefined:u}=o.getUserBounds();d&&(s=ut(Math.min(te(a,o.axis,c).lo,i?n:te(t,l,o.getPixelForValue(c)).lo),0,n-1)),u?r=ut(Math.max(te(a,o.axis,h,!0).hi+1,i?0:te(t,l,o.getPixelForValue(h),!0).hi+1),s,n)-s:r=n-s}return{start:s,count:r}}function Hr(e){let{xScale:t,yScale:i,_scaleRanges:n}=e,s={xmin:t.min,xmax:t.max,ymin:i.min,ymax:i.max};if(!n)return e._scaleRanges=s,!0;let r=n.xmin!==t.min||n.xmax!==t.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),r}var ls=e=>e===0||e===1,wa=(e,t,i)=>-(Math.pow(2,10*(e-=1))*Math.sin((e-t)*G/i)),Sa=(e,t,i)=>Math.pow(2,-10*e)*Math.sin((e-t)*G/i)+1,bi={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>-Math.cos(e*et)+1,easeOutSine:e=>Math.sin(e*et),easeInOutSine:e=>-.5*(Math.cos(Z*e)-1),easeInExpo:e=>e===0?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>e===1?1:-Math.pow(2,-10*e)+1,easeInOutExpo:e=>ls(e)?e:e<.5?.5*Math.pow(2,10*(e*2-1)):.5*(-Math.pow(2,-10*(e*2-1))+2),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>ls(e)?e:wa(e,.075,.3),easeOutElastic:e=>ls(e)?e:Sa(e,.075,.3),easeInOutElastic(e){return ls(e)?e:e<.5?.5*wa(e*2,.1125,.45):.5+.5*Sa(e*2-1,.1125,.45)},easeInBack(e){return e*e*((1.70158+1)*e-1.70158)},easeOutBack(e){return(e-=1)*e*((1.70158+1)*e+1.70158)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},easeInBounce:e=>1-bi.easeOutBounce(1-e),easeOutBounce(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:e=>e<.5?bi.easeInBounce(e*2)*.5:bi.easeOutBounce(e*2-1)*.5+.5};function jr(e){if(e&&typeof e=="object"){let t=e.toString();return t==="[object CanvasPattern]"||t==="[object CanvasGradient]"}return!1}function Vr(e){return jr(e)?e:new Te(e)}function Ar(e){return jr(e)?e:new Te(e).saturate(.5).darken(.1).hexString()}var Nd=["x","y","borderWidth","radius","tension"],Bd=["color","borderColor","backgroundColor"];function Hd(e){e.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),e.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>t!=="onProgress"&&t!=="onComplete"&&t!=="fn"}),e.set("animations",{colors:{type:"color",properties:Bd},numbers:{type:"number",properties:Nd}}),e.describe("animations",{_fallback:"animation"}),e.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>t|0}}}})}function jd(e){e.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})}var ka=new Map;function Vd(e,t){t=t||{};let i=e+JSON.stringify(t),n=ka.get(i);return n||(n=new Intl.NumberFormat(e,t),ka.set(i,n)),n}function ki(e,t,i){return Vd(t,i).format(e)}var Wa={values(e){return K(e)?e:""+e},numeric(e,t,i){if(e===0)return"0";let n=this.chart.options.locale,s,r=e;if(i.length>1){let c=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(c<1e-4||c>1e15)&&(s="scientific"),r=zd(e,i)}let o=ge(Math.abs(r)),a=isNaN(o)?1:Math.max(Math.min(-1*Math.floor(o),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),ki(e,n,l)},logarithmic(e,t,i){if(e===0)return"0";let n=i[t].significand||e/Math.pow(10,Math.floor(ge(e)));return[1,2,3,5,10,15].includes(n)||t>.8*i.length?Wa.numeric.call(this,e,t,i):""}};function zd(e,t){let i=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(i)>=1&&e!==Math.floor(e)&&(i=e-Math.floor(e)),i}var sn={formatters:Wa};function Wd(e){e.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,i)=>i.lineWidth,tickColor:(t,i)=>i.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:sn.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),e.route("scale.ticks","color","","color"),e.route("scale.grid","color","","borderColor"),e.route("scale.border","color","","borderColor"),e.route("scale.title","color","","color"),e.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&t!=="callback"&&t!=="parser",_indexable:t=>t!=="borderDash"&&t!=="tickBorderDash"&&t!=="dash"}),e.describe("scales",{_fallback:"scale"}),e.describe("scale.ticks",{_scriptable:t=>t!=="backdropPadding"&&t!=="callback",_indexable:t=>t!=="backdropPadding"})}var Oe=Object.create(null),ys=Object.create(null);function tn(e,t){if(!t)return e;let i=t.split(".");for(let n=0,s=i.length;n<s;++n){let r=i[n];e=e[r]||(e[r]=Object.create(null))}return e}function Cr(e,t,i){return typeof t=="string"?vi(tn(e,t),i):vi(tn(e,""),t)}var Er=class{constructor(t,i){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=n=>n.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(n,s)=>Ar(s.backgroundColor),this.hoverBorderColor=(n,s)=>Ar(s.borderColor),this.hoverColor=(n,s)=>Ar(s.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(i)}set(t,i){return Cr(this,t,i)}get(t){return tn(this,t)}describe(t,i){return Cr(ys,t,i)}override(t,i){return Cr(Oe,t,i)}route(t,i,n,s){let r=tn(this,t),o=tn(this,n),a="_"+i;Object.defineProperties(r,{[a]:{value:r[i],writable:!0},[i]:{enumerable:!0,get(){let l=this[a],c=o[s];return z(l)?Object.assign({},c,l):V(l,c)},set(l){this[a]=l}}})}apply(t){t.forEach(i=>i(this))}},nt=new Er({_scriptable:e=>!e.startsWith("on"),_indexable:e=>e!=="events",hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[Hd,jd,Wd]);function $d(e){return!e||$(e.size)||$(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}function en(e,t,i,n,s){let r=t[s];return r||(r=t[s]=e.measureText(s).width,i.push(s)),r>n&&(n=r),n}function $a(e,t,i,n){n=n||{};let s=n.data=n.data||{},r=n.garbageCollect=n.garbageCollect||[];n.font!==t&&(s=n.data={},r=n.garbageCollect=[],n.font=t),e.save(),e.font=t;let o=0,a=i.length,l,c,h,d,u;for(l=0;l<a;l++)if(d=i[l],d!=null&&!K(d))o=en(e,s,r,o,d);else if(K(d))for(c=0,h=d.length;c<h;c++)u=d[c],u!=null&&!K(u)&&(o=en(e,s,r,o,u));e.restore();let f=r.length/2;if(f>i.length){for(l=0;l<f;l++)delete s[r[l]];r.splice(0,f)}return o}function De(e,t,i){let n=e.currentDevicePixelRatio,s=i!==0?Math.max(i/2,.5):0;return Math.round((t-s)*n)/n+s}function zr(e,t){t=t||e.getContext("2d"),t.save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function xs(e,t,i,n){Wr(e,t,i,n,null)}function Wr(e,t,i,n,s){let r,o,a,l,c,h,d,u,f=t.pointStyle,g=t.rotation,m=t.radius,b=(g||0)*Id;if(f&&typeof f=="object"&&(r=f.toString(),r==="[object HTMLImageElement]"||r==="[object HTMLCanvasElement]")){e.save(),e.translate(i,n),e.rotate(b),e.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),e.restore();return}if(!(isNaN(m)||m<=0)){switch(e.beginPath(),f){default:s?e.ellipse(i,n,s/2,m,0,0,G):e.arc(i,n,m,0,G),e.closePath();break;case"triangle":h=s?s/2:m,e.moveTo(i+Math.sin(b)*h,n-Math.cos(b)*m),b+=_a,e.lineTo(i+Math.sin(b)*h,n-Math.cos(b)*m),b+=_a,e.lineTo(i+Math.sin(b)*h,n-Math.cos(b)*m),e.closePath();break;case"rectRounded":c=m*.516,l=m-c,o=Math.cos(b+Ue)*l,d=Math.cos(b+Ue)*(s?s/2-c:l),a=Math.sin(b+Ue)*l,u=Math.sin(b+Ue)*(s?s/2-c:l),e.arc(i-d,n-a,c,b-Z,b-et),e.arc(i+u,n-o,c,b-et,b),e.arc(i+d,n+a,c,b,b+et),e.arc(i-u,n+o,c,b+et,b+Z),e.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*m,h=s?s/2:l,e.rect(i-h,n-l,2*h,2*l);break}b+=Ue;case"rectRot":d=Math.cos(b)*(s?s/2:m),o=Math.cos(b)*m,a=Math.sin(b)*m,u=Math.sin(b)*(s?s/2:m),e.moveTo(i-d,n-a),e.lineTo(i+u,n-o),e.lineTo(i+d,n+a),e.lineTo(i-u,n+o),e.closePath();break;case"crossRot":b+=Ue;case"cross":d=Math.cos(b)*(s?s/2:m),o=Math.cos(b)*m,a=Math.sin(b)*m,u=Math.sin(b)*(s?s/2:m),e.moveTo(i-d,n-a),e.lineTo(i+d,n+a),e.moveTo(i+u,n-o),e.lineTo(i-u,n+o);break;case"star":d=Math.cos(b)*(s?s/2:m),o=Math.cos(b)*m,a=Math.sin(b)*m,u=Math.sin(b)*(s?s/2:m),e.moveTo(i-d,n-a),e.lineTo(i+d,n+a),e.moveTo(i+u,n-o),e.lineTo(i-u,n+o),b+=Ue,d=Math.cos(b)*(s?s/2:m),o=Math.cos(b)*m,a=Math.sin(b)*m,u=Math.sin(b)*(s?s/2:m),e.moveTo(i-d,n-a),e.lineTo(i+d,n+a),e.moveTo(i+u,n-o),e.lineTo(i-u,n+o);break;case"line":o=s?s/2:Math.cos(b)*m,a=Math.sin(b)*m,e.moveTo(i-o,n-a),e.lineTo(i+o,n+a);break;case"dash":e.moveTo(i,n),e.lineTo(i+Math.cos(b)*(s?s/2:m),n+Math.sin(b)*m);break;case!1:e.closePath();break}e.fill(),t.borderWidth>0&&e.stroke()}}function ee(e,t,i){return i=i||.5,!t||e&&e.x>t.left-i&&e.x<t.right+i&&e.y>t.top-i&&e.y<t.bottom+i}function rn(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function on(e){e.restore()}function Ua(e,t,i,n,s){if(!t)return e.lineTo(i.x,i.y);if(s==="middle"){let r=(t.x+i.x)/2;e.lineTo(r,t.y),e.lineTo(r,i.y)}else s==="after"!=!!n?e.lineTo(t.x,i.y):e.lineTo(i.x,t.y);e.lineTo(i.x,i.y)}function Xa(e,t,i,n){if(!t)return e.lineTo(i.x,i.y);e.bezierCurveTo(n?t.cp1x:t.cp2x,n?t.cp1y:t.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Ud(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),$(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}function Xd(e,t,i,n,s){if(s.strikethrough||s.underline){let r=e.measureText(n),o=t-r.actualBoundingBoxLeft,a=t+r.actualBoundingBoxRight,l=i-r.actualBoundingBoxAscent,c=i+r.actualBoundingBoxDescent,h=s.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=s.decorationWidth||2,e.moveTo(o,h),e.lineTo(a,h),e.stroke()}}function Yd(e,t){let i=e.fillStyle;e.fillStyle=t.color,e.fillRect(t.left,t.top,t.width,t.height),e.fillStyle=i}function Le(e,t,i,n,s,r={}){let o=K(t)?t:[t],a=r.strokeWidth>0&&r.strokeColor!=="",l,c;for(e.save(),e.font=s.string,Ud(e,r),l=0;l<o.length;++l)c=o[l],r.backdrop&&Yd(e,r.backdrop),a&&(r.strokeColor&&(e.strokeStyle=r.strokeColor),$(r.strokeWidth)||(e.lineWidth=r.strokeWidth),e.strokeText(c,i,n,r.maxWidth)),e.fillText(c,i,n,r.maxWidth),Xd(e,i,n,c,r),n+=Number(s.lineHeight);e.restore()}function Ai(e,t){let{x:i,y:n,w:s,h:r,radius:o}=t;e.arc(i+o.topLeft,n+o.topLeft,o.topLeft,-et,Z,!0),e.lineTo(i,n+r-o.bottomLeft),e.arc(i+o.bottomLeft,n+r-o.bottomLeft,o.bottomLeft,Z,et,!0),e.lineTo(i+s-o.bottomRight,n+r),e.arc(i+s-o.bottomRight,n+r-o.bottomRight,o.bottomRight,et,0,!0),e.lineTo(i+s,n+o.topRight),e.arc(i+s-o.topRight,n+o.topRight,o.topRight,0,-et,!0),e.lineTo(i+o.topLeft,n)}var qd=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Jd=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Kd(e,t){let i=(""+e).match(qd);if(!i||i[1]==="normal")return t*1.2;switch(e=+i[2],i[3]){case"px":return e;case"%":e/=100;break}return t*e}var Gd=e=>+e||0;function _s(e,t){let i={},n=z(t),s=n?Object.keys(t):t,r=z(e)?n?o=>V(e[o],e[t[o]]):o=>e[o]:()=>e;for(let o of s)i[o]=Gd(r(o));return i}function $r(e){return _s(e,{top:"y",right:"x",bottom:"y",left:"x"})}function Re(e){return _s(e,["topLeft","topRight","bottomLeft","bottomRight"])}function yt(e){let t=$r(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function ht(e,t){e=e||{},t=t||nt.font;let i=V(e.size,t.size);typeof i=="string"&&(i=parseInt(i,10));let n=V(e.style,t.style);n&&!(""+n).match(Jd)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);let s={family:V(e.family,t.family),lineHeight:Kd(V(e.lineHeight,t.lineHeight),i),size:i,style:n,weight:V(e.weight,t.weight),string:""};return s.string=$d(s),s}function Ci(e,t,i,n){let s=!0,r,o,a;for(r=0,o=e.length;r<o;++r)if(a=e[r],a!==void 0&&(t!==void 0&&typeof a=="function"&&(a=a(t),s=!1),i!==void 0&&K(a)&&(a=a[i%a.length],s=!1),a!==void 0))return n&&!s&&(n.cacheable=!1),a}function Ya(e,t,i){let{min:n,max:s}=e,r=Pr(t,(s-n)/2),o=(a,l)=>i&&a===0?0:a+l;return{min:o(n,-Math.abs(r)),max:o(s,r)}}function be(e,t){return Object.assign(Object.create(e),t)}function ws(e,t=[""],i,n,s=()=>e[0]){let r=i||e;typeof n>"u"&&(n=Ka("_fallback",e));let o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:r,_fallback:n,_getTarget:s,override:a=>ws([a,...e],t,r,n)};return new Proxy(o,{deleteProperty(a,l){return delete a[l],delete a._keys,delete e[0][l],!0},get(a,l){return qa(a,l,()=>ru(l,t,e,a))},getOwnPropertyDescriptor(a,l){return Reflect.getOwnPropertyDescriptor(a._scopes[0],l)},getPrototypeOf(){return Reflect.getPrototypeOf(e[0])},has(a,l){return Ca(a).includes(l)},ownKeys(a){return Ca(a)},set(a,l,c){let h=a._storage||(a._storage=s());return a[l]=h[l]=c,delete a._keys,!0}})}function Ye(e,t,i,n){let s={_cacheable:!1,_proxy:e,_context:t,_subProxy:i,_stack:new Set,_descriptors:Ur(e,n),setContext:r=>Ye(e,r,i,n),override:r=>Ye(e.override(r),t,i,n)};return new Proxy(s,{deleteProperty(r,o){return delete r[o],delete e[o],!0},get(r,o,a){return qa(r,o,()=>Qd(r,o,a))},getOwnPropertyDescriptor(r,o){return r._descriptors.allKeys?Reflect.has(e,o)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,o)},getPrototypeOf(){return Reflect.getPrototypeOf(e)},has(r,o){return Reflect.has(e,o)},ownKeys(){return Reflect.ownKeys(e)},set(r,o,a){return e[o]=a,delete r[o],!0}})}function Ur(e,t={scriptable:!0,indexable:!0}){let{_scriptable:i=t.scriptable,_indexable:n=t.indexable,_allKeys:s=t.allKeys}=e;return{allKeys:s,scriptable:i,indexable:n,isScriptable:pe(i)?i:()=>i,isIndexable:pe(n)?n:()=>n}}var Zd=(e,t)=>e?e+gs(t):t,Xr=(e,t)=>z(t)&&e!=="adapters"&&(Object.getPrototypeOf(t)===null||t.constructor===Object);function qa(e,t,i){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];let n=i();return e[t]=n,n}function Qd(e,t,i){let{_proxy:n,_context:s,_subProxy:r,_descriptors:o}=e,a=n[t];return pe(a)&&o.isScriptable(t)&&(a=tu(t,a,e,i)),K(a)&&a.length&&(a=eu(t,a,e,o.isIndexable)),Xr(t,a)&&(a=Ye(a,s,r&&r[t],o)),a}function tu(e,t,i,n){let{_proxy:s,_context:r,_subProxy:o,_stack:a}=i;if(a.has(e))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+e);a.add(e);let l=t(r,o||n);return a.delete(e),Xr(e,l)&&(l=Yr(s._scopes,s,e,l)),l}function eu(e,t,i,n){let{_proxy:s,_context:r,_subProxy:o,_descriptors:a}=i;if(typeof r.index<"u"&&n(e))return t[r.index%t.length];if(z(t[0])){let l=t,c=s._scopes.filter(h=>h!==l);t=[];for(let h of l){let d=Yr(c,s,e,h);t.push(Ye(d,r,o&&o[e],a))}}return t}function Ja(e,t,i){return pe(e)?e(t,i):e}var iu=(e,t)=>e===!0?t:typeof e=="string"?me(t,e):void 0;function nu(e,t,i,n,s){for(let r of t){let o=iu(i,r);if(o){e.add(o);let a=Ja(o._fallback,i,s);if(typeof a<"u"&&a!==i&&a!==n)return a}else if(o===!1&&typeof n<"u"&&i!==n)return null}return!1}function Yr(e,t,i,n){let s=t._rootScopes,r=Ja(t._fallback,i,n),o=[...e,...s],a=new Set;a.add(n);let l=Aa(a,o,i,r||i,n);return l===null||typeof r<"u"&&r!==i&&(l=Aa(a,o,r,l,n),l===null)?!1:ws(Array.from(a),[""],s,r,()=>su(t,i,n))}function Aa(e,t,i,n,s){for(;i;)i=nu(e,t,i,n,s);return i}function su(e,t,i){let n=e._getTarget();t in n||(n[t]={});let s=n[t];return K(s)&&z(i)?i:s||{}}function ru(e,t,i,n){let s;for(let r of t)if(s=Ka(Zd(r,e),i),typeof s<"u")return Xr(e,s)?Yr(i,n,e,s):s}function Ka(e,t){for(let i of t){if(!i)continue;let n=i[e];if(typeof n<"u")return n}}function Ca(e){let t=e._keys;return t||(t=e._keys=ou(e._scopes)),t}function ou(e){let t=new Set;for(let i of e)for(let n of Object.keys(i).filter(s=>!s.startsWith("_")))t.add(n);return Array.from(t)}function qr(e,t,i,n){let{iScale:s}=e,{key:r="r"}=this._parsing,o=new Array(n),a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=t[c],o[a]={r:s.parse(me(h,r),c)};return o}var au=Number.EPSILON||1e-14,yi=(e,t)=>t<e.length&&!e[t].skip&&e[t],Ga=e=>e==="x"?"y":"x";function lu(e,t,i,n){let s=e.skip?t:e,r=t,o=i.skip?t:i,a=fs(r,s),l=fs(o,r),c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;let d=n*c,u=n*h;return{previous:{x:r.x-d*(o.x-s.x),y:r.y-d*(o.y-s.y)},next:{x:r.x+u*(o.x-s.x),y:r.y+u*(o.y-s.y)}}}function cu(e,t,i){let n=e.length,s,r,o,a,l,c=yi(e,0);for(let h=0;h<n-1;++h)if(l=c,c=yi(e,h+1),!(!l||!c)){if(wi(t[h],0,au)){i[h]=i[h+1]=0;continue}s=i[h]/t[h],r=i[h+1]/t[h],a=Math.pow(s,2)+Math.pow(r,2),!(a<=9)&&(o=3/Math.sqrt(a),i[h]=s*o*t[h],i[h+1]=r*o*t[h])}}function hu(e,t,i="x"){let n=Ga(i),s=e.length,r,o,a,l=yi(e,0);for(let c=0;c<s;++c){if(o=a,a=l,l=yi(e,c+1),!a)continue;let h=a[i],d=a[n];o&&(r=(h-o[i])/3,a[`cp1${i}`]=h-r,a[`cp1${n}`]=d-r*t[c]),l&&(r=(l[i]-h)/3,a[`cp2${i}`]=h+r,a[`cp2${n}`]=d+r*t[c])}}function du(e,t="x"){let i=Ga(t),n=e.length,s=Array(n).fill(0),r=Array(n),o,a,l,c=yi(e,0);for(o=0;o<n;++o)if(a=l,l=c,c=yi(e,o+1),!!l){if(c){let h=c[t]-l[t];s[o]=h!==0?(c[i]-l[i])/h:0}r[o]=a?c?Yt(s[o-1])!==Yt(s[o])?0:(s[o-1]+s[o])/2:s[o-1]:s[o]}cu(e,s,r),hu(e,r,t)}function cs(e,t,i){return Math.max(Math.min(e,i),t)}function uu(e,t){let i,n,s,r,o,a=ee(e[0],t);for(i=0,n=e.length;i<n;++i)o=r,r=a,a=i<n-1&&ee(e[i+1],t),r&&(s=e[i],o&&(s.cp1x=cs(s.cp1x,t.left,t.right),s.cp1y=cs(s.cp1y,t.top,t.bottom)),a&&(s.cp2x=cs(s.cp2x,t.left,t.right),s.cp2y=cs(s.cp2y,t.top,t.bottom)))}function Za(e,t,i,n,s){let r,o,a,l;if(t.spanGaps&&(e=e.filter(c=>!c.skip)),t.cubicInterpolationMode==="monotone")du(e,s);else{let c=n?e[e.length-1]:e[0];for(r=0,o=e.length;r<o;++r)a=e[r],l=lu(c,a,e[Math.min(r+1,o-(n?0:1))%o],t.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,c=a}t.capBezierPoints&&uu(e,i)}function Jr(){return typeof window<"u"&&typeof document<"u"}function Ss(e){let t=e.parentNode;return t&&t.toString()==="[object ShadowRoot]"&&(t=t.host),t}function ps(e,t,i){let n;return typeof e=="string"?(n=parseInt(e,10),e.indexOf("%")!==-1&&(n=n/100*t.parentNode[i])):n=e,n}var ks=e=>e.ownerDocument.defaultView.getComputedStyle(e,null);function fu(e,t){return ks(e).getPropertyValue(t)}var pu=["top","right","bottom","left"];function Xe(e,t,i){let n={};i=i?"-"+i:"";for(let s=0;s<4;s++){let r=pu[s];n[r]=parseFloat(e[t+"-"+r+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}var gu=(e,t,i)=>(e>0||t>0)&&(!i||!i.shadowRoot);function mu(e,t){let i=e.touches,n=i&&i.length?i[0]:e,{offsetX:s,offsetY:r}=n,o=!1,a,l;if(gu(s,r,e.target))a=s,l=r;else{let c=t.getBoundingClientRect();a=n.clientX-c.left,l=n.clientY-c.top,o=!0}return{x:a,y:l,box:o}}function Ie(e,t){if("native"in e)return e;let{canvas:i,currentDevicePixelRatio:n}=t,s=ks(i),r=s.boxSizing==="border-box",o=Xe(s,"padding"),a=Xe(s,"border","width"),{x:l,y:c,box:h}=mu(e,i),d=o.left+(h&&a.left),u=o.top+(h&&a.top),{width:f,height:g}=t;return r&&(f-=o.width+a.width,g-=o.height+a.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((c-u)/g*i.height/n)}}function bu(e,t,i){let n,s;if(t===void 0||i===void 0){let r=Ss(e);if(!r)t=e.clientWidth,i=e.clientHeight;else{let o=r.getBoundingClientRect(),a=ks(r),l=Xe(a,"border","width"),c=Xe(a,"padding");t=o.width-c.width-l.width,i=o.height-c.height-l.height,n=ps(a.maxWidth,r,"clientWidth"),s=ps(a.maxHeight,r,"clientHeight")}}return{width:t,height:i,maxWidth:n||us,maxHeight:s||us}}var hs=e=>Math.round(e*10)/10;function Qa(e,t,i,n){let s=ks(e),r=Xe(s,"margin"),o=ps(s.maxWidth,e,"clientWidth")||us,a=ps(s.maxHeight,e,"clientHeight")||us,l=bu(e,t,i),{width:c,height:h}=l;if(s.boxSizing==="content-box"){let u=Xe(s,"border","width"),f=Xe(s,"padding");c-=f.width+u.width,h-=f.height+u.height}return c=Math.max(0,c-r.width),h=Math.max(0,n?c/n:h-r.height),c=hs(Math.min(c,o,l.maxWidth)),h=hs(Math.min(h,a,l.maxHeight)),c&&!h&&(h=hs(c/2)),(t!==void 0||i!==void 0)&&n&&l.height&&h>l.height&&(h=l.height,c=hs(Math.floor(h*n))),{width:c,height:h}}function Kr(e,t,i){let n=t||1,s=Math.floor(e.height*n),r=Math.floor(e.width*n);e.height=Math.floor(e.height),e.width=Math.floor(e.width);let o=e.canvas;return o.style&&(i||!o.style.height&&!o.style.width)&&(o.style.height=`${e.height}px`,o.style.width=`${e.width}px`),e.currentDevicePixelRatio!==n||o.height!==s||o.width!==r?(e.currentDevicePixelRatio=n,o.height=s,o.width=r,e.ctx.setTransform(n,0,0,n,0,0),!0):!1}var tl=function(){let e=!1;try{let t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch{}return e}();function Gr(e,t){let i=fu(e,t),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Me(e,t,i,n){return{x:e.x+i*(t.x-e.x),y:e.y+i*(t.y-e.y)}}function el(e,t,i,n){return{x:e.x+i*(t.x-e.x),y:n==="middle"?i<.5?e.y:t.y:n==="after"?i<1?e.y:t.y:i>0?t.y:e.y}}function il(e,t,i,n){let s={x:e.cp2x,y:e.cp2y},r={x:t.cp1x,y:t.cp1y},o=Me(e,s,i),a=Me(s,r,i),l=Me(r,t,i),c=Me(o,a,i),h=Me(a,l,i);return Me(c,h,i)}var vu=function(e,t){return{x(i){return e+e+t-i},setWidth(i){t=i},textAlign(i){return i==="center"?i:i==="right"?"left":"right"},xPlus(i,n){return i-n},leftForLtr(i,n){return i-n}}},yu=function(){return{x(e){return e},setWidth(e){},textAlign(e){return e},xPlus(e,t){return e+t},leftForLtr(e,t){return e}}};function Je(e,t,i){return e?vu(t,i):yu()}function Zr(e,t){let i,n;(t==="ltr"||t==="rtl")&&(i=e.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",t,"important"),e.prevTextDirection=n)}function Qr(e,t){t!==void 0&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function nl(e){return e==="angle"?{between:Si,compare:Fd,normalize:Ct}:{between:ne,compare:(t,i)=>t-i,normalize:t=>t}}function Ea({start:e,end:t,count:i,loop:n,style:s}){return{start:e%i,end:t%i,loop:n&&(t-e+1)%i===0,style:s}}function xu(e,t,i){let{property:n,start:s,end:r}=i,{between:o,normalize:a}=nl(n),l=t.length,{start:c,end:h,loop:d}=e,u,f;if(d){for(c+=l,h+=l,u=0,f=l;u<f&&o(a(t[c%l][n]),s,r);++u)c--,h--;c%=l,h%=l}return h<c&&(h+=l),{start:c,end:h,loop:d,style:e.style}}function to(e,t,i){if(!i)return[e];let{property:n,start:s,end:r}=i,o=t.length,{compare:a,between:l,normalize:c}=nl(n),{start:h,end:d,loop:u,style:f}=xu(e,t,i),g=[],m=!1,b=null,v,x,w,p=()=>l(s,w,v)&&a(s,w)!==0,y=()=>a(r,v)===0||l(r,w,v),_=()=>m||p(),A=()=>!m||y();for(let C=h,E=h;C<=d;++C)x=t[C%o],!x.skip&&(v=c(x[n]),v!==w&&(m=l(v,s,r),b===null&&_()&&(b=a(v,s)===0?C:E),b!==null&&A()&&(g.push(Ea({start:b,end:C,loop:u,count:o,style:f})),b=null),E=C,w=v));return b!==null&&g.push(Ea({start:b,end:d,loop:u,count:o,style:f})),g}function eo(e,t){let i=[],n=e.segments;for(let s=0;s<n.length;s++){let r=to(n[s],e.points,t);r.length&&i.push(...r)}return i}function _u(e,t,i,n){let s=0,r=t-1;if(i&&!n)for(;s<t&&!e[s].skip;)s++;for(;s<t&&e[s].skip;)s++;for(s%=t,i&&(r+=s);r>s&&e[r%t].skip;)r--;return r%=t,{start:s,end:r}}function wu(e,t,i,n){let s=e.length,r=[],o=t,a=e[t],l;for(l=t+1;l<=i;++l){let c=e[l%s];c.skip||c.stop?a.skip||(n=!1,r.push({start:t%s,end:(l-1)%s,loop:n}),t=o=c.stop?l:null):(o=l,a.skip&&(t=l)),a=c}return o!==null&&r.push({start:t%s,end:o%s,loop:n}),r}function sl(e,t){let i=e.points,n=e.options.spanGaps,s=i.length;if(!s)return[];let r=!!e._loop,{start:o,end:a}=_u(i,s,r,n);if(n===!0)return Pa(e,[{start:o,end:a,loop:r}],i,t);let l=a<o?a+s:a,c=!!e._fullLoop&&o===0&&a===s-1;return Pa(e,wu(i,o,l,c),i,t)}function Pa(e,t,i,n){return!n||!n.setContext||!i?t:Su(e,t,i,n)}function Su(e,t,i,n){let s=e._chart.getContext(),r=Ta(e.options),{_datasetIndex:o,options:{spanGaps:a}}=e,l=i.length,c=[],h=r,d=t[0].start,u=d;function f(g,m,b,v){let x=a?-1:1;if(g!==m){for(g+=l;i[g%l].skip;)g-=x;for(;i[m%l].skip;)m+=x;g%l!==m%l&&(c.push({start:g%l,end:m%l,loop:b,style:v}),h=v,d=m%l)}}for(let g of t){d=a?d:g.start;let m=i[d%l],b;for(u=d+1;u<=g.end;u++){let v=i[u%l];b=Ta(n.setContext(be(s,{type:"segment",p0:m,p1:v,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:o}))),ku(b,h)&&f(d,u-1,g.loop,h),m=v,h=b}d<u-1&&f(d,u-1,g.loop,h)}return c}function Ta(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function ku(e,t){if(!t)return!1;let i=[],n=function(s,r){return jr(r)?(i.includes(r)||i.push(r),i.indexOf(r)):r};return JSON.stringify(e,n)!==JSON.stringify(t,n)}var uo=class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,i,n,s){let r=i.listeners[s],o=i.duration;r.forEach(a=>a({chart:t,initial:i.initial,numSteps:o,currentStep:Math.min(n-i.start,o)}))}_refresh(){this._request||(this._running=!0,this._request=Fr.call(window,()=>{this._update(),this._request=null,this._running&&this._refresh()}))}_update(t=Date.now()){let i=0;this._charts.forEach((n,s)=>{if(!n.running||!n.items.length)return;let r=n.items,o=r.length-1,a=!1,l;for(;o>=0;--o)l=r[o],l._active?(l._total>n.duration&&(n.duration=l._total),l.tick(t),a=!0):(r[o]=r[r.length-1],r.pop());a&&(s.draw(),this._notify(s,n,t,"progress")),r.length||(n.running=!1,this._notify(s,n,t,"complete"),n.initial=!1),i+=r.length}),this._lastDate=t,i===0&&(this._running=!1)}_getAnims(t){let i=this._charts,n=i.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},i.set(t,n)),n}listen(t,i,n){this._getAnims(t).listeners[i].push(n)}add(t,i){!i||!i.length||this._getAnims(t).items.push(...i)}has(t){return this._getAnims(t).items.length>0}start(t){let i=this._charts.get(t);!i||(i.running=!0,i.start=Date.now(),i.duration=i.items.reduce((n,s)=>Math.max(n,s._duration),0),this._refresh())}running(t){if(!this._running)return!1;let i=this._charts.get(t);return!(!i||!i.running||!i.items.length)}stop(t){let i=this._charts.get(t);if(!i||!i.items.length)return;let n=i.items,s=n.length-1;for(;s>=0;--s)n[s].cancel();i.items=[],this._notify(t,i,Date.now(),"complete")}remove(t){return this._charts.delete(t)}},ve=new uo,rl="transparent",Au={boolean(e,t,i){return i>.5?t:e},color(e,t,i){let n=Vr(e||rl),s=n.valid&&Vr(t||rl);return s&&s.valid?s.mix(n,i).hexString():t},number(e,t,i){return e+(t-e)*i}},fo=class{constructor(t,i,n,s){let r=i[n];s=Ci([t.to,s,r,t.from]);let o=Ci([t.from,r,s]);this._active=!0,this._fn=t.fn||Au[t.type||typeof o],this._easing=bi[t.easing]||bi.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=i,this._prop=n,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,i,n){if(this._active){this._notify(!1);let s=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=Ci([t.to,i,s,t.from]),this._from=Ci([t.from,s,i])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){let i=t-this._start,n=this._duration,s=this._prop,r=this._from,o=this._loop,a=this._to,l;if(this._active=r!==a&&(o||i<n),!this._active){this._target[s]=a,this._notify(!0);return}if(i<0){this._target[s]=r;return}l=i/n%2,l=o&&l>1?2-l:l,l=this._easing(Math.min(1,Math.max(0,l))),this._target[s]=this._fn(r,a,l)}wait(){let t=this._promises||(this._promises=[]);return new Promise((i,n)=>{t.push({res:i,rej:n})})}_notify(t){let i=t?"res":"rej",n=this._promises||[];for(let s=0;s<n.length;s++)n[s][i]()}},Ls=class{constructor(t,i){this._chart=t,this._properties=new Map,this.configure(i)}configure(t){if(!z(t))return;let i=Object.keys(nt.animation),n=this._properties;Object.getOwnPropertyNames(t).forEach(s=>{let r=t[s];if(!z(r))return;let o={};for(let a of i)o[a]=r[a];(K(r.properties)&&r.properties||[s]).forEach(a=>{(a===s||!n.has(a))&&n.set(a,o)})})}_animateOptions(t,i){let n=i.options,s=Eu(t,n);if(!s)return[];let r=this._createAnimations(s,n);return n.$shared&&Cu(t.options.$animations,n).then(()=>{t.options=n},()=>{}),r}_createAnimations(t,i){let n=this._properties,s=[],r=t.$animations||(t.$animations={}),o=Object.keys(i),a=Date.now(),l;for(l=o.length-1;l>=0;--l){let c=o[l];if(c.charAt(0)==="$")continue;if(c==="options"){s.push(...this._animateOptions(t,i));continue}let h=i[c],d=r[c],u=n.get(c);if(d)if(u&&d.active()){d.update(u,h,a);continue}else d.cancel();if(!u||!u.duration){t[c]=h;continue}r[c]=d=new fo(u,t,c,h),s.push(d)}return s}update(t,i){if(this._properties.size===0){Object.assign(t,i);return}let n=this._createAnimations(t,i);if(n.length)return ve.add(this._chart,n),!0}};function Cu(e,t){let i=[],n=Object.keys(t);for(let s=0;s<n.length;s++){let r=e[n[s]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}function Eu(e,t){if(!t)return;let i=e.options;if(!i){e.options=t;return}return i.$shared&&(e.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i}function ol(e,t){let i=e&&e.options||{},n=i.reverse,s=i.min===void 0?t:0,r=i.max===void 0?t:0;return{start:n?r:s,end:n?s:r}}function Pu(e,t,i){if(i===!1)return!1;let n=ol(e,i),s=ol(t,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}function Tu(e){let t,i,n,s;return z(e)?(t=e.top,i=e.right,n=e.bottom,s=e.left):t=i=n=s=e,{top:t,right:i,bottom:n,left:s,disabled:e===!1}}function sc(e,t){let i=[],n=e._getSortedDatasetMetas(t),s,r;for(s=0,r=n.length;s<r;++s)i.push(n[s].index);return i}function al(e,t,i,n={}){let s=e.keys,r=n.mode==="single",o,a,l,c;if(t!==null){for(o=0,a=s.length;o<a;++o){if(l=+s[o],l===i){if(n.all)continue;break}c=e.values[l],it(c)&&(r||t===0||Yt(t)===Yt(c))&&(t+=c)}return t}}function Mu(e){let t=Object.keys(e),i=new Array(t.length),n,s,r;for(n=0,s=t.length;n<s;++n)r=t[n],i[n]={x:r,y:e[r]};return i}function ll(e,t){let i=e&&e.options.stacked;return i||i===void 0&&t.stack!==void 0}function Ou(e,t,i){return`${e.id}.${t.id}.${i.stack||i.type}`}function Du(e){let{min:t,max:i,minDefined:n,maxDefined:s}=e.getUserBounds();return{min:n?t:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}function Lu(e,t,i){let n=e[t]||(e[t]={});return n[i]||(n[i]={})}function cl(e,t,i,n){for(let s of t.getMatchingVisibleMetas(n).reverse()){let r=e[s.index];if(i&&r>0||!i&&r<0)return s.index}return null}function hl(e,t){let{chart:i,_cachedMeta:n}=e,s=i._stacks||(i._stacks={}),{iScale:r,vScale:o,index:a}=n,l=r.axis,c=o.axis,h=Ou(r,o,n),d=t.length,u;for(let f=0;f<d;++f){let g=t[f],{[l]:m,[c]:b}=g,v=g._stacks||(g._stacks={});u=v[c]=Lu(s,h,m),u[a]=b,u._top=cl(u,o,!0,n.type),u._bottom=cl(u,o,!1,n.type);let x=u._visualValues||(u._visualValues={});x[a]=b}}function io(e,t){let i=e.scales;return Object.keys(i).filter(n=>i[n].axis===t).shift()}function Ru(e,t){return be(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}function Iu(e,t,i){return be(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:i,index:t,mode:"default",type:"data"})}function an(e,t){let i=e.controller.index,n=e.vScale&&e.vScale.axis;if(!!n){t=t||e._parsed;for(let s of t){let r=s._stacks;if(!r||r[n]===void 0||r[n][i]===void 0)return;delete r[n][i],r[n]._visualValues!==void 0&&r[n]._visualValues[i]!==void 0&&delete r[n]._visualValues[i]}}}var no=e=>e==="reset"||e==="none",dl=(e,t)=>t?e:Object.assign({},e),Fu=(e,t,i)=>e&&!t.hidden&&t._stacked&&{keys:sc(i,!0),values:null},Ot=class{constructor(t,i){this.chart=t,this._ctx=t.ctx,this.index=i,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){let t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=ll(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&an(this._cachedMeta),this.index=t}linkScales(){let t=this.chart,i=this._cachedMeta,n=this.getDataset(),s=(d,u,f,g)=>d==="x"?u:d==="r"?g:f,r=i.xAxisID=V(n.xAxisID,io(t,"x")),o=i.yAxisID=V(n.yAxisID,io(t,"y")),a=i.rAxisID=V(n.rAxisID,io(t,"r")),l=i.indexAxis,c=i.iAxisID=s(l,r,o,a),h=i.vAxisID=s(l,o,r,a);i.xScale=this.getScaleForId(r),i.yScale=this.getScaleForId(o),i.rScale=this.getScaleForId(a),i.iScale=this.getScaleForId(c),i.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){let i=this._cachedMeta;return t===i.iScale?i.vScale:i.iScale}reset(){this._update("reset")}_destroy(){let t=this._cachedMeta;this._data&&Rr(this._data,this),t._stacked&&an(t)}_dataCheck(){let t=this.getDataset(),i=t.data||(t.data=[]),n=this._data;if(z(i))this._data=Mu(i);else if(n!==i){if(n){Rr(n,this);let s=this._cachedMeta;an(s),s._parsed=[]}i&&Object.isExtensible(i)&&ja(i,this),this._syncList=[],this._data=i}}addElements(){let t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){let i=this._cachedMeta,n=this.getDataset(),s=!1;this._dataCheck();let r=i._stacked;i._stacked=ll(i.vScale,i),i.stack!==n.stack&&(s=!0,an(i),i.stack=n.stack),this._resyncElements(t),(s||r!==i._stacked)&&hl(this,i._parsed)}configure(){let t=this.chart.config,i=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),i,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,i){let{_cachedMeta:n,_data:s}=this,{iScale:r,_stacked:o}=n,a=r.axis,l=t===0&&i===s.length?!0:n._sorted,c=t>0&&n._parsed[t-1],h,d,u;if(this._parsing===!1)n._parsed=s,n._sorted=!0,u=s;else{K(s[t])?u=this.parseArrayData(n,s,t,i):z(s[t])?u=this.parseObjectData(n,s,t,i):u=this.parsePrimitiveData(n,s,t,i);let f=()=>d[a]===null||c&&d[a]<c[a];for(h=0;h<i;++h)n._parsed[h+t]=d=u[h],l&&(f()&&(l=!1),c=d);n._sorted=l}o&&hl(this,u)}parsePrimitiveData(t,i,n,s){let{iScale:r,vScale:o}=t,a=r.axis,l=o.axis,c=r.getLabels(),h=r===o,d=new Array(s),u,f,g;for(u=0,f=s;u<f;++u)g=u+n,d[u]={[a]:h||r.parse(c[g],g),[l]:o.parse(i[g],g)};return d}parseArrayData(t,i,n,s){let{xScale:r,yScale:o}=t,a=new Array(s),l,c,h,d;for(l=0,c=s;l<c;++l)h=l+n,d=i[h],a[l]={x:r.parse(d[0],h),y:o.parse(d[1],h)};return a}parseObjectData(t,i,n,s){let{xScale:r,yScale:o}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(s),h,d,u,f;for(h=0,d=s;h<d;++h)u=h+n,f=i[u],c[h]={x:r.parse(me(f,a),u),y:o.parse(me(f,l),u)};return c}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,i,n){let s=this.chart,r=this._cachedMeta,o=i[t.axis],a={keys:sc(s,!0),values:i._stacks[t.axis]._visualValues};return al(a,o,r.index,{mode:n})}updateRangeFromParsed(t,i,n,s){let r=n[i.axis],o=r===null?NaN:r,a=s&&n._stacks[i.axis];s&&a&&(s.values=a,o=al(s,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,i){let n=this._cachedMeta,s=n._parsed,r=n._sorted&&t===n.iScale,o=s.length,a=this._getOtherScale(t),l=Fu(i,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:d}=Du(a),u,f;function g(){f=s[u];let m=f[a.axis];return!it(f[t.axis])||h>m||d<m}for(u=0;u<o&&!(!g()&&(this.updateRangeFromParsed(c,t,f,l),r));++u);if(r){for(u=o-1;u>=0;--u)if(!g()){this.updateRangeFromParsed(c,t,f,l);break}}return c}getAllParsedValues(t){let i=this._cachedMeta._parsed,n=[],s,r,o;for(s=0,r=i.length;s<r;++s)o=i[s][t.axis],it(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){let i=this._cachedMeta,n=i.iScale,s=i.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:s?""+s.getLabelForValue(r[s.axis]):""}}_update(t){let i=this._cachedMeta;this.update(t||"default"),i._clip=Tu(V(this.options.clip,Pu(i.xScale,i.yScale,this.getMaxOverflow())))}update(t){}draw(){let t=this._ctx,i=this.chart,n=this._cachedMeta,s=n.data||[],r=i.chartArea,o=[],a=this._drawStart||0,l=this._drawCount||s.length-a,c=this.options.drawActiveElementsOnTop,h;for(n.dataset&&n.dataset.draw(t,r,a,l),h=a;h<a+l;++h){let d=s[h];d.hidden||(d.active&&c?o.push(d):d.draw(t,r))}for(h=0;h<o.length;++h)o[h].draw(t,r)}getStyle(t,i){let n=i?"active":"default";return t===void 0&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,i,n){let s=this.getDataset(),r;if(t>=0&&t<this._cachedMeta.data.length){let o=this._cachedMeta.data[t];r=o.$context||(o.$context=Iu(this.getContext(),t,o)),r.parsed=this.getParsed(t),r.raw=s.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=Ru(this.chart.getContext(),this.index)),r.dataset=s,r.index=r.datasetIndex=this.index;return r.active=!!i,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,i){return this._resolveElementOptions(this.dataElementType.id,i,t)}_resolveElementOptions(t,i="default",n){let s=i==="active",r=this._cachedDataOpts,o=t+"-"+i,a=r[o],l=this.enableOptionSharing&&_i(n);if(a)return dl(a,l);let c=this.chart.config,h=c.datasetElementScopeKeys(this._type,t),d=s?[`${t}Hover`,"hover",t,""]:[t,""],u=c.getOptionScopes(this.getDataset(),h),f=Object.keys(nt.elements[t]),g=()=>this.getContext(n,s,i),m=c.resolveNamedOptions(u,f,g,d);return m.$shared&&(m.$shared=l,r[o]=Object.freeze(dl(m,l))),m}_resolveAnimations(t,i,n){let s=this.chart,r=this._cachedDataOpts,o=`animation-${i}`,a=r[o];if(a)return a;let l;if(s.options.animation!==!1){let h=this.chart.config,d=h.datasetAnimationScopeKeys(this._type,i),u=h.getOptionScopes(this.getDataset(),d);l=h.createResolver(u,this.getContext(t,n,i))}let c=new Ls(s,l&&l.animations);return l&&l._cacheable&&(r[o]=Object.freeze(c)),c}getSharedOptions(t){if(!!t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,i){return!i||no(t)||this.chart._animationsDisabled}_getSharedOptions(t,i){let n=this.resolveDataElementOptions(t,i),s=this._sharedOptions,r=this.getSharedOptions(n),o=this.includeOptions(i,r)||r!==s;return this.updateSharedOptions(r,i,n),{sharedOptions:r,includeOptions:o}}updateElement(t,i,n,s){no(s)?Object.assign(t,n):this._resolveAnimations(i,s).update(t,n)}updateSharedOptions(t,i,n){t&&!no(i)&&this._resolveAnimations(void 0,i).update(t,n)}_setStyle(t,i,n,s){t.active=s;let r=this.getStyle(i,s);this._resolveAnimations(i,n,s).update(t,{options:!s&&this.getSharedOptions(r)||r})}removeHoverStyle(t,i,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,i,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){let t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){let t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){let i=this._data,n=this._cachedMeta.data;for(let[a,l,c]of this._syncList)this[a](l,c);this._syncList=[];let s=n.length,r=i.length,o=Math.min(r,s);o&&this.parse(0,o),r>s?this._insertElements(s,r-s,t):r<s&&this._removeElements(r,s-r)}_insertElements(t,i,n=!0){let s=this._cachedMeta,r=s.data,o=t+i,a,l=c=>{for(c.length+=i,a=c.length-1;a>=o;a--)c[a]=c[a-i]};for(l(r),a=t;a<o;++a)r[a]=new this.dataElementType;this._parsing&&l(s._parsed),this.parse(t,i),n&&this.updateElements(r,t,i,"reset")}updateElements(t,i,n,s){}_removeElements(t,i){let n=this._cachedMeta;if(this._parsing){let s=n._parsed.splice(t,i);n._stacked&&an(n,s)}n.data.splice(t,i)}_sync(t){if(this._parsing)this._syncList.push(t);else{let[i,n,s]=t;this[i](n,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){let t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,i){i&&this._sync(["_removeElements",t,i]);let n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}};D(Ot,"defaults",{}),D(Ot,"datasetElementType",null),D(Ot,"dataElementType",null);function Nu(e,t){if(!e._cache.$bar){let i=e.getMatchingVisibleMetas(t),n=[];for(let s=0,r=i.length;s<r;s++)n=n.concat(i[s].controller.getAllParsedValues(e));e._cache.$bar=Ir(n.sort((s,r)=>s-r))}return e._cache.$bar}function Bu(e){let t=e.iScale,i=Nu(t,e.type),n=t._length,s,r,o,a,l=()=>{o===32767||o===-32768||(_i(a)&&(n=Math.min(n,Math.abs(o-a)||n)),a=o)};for(s=0,r=i.length;s<r;++s)o=t.getPixelForValue(i[s]),l();for(a=void 0,s=0,r=t.ticks.length;s<r;++s)o=t.getPixelForTick(s),l();return n}function Hu(e,t,i,n){let s=i.barThickness,r,o;return $(s)?(r=t.min*i.categoryPercentage,o=i.barPercentage):(r=s*n,o=1),{chunk:r/n,ratio:o,start:t.pixels[e]-r/2}}function ju(e,t,i,n){let s=t.pixels,r=s[e],o=e>0?s[e-1]:null,a=e<s.length-1?s[e+1]:null,l=i.categoryPercentage;o===null&&(o=r-(a===null?t.end-t.start:a-r)),a===null&&(a=r+r-o);let c=r-(r-Math.min(o,a))/2*l;return{chunk:Math.abs(a-o)/2*l/n,ratio:i.barPercentage,start:c}}function Vu(e,t,i,n){let s=i.parse(e[0],n),r=i.parse(e[1],n),o=Math.min(s,r),a=Math.max(s,r),l=o,c=a;Math.abs(o)>Math.abs(a)&&(l=a,c=o),t[i.axis]=c,t._custom={barStart:l,barEnd:c,start:s,end:r,min:o,max:a}}function rc(e,t,i,n){return K(e)?Vu(e,t,i,n):t[i.axis]=i.parse(e,n),t}function ul(e,t,i,n){let s=e.iScale,r=e.vScale,o=s.getLabels(),a=s===r,l=[],c,h,d,u;for(c=i,h=i+n;c<h;++c)u=t[c],d={},d[s.axis]=a||s.parse(o[c],c),l.push(rc(u,d,r,c));return l}function so(e){return e&&e.barStart!==void 0&&e.barEnd!==void 0}function zu(e,t,i){return e!==0?Yt(e):(t.isHorizontal()?1:-1)*(t.min>=i?1:-1)}function Wu(e){let t,i,n,s,r;return e.horizontal?(t=e.base>e.x,i="left",n="right"):(t=e.base<e.y,i="bottom",n="top"),t?(s="end",r="start"):(s="start",r="end"),{start:i,end:n,reverse:t,top:s,bottom:r}}function $u(e,t,i,n){let s=t.borderSkipped,r={};if(!s){e.borderSkipped=r;return}if(s===!0){e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0};return}let{start:o,end:a,reverse:l,top:c,bottom:h}=Wu(e);s==="middle"&&i&&(e.enableBorderRadius=!0,(i._top||0)===n?s=c:(i._bottom||0)===n?s=h:(r[fl(h,o,a,l)]=!0,s=c)),r[fl(s,o,a,l)]=!0,e.borderSkipped=r}function fl(e,t,i,n){return n?(e=Uu(e,t,i),e=pl(e,i,t)):e=pl(e,t,i),e}function Uu(e,t,i){return e===t?i:e===i?t:e}function pl(e,t,i){return e==="start"?t:e==="end"?i:e}function Xu(e,{inflateAmount:t},i){e.inflateAmount=t==="auto"?i===1?.33:0:t}var Pi=class extends Ot{parsePrimitiveData(t,i,n,s){return ul(t,i,n,s)}parseArrayData(t,i,n,s){return ul(t,i,n,s)}parseObjectData(t,i,n,s){let{iScale:r,vScale:o}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=r.axis==="x"?a:l,h=o.axis==="x"?a:l,d=[],u,f,g,m;for(u=n,f=n+s;u<f;++u)m=i[u],g={},g[r.axis]=r.parse(me(m,c),u),d.push(rc(me(m,h),g,o,u));return d}updateRangeFromParsed(t,i,n,s){super.updateRangeFromParsed(t,i,n,s);let r=n._custom;r&&i===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){let i=this._cachedMeta,{iScale:n,vScale:s}=i,r=this.getParsed(t),o=r._custom,a=so(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(r[s.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize();let t=this._cachedMeta;t.stack=this.getDataset().stack}update(t){let i=this._cachedMeta;this.updateElements(i.data,0,i.data.length,t)}updateElements(t,i,n,s){let r=s==="reset",{index:o,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),h=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(i,s);for(let f=i;f<i+n;f++){let g=this.getParsed(f),m=r||$(g[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(f),b=this._calculateBarIndexPixels(f,h),v=(g._stacks||{})[a.axis],x={horizontal:c,base:m.base,enableBorderRadius:!v||so(g._custom)||o===v._top||o===v._bottom,x:c?m.head:b.center,y:c?b.center:m.head,height:c?b.size:Math.abs(m.size),width:c?Math.abs(m.size):b.size};u&&(x.options=d||this.resolveDataElementOptions(f,t[f].active?"active":s));let w=x.options||t[f].options;$u(x,w,v,o),Xu(x,w,h.ratio),this.updateElement(t[f],f,x,s)}}_getStacks(t,i){let{iScale:n}=this._cachedMeta,s=n.getMatchingVisibleMetas(this._type).filter(l=>l.controller.options.grouped),r=n.options.stacked,o=[],a=l=>{let c=l.controller.getParsed(i),h=c&&c[l.vScale.axis];if($(h)||isNaN(h))return!0};for(let l of s)if(!(i!==void 0&&a(l))&&((r===!1||o.indexOf(l.stack)===-1||r===void 0&&l.stack===void 0)&&o.push(l.stack),l.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,i,n){let s=this._getStacks(t,n),r=i!==void 0?s.indexOf(i):-1;return r===-1?s.length-1:r}_getRuler(){let t=this.options,i=this._cachedMeta,n=i.iScale,s=[],r,o;for(r=0,o=i.data.length;r<o;++r)s.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));let a=t.barThickness;return{min:a||Bu(i),pixels:s,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){let{_cachedMeta:{vScale:i,_stacked:n,index:s},options:{base:r,minBarLength:o}}=this,a=r||0,l=this.getParsed(t),c=l._custom,h=so(c),d=l[i.axis],u=0,f=n?this.applyStack(i,l,n):d,g,m;f!==d&&(u=f-d,f=d),h&&(d=c.barStart,f=c.barEnd-c.barStart,d!==0&&Yt(d)!==Yt(c.barEnd)&&(u=0),u+=d);let b=!$(r)&&!h?r:u,v=i.getPixelForValue(b);if(this.chart.getDataVisibility(t)?g=i.getPixelForValue(u+f):g=v,m=g-v,Math.abs(m)<o){m=zu(m,i,a)*o,d===a&&(v-=m/2);let x=i.getPixelForDecimal(0),w=i.getPixelForDecimal(1),p=Math.min(x,w),y=Math.max(x,w);v=Math.max(Math.min(v,y),p),g=v+m,n&&!h&&(l._stacks[i.axis]._visualValues[s]=i.getValueForPixel(g)-i.getValueForPixel(v))}if(v===i.getPixelForValue(a)){let x=Yt(m)*i.getLineWidthForValue(a)/2;v+=x,m-=x}return{size:m,base:v,head:g,center:g+m/2}}_calculateBarIndexPixels(t,i){let n=i.scale,s=this.options,r=s.skipNull,o=V(s.maxBarThickness,1/0),a,l;if(i.grouped){let c=r?this._getStackCount(t):i.stackCount,h=s.barThickness==="flex"?ju(t,i,s,c):Hu(t,i,s,c),d=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);a=h.start+h.chunk*d+h.chunk/2,l=Math.min(o,h.chunk*h.ratio)}else a=n.getPixelForValue(this.getParsed(t)[n.axis],t),l=Math.min(o,i.min*i.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){let t=this._cachedMeta,i=t.vScale,n=t.data,s=n.length,r=0;for(;r<s;++r)this.getParsed(r)[i.axis]!==null&&n[r].draw(this._ctx)}};D(Pi,"id","bar"),D(Pi,"defaults",{datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}}),D(Pi,"overrides",{scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}});var Ti=class extends Ot{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,i,n,s){let r=super.parsePrimitiveData(t,i,n,s);for(let o=0;o<r.length;o++)r[o]._custom=this.resolveDataElementOptions(o+n).radius;return r}parseArrayData(t,i,n,s){let r=super.parseArrayData(t,i,n,s);for(let o=0;o<r.length;o++){let a=i[n+o];r[o]._custom=V(a[2],this.resolveDataElementOptions(o+n).radius)}return r}parseObjectData(t,i,n,s){let r=super.parseObjectData(t,i,n,s);for(let o=0;o<r.length;o++){let a=i[n+o];r[o]._custom=V(a&&a.r&&+a.r,this.resolveDataElementOptions(o+n).radius)}return r}getMaxOverflow(){let t=this._cachedMeta.data,i=0;for(let n=t.length-1;n>=0;--n)i=Math.max(i,t[n].size(this.resolveDataElementOptions(n))/2);return i>0&&i}getLabelAndValue(t){let i=this._cachedMeta,n=this.chart.data.labels||[],{xScale:s,yScale:r}=i,o=this.getParsed(t),a=s.getLabelForValue(o.x),l=r.getLabelForValue(o.y),c=o._custom;return{label:n[t]||"",value:"("+a+", "+l+(c?", "+c:"")+")"}}update(t){let i=this._cachedMeta.data;this.updateElements(i,0,i.length,t)}updateElements(t,i,n,s){let r=s==="reset",{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:l,includeOptions:c}=this._getSharedOptions(i,s),h=o.axis,d=a.axis;for(let u=i;u<i+n;u++){let f=t[u],g=!r&&this.getParsed(u),m={},b=m[h]=r?o.getPixelForDecimal(.5):o.getPixelForValue(g[h]),v=m[d]=r?a.getBasePixel():a.getPixelForValue(g[d]);m.skip=isNaN(b)||isNaN(v),c&&(m.options=l||this.resolveDataElementOptions(u,f.active?"active":s),r&&(m.options.radius=0)),this.updateElement(f,u,m,s)}}resolveDataElementOptions(t,i){let n=this.getParsed(t),s=super.resolveDataElementOptions(t,i);s.$shared&&(s=Object.assign({},s,{$shared:!1}));let r=s.radius;return i!=="active"&&(s.radius=0),s.radius+=V(n&&n._custom,r),s}};D(Ti,"id","bubble"),D(Ti,"defaults",{datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}}),D(Ti,"overrides",{scales:{x:{type:"linear"},y:{type:"linear"}}});function Yu(e,t,i){let n=1,s=1,r=0,o=0;if(t<G){let a=e,l=a+t,c=Math.cos(a),h=Math.sin(a),d=Math.cos(l),u=Math.sin(l),f=(w,p,y)=>Si(w,a,l,!0)?1:Math.max(p,p*i,y,y*i),g=(w,p,y)=>Si(w,a,l,!0)?-1:Math.min(p,p*i,y,y*i),m=f(0,c,d),b=f(et,h,u),v=g(Z,c,d),x=g(Z+et,h,u);n=(m-v)/2,s=(b-x)/2,r=-(m+v)/2,o=-(b+x)/2}return{ratioX:n,ratioY:s,offsetX:r,offsetY:o}}var xe=class extends Ot{constructor(t,i){super(t,i),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,i){let n=this.getDataset().data,s=this._cachedMeta;if(this._parsing===!1)s._parsed=n;else{let r=l=>+n[l];if(z(n[t])){let{key:l="value"}=this._parsing;r=c=>+me(n[c],l)}let o,a;for(o=t,a=t+i;o<a;++o)s._parsed[o]=r(o)}}_getRotation(){return Bt(this.options.rotation-90)}_getCircumference(){return Bt(this.options.circumference)}_getRotationExtents(){let t=G,i=-G;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){let s=this.chart.getDatasetMeta(n).controller,r=s._getRotation(),o=s._getCircumference();t=Math.min(t,r),i=Math.max(i,r+o)}return{rotation:t,circumference:i-t}}update(t){let i=this.chart,{chartArea:n}=i,s=this._cachedMeta,r=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-o)/2,0),l=Math.min(Oa(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:u,ratioY:f,offsetX:g,offsetY:m}=Yu(d,h,l),b=(n.width-o)/u,v=(n.height-o)/f,x=Math.max(Math.min(b,v)/2,0),w=Pr(this.options.radius,x),p=Math.max(w*l,0),y=(w-p)/this._getVisibleDatasetWeightTotal();this.offsetX=g*w,this.offsetY=m*w,s.total=this.calculateTotal(),this.outerRadius=w-y*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-y*c,0),this.updateElements(r,0,r.length,t)}_circumference(t,i){let n=this.options,s=this._cachedMeta,r=this._getCircumference();return i&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||s._parsed[t]===null||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*r/G)}updateElements(t,i,n,s){let r=s==="reset",o=this.chart,a=o.chartArea,c=o.options.animation,h=(a.left+a.right)/2,d=(a.top+a.bottom)/2,u=r&&c.animateScale,f=u?0:this.innerRadius,g=u?0:this.outerRadius,{sharedOptions:m,includeOptions:b}=this._getSharedOptions(i,s),v=this._getRotation(),x;for(x=0;x<i;++x)v+=this._circumference(x,r);for(x=i;x<i+n;++x){let w=this._circumference(x,r),p=t[x],y={x:h+this.offsetX,y:d+this.offsetY,startAngle:v,endAngle:v+w,circumference:w,outerRadius:g,innerRadius:f};b&&(y.options=m||this.resolveDataElementOptions(x,p.active?"active":s)),v+=w,this.updateElement(p,x,y,s)}}calculateTotal(){let t=this._cachedMeta,i=t.data,n=0,s;for(s=0;s<i.length;s++){let r=t._parsed[s];r!==null&&!isNaN(r)&&this.chart.getDataVisibility(s)&&!i[s].hidden&&(n+=Math.abs(r))}return n}calculateCircumference(t){let i=this._cachedMeta.total;return i>0&&!isNaN(t)?G*(Math.abs(t)/i):0}getLabelAndValue(t){let i=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=ki(i._parsed[t],n.options.locale);return{label:s[t]||"",value:r}}getMaxBorderWidth(t){let i=0,n=this.chart,s,r,o,a,l;if(!t){for(s=0,r=n.data.datasets.length;s<r;++s)if(n.isDatasetVisible(s)){o=n.getDatasetMeta(s),t=o.data,a=o.controller;break}}if(!t)return 0;for(s=0,r=t.length;s<r;++s)l=a.resolveDataElementOptions(s),l.borderAlign!=="inner"&&(i=Math.max(i,l.borderWidth||0,l.hoverBorderWidth||0));return i}getMaxOffset(t){let i=0;for(let n=0,s=t.length;n<s;++n){let r=this.resolveDataElementOptions(n);i=Math.max(i,r.offset||0,r.hoverOffset||0)}return i}_getRingWeightOffset(t){let i=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(i+=this._getRingWeight(n));return i}_getRingWeight(t){return Math.max(V(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}};D(xe,"id","doughnut"),D(xe,"defaults",{datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"}),D(xe,"descriptors",{_scriptable:t=>t!=="spacing",_indexable:t=>t!=="spacing"&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")}),D(xe,"overrides",{aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){let i=t.data;if(i.labels.length&&i.datasets.length){let{labels:{pointStyle:n,color:s}}=t.legend.options;return i.labels.map((r,o)=>{let l=t.getDatasetMeta(0).controller.getStyle(o);return{text:r,fillStyle:l.backgroundColor,strokeStyle:l.borderColor,fontColor:s,lineWidth:l.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}})}return[]}},onClick(t,i,n){n.chart.toggleDataVisibility(i.index),n.chart.update()}}}});var Mi=class extends Ot{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){let i=this._cachedMeta,{dataset:n,data:s=[],_dataset:r}=i,o=this.chart._animationsDisabled,{start:a,count:l}=Br(i,s,o);this._drawStart=a,this._drawCount=l,Hr(i)&&(a=0,l=s.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=s;let c=this.resolveDatasetElementOptions(t);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:c},t),this.updateElements(s,a,l,t)}updateElements(t,i,n,s){let r=s==="reset",{iScale:o,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:h,includeOptions:d}=this._getSharedOptions(i,s),u=o.axis,f=a.axis,{spanGaps:g,segment:m}=this.options,b=qe(g)?g:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||r||s==="none",x=i+n,w=t.length,p=i>0&&this.getParsed(i-1);for(let y=0;y<w;++y){let _=t[y],A=v?_:{};if(y<i||y>=x){A.skip=!0;continue}let C=this.getParsed(y),E=$(C[f]),M=A[u]=o.getPixelForValue(C[u],y),P=A[f]=r||E?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,C,l):C[f],y);A.skip=isNaN(M)||isNaN(P)||E,A.stop=y>0&&Math.abs(C[u]-p[u])>b,m&&(A.parsed=C,A.raw=c.data[y]),d&&(A.options=h||this.resolveDataElementOptions(y,_.active?"active":s)),v||this.updateElement(_,y,A,s),p=C}}getMaxOverflow(){let t=this._cachedMeta,i=t.dataset,n=i.options&&i.options.borderWidth||0,s=t.data||[];if(!s.length)return n;let r=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(n,r,o)/2}draw(){let t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}};D(Mi,"id","line"),D(Mi,"defaults",{datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1}),D(Mi,"overrides",{scales:{_index_:{type:"category"},_value_:{type:"linear"}}});var ti=class extends Ot{constructor(t,i){super(t,i),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){let i=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=ki(i._parsed[t].r,n.options.locale);return{label:s[t]||"",value:r}}parseObjectData(t,i,n,s){return qr.bind(this)(t,i,n,s)}update(t){let i=this._cachedMeta.data;this._updateRadius(),this.updateElements(i,0,i.length,t)}getMinMax(){let t=this._cachedMeta,i={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach((n,s)=>{let r=this.getParsed(s).r;!isNaN(r)&&this.chart.getDataVisibility(s)&&(r<i.min&&(i.min=r),r>i.max&&(i.max=r))}),i}_updateRadius(){let t=this.chart,i=t.chartArea,n=t.options,s=Math.min(i.right-i.left,i.bottom-i.top),r=Math.max(s/2,0),o=Math.max(n.cutoutPercentage?r/100*n.cutoutPercentage:1,0),a=(r-o)/t.getVisibleDatasetCount();this.outerRadius=r-a*this.index,this.innerRadius=this.outerRadius-a}updateElements(t,i,n,s){let r=s==="reset",o=this.chart,l=o.options.animation,c=this._cachedMeta.rScale,h=c.xCenter,d=c.yCenter,u=c.getIndexAngle(0)-.5*Z,f=u,g,m=360/this.countVisibleElements();for(g=0;g<i;++g)f+=this._computeAngle(g,s,m);for(g=i;g<i+n;g++){let b=t[g],v=f,x=f+this._computeAngle(g,s,m),w=o.getDataVisibility(g)?c.getDistanceFromCenterForValue(this.getParsed(g).r):0;f=x,r&&(l.animateScale&&(w=0),l.animateRotate&&(v=x=u));let p={x:h,y:d,innerRadius:0,outerRadius:w,startAngle:v,endAngle:x,options:this.resolveDataElementOptions(g,b.active?"active":s)};this.updateElement(b,g,p,s)}}countVisibleElements(){let t=this._cachedMeta,i=0;return t.data.forEach((n,s)=>{!isNaN(this.getParsed(s).r)&&this.chart.getDataVisibility(s)&&i++}),i}_computeAngle(t,i,n){return this.chart.getDataVisibility(t)?Bt(this.resolveDataElementOptions(t,i).angle||n):0}};D(ti,"id","polarArea"),D(ti,"defaults",{dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0}),D(ti,"overrides",{aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){let i=t.data;if(i.labels.length&&i.datasets.length){let{labels:{pointStyle:n,color:s}}=t.legend.options;return i.labels.map((r,o)=>{let l=t.getDatasetMeta(0).controller.getStyle(o);return{text:r,fillStyle:l.backgroundColor,strokeStyle:l.borderColor,fontColor:s,lineWidth:l.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}})}return[]}},onClick(t,i,n){n.chart.toggleDataVisibility(i.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}});var un=class extends xe{};D(un,"id","pie"),D(un,"defaults",{cutout:0,rotation:0,circumference:360,radius:"100%"});var Oi=class extends Ot{getLabelAndValue(t){let i=this._cachedMeta.vScale,n=this.getParsed(t);return{label:i.getLabels()[t],value:""+i.getLabelForValue(n[i.axis])}}parseObjectData(t,i,n,s){return qr.bind(this)(t,i,n,s)}update(t){let i=this._cachedMeta,n=i.dataset,s=i.data||[],r=i.iScale.getLabels();if(n.points=s,t!=="resize"){let o=this.resolveDatasetElementOptions(t);this.options.showLine||(o.borderWidth=0);let a={_loop:!0,_fullLoop:r.length===s.length,options:o};this.updateElement(n,void 0,a,t)}this.updateElements(s,0,s.length,t)}updateElements(t,i,n,s){let r=this._cachedMeta.rScale,o=s==="reset";for(let a=i;a<i+n;a++){let l=t[a],c=this.resolveDataElementOptions(a,l.active?"active":s),h=r.getPointPositionForValue(a,this.getParsed(a).r),d=o?r.xCenter:h.x,u=o?r.yCenter:h.y,f={x:d,y:u,angle:h.angle,skip:isNaN(d)||isNaN(u),options:c};this.updateElement(l,a,f,s)}}};D(Oi,"id","radar"),D(Oi,"defaults",{datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}}),D(Oi,"overrides",{aspectRatio:1,scales:{r:{type:"radialLinear"}}});var Di=class extends Ot{getLabelAndValue(t){let i=this._cachedMeta,n=this.chart.data.labels||[],{xScale:s,yScale:r}=i,o=this.getParsed(t),a=s.getLabelForValue(o.x),l=r.getLabelForValue(o.y);return{label:n[t]||"",value:"("+a+", "+l+")"}}update(t){let i=this._cachedMeta,{data:n=[]}=i,s=this.chart._animationsDisabled,{start:r,count:o}=Br(i,n,s);if(this._drawStart=r,this._drawCount=o,Hr(i)&&(r=0,o=n.length),this.options.showLine){let{dataset:a,_dataset:l}=i;a._chart=this.chart,a._datasetIndex=this.index,a._decimated=!!l._decimated,a.points=n;let c=this.resolveDatasetElementOptions(t);c.segment=this.options.segment,this.updateElement(a,void 0,{animated:!s,options:c},t)}this.updateElements(n,r,o,t)}addElements(){let{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,i,n,s){let r=s==="reset",{iScale:o,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,h=this.resolveDataElementOptions(i,s),d=this.getSharedOptions(h),u=this.includeOptions(s,d),f=o.axis,g=a.axis,{spanGaps:m,segment:b}=this.options,v=qe(m)?m:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||r||s==="none",w=i>0&&this.getParsed(i-1);for(let p=i;p<i+n;++p){let y=t[p],_=this.getParsed(p),A=x?y:{},C=$(_[g]),E=A[f]=o.getPixelForValue(_[f],p),M=A[g]=r||C?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,_,l):_[g],p);A.skip=isNaN(E)||isNaN(M)||C,A.stop=p>0&&Math.abs(_[f]-w[f])>v,b&&(A.parsed=_,A.raw=c.data[p]),u&&(A.options=d||this.resolveDataElementOptions(p,y.active?"active":s)),x||this.updateElement(y,p,A,s),w=_}this.updateSharedOptions(d,s,h)}getMaxOverflow(){let t=this._cachedMeta,i=t.data||[];if(!this.options.showLine){let a=0;for(let l=i.length-1;l>=0;--l)a=Math.max(a,i[l].size(this.resolveDataElementOptions(l))/2);return a>0&&a}let n=t.dataset,s=n.options&&n.options.borderWidth||0;if(!i.length)return s;let r=i[0].size(this.resolveDataElementOptions(0)),o=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(s,r,o)/2}};D(Di,"id","scatter"),D(Di,"defaults",{datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1}),D(Di,"overrides",{interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}});var qu=Object.freeze({__proto__:null,BarController:Pi,BubbleController:Ti,DoughnutController:xe,LineController:Mi,PieController:un,PolarAreaController:ti,RadarController:Oi,ScatterController:Di});function Ke(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}var xn=class{static override(t){Object.assign(xn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Ke()}parse(){return Ke()}format(){return Ke()}add(){return Ke()}diff(){return Ke()}startOf(){return Ke()}endOf(){return Ke()}},Ju={_date:xn};function Ku(e,t,i,n){let{controller:s,data:r,_sorted:o}=e,a=s._cachedMeta.iScale;if(a&&t===a.axis&&t!=="r"&&o&&r.length){let l=a._reversePixels?Na:te;if(n){if(s._sharedOptions){let c=r[0],h=typeof c.getRange=="function"&&c.getRange(t);if(h){let d=l(r,t,i-h),u=l(r,t,i+h);return{lo:d.lo,hi:u.hi}}}}else return l(r,t,i)}return{lo:0,hi:r.length-1}}function kn(e,t,i,n,s){let r=e.getSortedVisibleDatasetMetas(),o=i[t];for(let a=0,l=r.length;a<l;++a){let{index:c,data:h}=r[a],{lo:d,hi:u}=Ku(r[a],t,o,s);for(let f=d;f<=u;++f){let g=h[f];g.skip||n(g,c,f)}}}function Gu(e){let t=e.indexOf("x")!==-1,i=e.indexOf("y")!==-1;return function(n,s){let r=t?Math.abs(n.x-s.x):0,o=i?Math.abs(n.y-s.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}function ro(e,t,i,n,s){let r=[];return!s&&!e.isPointInArea(t)||kn(e,i,t,function(a,l,c){!s&&!ee(a,e.chartArea,0)||a.inRange(t.x,t.y,n)&&r.push({element:a,datasetIndex:l,index:c})},!0),r}function Zu(e,t,i,n){let s=[];function r(o,a,l){let{startAngle:c,endAngle:h}=o.getProps(["startAngle","endAngle"],n),{angle:d}=Lr(o,{x:t.x,y:t.y});Si(d,c,h)&&s.push({element:o,datasetIndex:a,index:l})}return kn(e,i,t,r),s}function Qu(e,t,i,n,s,r){let o=[],a=Gu(i),l=Number.POSITIVE_INFINITY;function c(h,d,u){let f=h.inRange(t.x,t.y,s);if(n&&!f)return;let g=h.getCenterPoint(s);if(!(!!r||e.isPointInArea(g))&&!f)return;let b=a(t,g);b<l?(o=[{element:h,datasetIndex:d,index:u}],l=b):b===l&&o.push({element:h,datasetIndex:d,index:u})}return kn(e,i,t,c),o}function oo(e,t,i,n,s,r){return!r&&!e.isPointInArea(t)?[]:i==="r"&&!n?Zu(e,t,i,s):Qu(e,t,i,n,s,r)}function gl(e,t,i,n,s){let r=[],o=i==="x"?"inXRange":"inYRange",a=!1;return kn(e,i,t,(l,c,h)=>{l[o](t[i],s)&&(r.push({element:l,datasetIndex:c,index:h}),a=a||l.inRange(t.x,t.y,s))}),n&&!a?[]:r}var tf={evaluateInteractionItems:kn,modes:{index(e,t,i,n){let s=Ie(t,e),r=i.axis||"x",o=i.includeInvisible||!1,a=i.intersect?ro(e,s,r,n,o):oo(e,s,r,!1,n,o),l=[];return a.length?(e.getSortedVisibleDatasetMetas().forEach(c=>{let h=a[0].index,d=c.data[h];d&&!d.skip&&l.push({element:d,datasetIndex:c.index,index:h})}),l):[]},dataset(e,t,i,n){let s=Ie(t,e),r=i.axis||"xy",o=i.includeInvisible||!1,a=i.intersect?ro(e,s,r,n,o):oo(e,s,r,!1,n,o);if(a.length>0){let l=a[0].datasetIndex,c=e.getDatasetMeta(l).data;a=[];for(let h=0;h<c.length;++h)a.push({element:c[h],datasetIndex:l,index:h})}return a},point(e,t,i,n){let s=Ie(t,e),r=i.axis||"xy",o=i.includeInvisible||!1;return ro(e,s,r,n,o)},nearest(e,t,i,n){let s=Ie(t,e),r=i.axis||"xy",o=i.includeInvisible||!1;return oo(e,s,r,i.intersect,n,o)},x(e,t,i,n){let s=Ie(t,e);return gl(e,s,"x",i.intersect,n)},y(e,t,i,n){let s=Ie(t,e);return gl(e,s,"y",i.intersect,n)}}},oc=["left","top","right","bottom"];function ln(e,t){return e.filter(i=>i.pos===t)}function ml(e,t){return e.filter(i=>oc.indexOf(i.pos)===-1&&i.box.axis===t)}function cn(e,t){return e.sort((i,n)=>{let s=t?n:i,r=t?i:n;return s.weight===r.weight?s.index-r.index:s.weight-r.weight})}function ef(e){let t=[],i,n,s,r,o,a;for(i=0,n=(e||[]).length;i<n;++i)s=e[i],{position:r,options:{stack:o,stackWeight:a=1}}=s,t.push({index:i,box:s,pos:r,horizontal:s.isHorizontal(),weight:s.weight,stack:o&&r+o,stackWeight:a});return t}function nf(e){let t={};for(let i of e){let{stack:n,pos:s,stackWeight:r}=i;if(!n||!oc.includes(s))continue;let o=t[n]||(t[n]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return t}function sf(e,t){let i=nf(e),{vBoxMaxWidth:n,hBoxMaxHeight:s}=t,r,o,a;for(r=0,o=e.length;r<o;++r){a=e[r];let{fullSize:l}=a.box,c=i[a.stack],h=c&&a.stackWeight/c.weight;a.horizontal?(a.width=h?h*n:l&&t.availableWidth,a.height=s):(a.width=n,a.height=h?h*s:l&&t.availableHeight)}return i}function rf(e){let t=ef(e),i=cn(t.filter(c=>c.box.fullSize),!0),n=cn(ln(t,"left"),!0),s=cn(ln(t,"right")),r=cn(ln(t,"top"),!0),o=cn(ln(t,"bottom")),a=ml(t,"x"),l=ml(t,"y");return{fullSize:i,leftAndTop:n.concat(r),rightAndBottom:s.concat(l).concat(o).concat(a),chartArea:ln(t,"chartArea"),vertical:n.concat(s).concat(l),horizontal:r.concat(o).concat(a)}}function bl(e,t,i,n){return Math.max(e[i],t[i])+Math.max(e[n],t[n])}function ac(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function of(e,t,i,n){let{pos:s,box:r}=i,o=e.maxPadding;if(!z(s)){i.size&&(e[s]-=i.size);let d=n[i.stack]||{size:0,count:1};d.size=Math.max(d.size,i.horizontal?r.height:r.width),i.size=d.size/d.count,e[s]+=i.size}r.getPadding&&ac(o,r.getPadding());let a=Math.max(0,t.outerWidth-bl(o,e,"left","right")),l=Math.max(0,t.outerHeight-bl(o,e,"top","bottom")),c=a!==e.w,h=l!==e.h;return e.w=a,e.h=l,i.horizontal?{same:c,other:h}:{same:h,other:c}}function af(e){let t=e.maxPadding;function i(n){let s=Math.max(t[n]-e[n],0);return e[n]+=s,s}e.y+=i("top"),e.x+=i("left"),i("right"),i("bottom")}function lf(e,t){let i=t.maxPadding;function n(s){let r={left:0,top:0,right:0,bottom:0};return s.forEach(o=>{r[o]=Math.max(t[o],i[o])}),r}return n(e?["left","right"]:["top","bottom"])}function fn(e,t,i,n){let s=[],r,o,a,l,c,h;for(r=0,o=e.length,c=0;r<o;++r){a=e[r],l=a.box,l.update(a.width||t.w,a.height||t.h,lf(a.horizontal,t));let{same:d,other:u}=of(t,i,a,n);c|=d&&s.length,h=h||u,l.fullSize||s.push(a)}return c&&fn(s,t,i,n)||h}function As(e,t,i,n,s){e.top=i,e.left=t,e.right=t+n,e.bottom=i+s,e.width=n,e.height=s}function vl(e,t,i,n){let s=i.padding,{x:r,y:o}=t;for(let a of e){let l=a.box,c=n[a.stack]||{count:1,placed:0,weight:1},h=a.stackWeight/c.weight||1;if(a.horizontal){let d=t.w*h,u=c.size||l.height;_i(c.start)&&(o=c.start),l.fullSize?As(l,s.left,o,i.outerWidth-s.right-s.left,u):As(l,t.left+c.placed,o,d,u),c.start=o,c.placed+=d,o=l.bottom}else{let d=t.h*h,u=c.size||l.width;_i(c.start)&&(r=c.start),l.fullSize?As(l,r,s.top,u,i.outerHeight-s.bottom-s.top):As(l,r,t.top+c.placed,u,d),c.start=r,c.placed+=d,r=l.right}}t.x=r,t.y=o}var _t={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(i){t.draw(i)}}]},e.boxes.push(t)},removeBox(e,t){let i=e.boxes?e.boxes.indexOf(t):-1;i!==-1&&e.boxes.splice(i,1)},configure(e,t,i){t.fullSize=i.fullSize,t.position=i.position,t.weight=i.weight},update(e,t,i,n){if(!e)return;let s=yt(e.options.layout.padding),r=Math.max(t-s.width,0),o=Math.max(i-s.height,0),a=rf(e.boxes),l=a.vertical,c=a.horizontal;Y(e.boxes,m=>{typeof m.beforeLayout=="function"&&m.beforeLayout()});let h=l.reduce((m,b)=>b.box.options&&b.box.options.display===!1?m:m+1,0)||1,d=Object.freeze({outerWidth:t,outerHeight:i,padding:s,availableWidth:r,availableHeight:o,vBoxMaxWidth:r/2/h,hBoxMaxHeight:o/2}),u=Object.assign({},s);ac(u,yt(n));let f=Object.assign({maxPadding:u,w:r,h:o,x:s.left,y:s.top},s),g=sf(l.concat(c),d);fn(a.fullSize,f,d,g),fn(l,f,d,g),fn(c,f,d,g)&&fn(l,f,d,g),af(f),vl(a.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,vl(a.rightAndBottom,f,d,g),e.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Y(a.chartArea,m=>{let b=m.box;Object.assign(b,e.chartArea),b.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})})}},Rs=class{acquireContext(t,i){}releaseContext(t){return!1}addEventListener(t,i,n){}removeEventListener(t,i,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,i,n,s){return i=Math.max(0,i||t.width),n=n||t.height,{width:i,height:Math.max(0,s?Math.floor(i/s):n)}}isAttached(t){return!0}updateConfig(t){}},po=class extends Rs{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}},Os="$chartjs",cf={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},yl=e=>e===null||e==="";function hf(e,t){let i=e.style,n=e.getAttribute("height"),s=e.getAttribute("width");if(e[Os]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",yl(s)){let r=Gr(e,"width");r!==void 0&&(e.width=r)}if(yl(n))if(e.style.height==="")e.height=e.width/(t||2);else{let r=Gr(e,"height");r!==void 0&&(e.height=r)}return e}var lc=tl?{passive:!0}:!1;function df(e,t,i){e.addEventListener(t,i,lc)}function uf(e,t,i){e.canvas.removeEventListener(t,i,lc)}function ff(e,t){let i=cf[e.type]||e.type,{x:n,y:s}=Ie(e,t);return{type:i,chart:t,native:e,x:n!==void 0?n:null,y:s!==void 0?s:null}}function Is(e,t){for(let i of e)if(i===t||i.contains(t))return!0}function pf(e,t,i){let n=e.canvas,s=new MutationObserver(r=>{let o=!1;for(let a of r)o=o||Is(a.addedNodes,n),o=o&&!Is(a.removedNodes,n);o&&i()});return s.observe(document,{childList:!0,subtree:!0}),s}function gf(e,t,i){let n=e.canvas,s=new MutationObserver(r=>{let o=!1;for(let a of r)o=o||Is(a.removedNodes,n),o=o&&!Is(a.addedNodes,n);o&&i()});return s.observe(document,{childList:!0,subtree:!0}),s}var _n=new Map,xl=0;function cc(){let e=window.devicePixelRatio;e!==xl&&(xl=e,_n.forEach((t,i)=>{i.currentDevicePixelRatio!==e&&t()}))}function mf(e,t){_n.size||window.addEventListener("resize",cc),_n.set(e,t)}function bf(e){_n.delete(e),_n.size||window.removeEventListener("resize",cc)}function vf(e,t,i){let n=e.canvas,s=n&&Ss(n);if(!s)return;let r=Nr((a,l)=>{let c=s.clientWidth;i(a,l),c<s.clientWidth&&i()},window),o=new ResizeObserver(a=>{let l=a[0],c=l.contentRect.width,h=l.contentRect.height;c===0&&h===0||r(c,h)});return o.observe(s),mf(e,r),o}function ao(e,t,i){i&&i.disconnect(),t==="resize"&&bf(e)}function yf(e,t,i){let n=e.canvas,s=Nr(r=>{e.ctx!==null&&i(ff(r,e))},e);return df(n,t,s),s}var go=class extends Rs{acquireContext(t,i){let n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(hf(t,i),n):null}releaseContext(t){let i=t.canvas;if(!i[Os])return!1;let n=i[Os].initial;["height","width"].forEach(r=>{let o=n[r];$(o)?i.removeAttribute(r):i.setAttribute(r,o)});let s=n.style||{};return Object.keys(s).forEach(r=>{i.style[r]=s[r]}),i.width=i.width,delete i[Os],!0}addEventListener(t,i,n){this.removeEventListener(t,i);let s=t.$proxies||(t.$proxies={}),o={attach:pf,detach:gf,resize:vf}[i]||yf;s[i]=o(t,i,n)}removeEventListener(t,i){let n=t.$proxies||(t.$proxies={}),s=n[i];if(!s)return;({attach:ao,detach:ao,resize:ao}[i]||uf)(t,i,s),n[i]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,i,n,s){return Qa(t,i,n,s)}isAttached(t){let i=Ss(t);return!!(i&&i.isConnected)}};function xf(e){return!Jr()||typeof OffscreenCanvas<"u"&&e instanceof OffscreenCanvas?po:go}var Dt=class{x;y;active=!1;options;$animations;tooltipPosition(t){let{x:i,y:n}=this.getProps(["x","y"],t);return{x:i,y:n}}hasValue(){return qe(this.x)&&qe(this.y)}getProps(t,i){let n=this.$animations;if(!i||!n)return this;let s={};return t.forEach(r=>{s[r]=n[r]&&n[r].active()?n[r]._to:this[r]}),s}};D(Dt,"defaults",{}),D(Dt,"defaultRoutes");function _f(e,t){let i=e.options.ticks,n=wf(e),s=Math.min(i.maxTicksLimit||n,n),r=i.major.enabled?kf(t):[],o=r.length,a=r[0],l=r[o-1],c=[];if(o>s)return Af(t,c,r,o/s),c;let h=Sf(r,t,s);if(o>0){let d,u,f=o>1?Math.round((l-a)/(o-1)):null;for(Cs(t,c,h,$(f)?0:a-f,a),d=0,u=o-1;d<u;d++)Cs(t,c,h,r[d],r[d+1]);return Cs(t,c,h,l,$(f)?t.length:l+f),c}return Cs(t,c,h),c}function wf(e){let t=e.options.offset,i=e._tickSize(),n=e._length/i+(t?0:1),s=e._maxLength/i;return Math.floor(Math.min(n,s))}function Sf(e,t,i){let n=Cf(e),s=t.length/i;if(!n)return Math.max(s,1);let r=Ra(n);for(let o=0,a=r.length-1;o<a;o++){let l=r[o];if(l>s)return l}return Math.max(s,1)}function kf(e){let t=[],i,n;for(i=0,n=e.length;i<n;i++)e[i].major&&t.push(i);return t}function Af(e,t,i,n){let s=0,r=i[0],o;for(n=Math.ceil(n),o=0;o<e.length;o++)o===r&&(t.push(e[o]),s++,r=i[s*n])}function Cs(e,t,i,n,s){let r=V(n,0),o=Math.min(V(s,e.length),e.length),a=0,l,c,h;for(i=Math.ceil(i),s&&(l=s-n,i=l/Math.floor(l/i)),h=r;h<0;)a++,h=Math.round(r+a*i);for(c=Math.max(r,0);c<o;c++)c===h&&(t.push(e[c]),a++,h=Math.round(r+a*i))}function Cf(e){let t=e.length,i,n;if(t<2)return!1;for(n=e[0],i=1;i<t;++i)if(e[i]-e[i-1]!==n)return!1;return n}var Ef=e=>e==="left"?"right":e==="right"?"left":e,_l=(e,t,i)=>t==="top"||t==="left"?e[t]+i:e[t]-i,wl=(e,t)=>Math.min(t||e,e);function Sl(e,t){let i=[],n=e.length/t,s=e.length,r=0;for(;r<s;r+=n)i.push(e[Math.floor(r)]);return i}function Pf(e,t,i){let n=e.ticks.length,s=Math.min(t,n-1),r=e._startPixel,o=e._endPixel,a=1e-6,l=e.getPixelForTick(s),c;if(!(i&&(n===1?c=Math.max(l-r,o-l):t===0?c=(e.getPixelForTick(1)-l)/2:c=(l-e.getPixelForTick(s-1))/2,l+=s<t?c:-c,l<r-a||l>o+a)))return l}function Tf(e,t){Y(e,i=>{let n=i.gc,s=n.length/2,r;if(s>t){for(r=0;r<s;++r)delete i.data[n[r]];n.splice(0,s)}})}function hn(e){return e.drawTicks?e.tickLength:0}function kl(e,t){if(!e.display)return 0;let i=ht(e.font,t),n=yt(e.padding);return(K(e.text)?e.text.length:1)*i.lineHeight+n.height}function Mf(e,t){return be(e,{scale:t,type:"scale"})}function Of(e,t,i){return be(e,{tick:i,index:t,type:"tick"})}function Df(e,t,i){let n=vs(e);return(i&&t!=="right"||!i&&t==="right")&&(n=Ef(n)),n}function Lf(e,t,i,n){let{top:s,left:r,bottom:o,right:a,chart:l}=e,{chartArea:c,scales:h}=l,d=0,u,f,g,m=o-s,b=a-r;if(e.isHorizontal()){if(f=vt(n,r,a),z(i)){let v=Object.keys(i)[0],x=i[v];g=h[v].getPixelForValue(x)+m-t}else i==="center"?g=(c.bottom+c.top)/2+m-t:g=_l(e,i,t);u=a-r}else{if(z(i)){let v=Object.keys(i)[0],x=i[v];f=h[v].getPixelForValue(x)-b+t}else i==="center"?f=(c.left+c.right)/2-b+t:f=_l(e,i,t);g=vt(n,o,s),d=i==="left"?-et:et}return{titleX:f,titleY:g,maxWidth:u,rotation:d}}var _e=class extends Dt{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,i){return t}getUserBounds(){let{_userMin:t,_userMax:i,_suggestedMin:n,_suggestedMax:s}=this;return t=Et(t,Number.POSITIVE_INFINITY),i=Et(i,Number.NEGATIVE_INFINITY),n=Et(n,Number.POSITIVE_INFINITY),s=Et(s,Number.NEGATIVE_INFINITY),{min:Et(t,n),max:Et(i,s),minDefined:it(t),maxDefined:it(i)}}getMinMax(t){let{min:i,max:n,minDefined:s,maxDefined:r}=this.getUserBounds(),o;if(s&&r)return{min:i,max:n};let a=this.getMatchingVisibleMetas();for(let l=0,c=a.length;l<c;++l)o=a[l].controller.getMinMax(this,t),s||(i=Math.min(i,o.min)),r||(n=Math.max(n,o.max));return i=r&&i>n?n:i,n=s&&i>n?i:n,{min:Et(i,Et(n,i)),max:Et(n,Et(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){let t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){J(this.options.beforeUpdate,[this])}update(t,i,n){let{beginAtZero:s,grace:r,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=i,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=Ya(this,r,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();let l=a<this.ticks.length;this._convertTicksToLabels(l?Sl(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||o.source==="auto")&&(this.ticks=_f(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t=this.options.reverse,i,n;this.isHorizontal()?(i=this.left,n=this.right):(i=this.top,n=this.bottom,t=!t),this._startPixel=i,this._endPixel=n,this._reversePixels=t,this._length=n-i,this._alignToPixels=this.options.alignToPixels}afterUpdate(){J(this.options.afterUpdate,[this])}beforeSetDimensions(){J(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){J(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),J(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){J(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){let i=this.options.ticks,n,s,r;for(n=0,s=t.length;n<s;n++)r=t[n],r.label=J(i.callback,[r.value,n,t],this)}afterTickToLabelConversion(){J(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){J(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){let t=this.options,i=t.ticks,n=wl(this.ticks.length,t.ticks.maxTicksLimit),s=i.minRotation||0,r=i.maxRotation,o=s,a,l,c;if(!this._isVisible()||!i.display||s>=r||n<=1||!this.isHorizontal()){this.labelRotation=s;return}let h=this._getLabelSizes(),d=h.widest.width,u=h.highest.height,f=ut(this.chart.width-d,0,this.maxWidth);a=t.offset?this.maxWidth/n:f/(n-1),d+6>a&&(a=f/(n-(t.offset?.5:1)),l=this.maxHeight-hn(t.grid)-i.padding-kl(t.title,this.chart.options.font),c=Math.sqrt(d*d+u*u),o=ms(Math.min(Math.asin(ut((h.highest.height+6)/a,-1,1)),Math.asin(ut(l/c,-1,1))-Math.asin(ut(u/c,-1,1)))),o=Math.max(s,Math.min(r,o))),this.labelRotation=o}afterCalculateLabelRotation(){J(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){J(this.options.beforeFit,[this])}fit(){let t={width:0,height:0},{chart:i,options:{ticks:n,title:s,grid:r}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){let l=kl(s,i.options.font);if(a?(t.width=this.maxWidth,t.height=hn(r)+l):(t.height=this.maxHeight,t.width=hn(r)+l),n.display&&this.ticks.length){let{first:c,last:h,widest:d,highest:u}=this._getLabelSizes(),f=n.padding*2,g=Bt(this.labelRotation),m=Math.cos(g),b=Math.sin(g);if(a){let v=n.mirror?0:b*d.width+m*u.height;t.height=Math.min(this.maxHeight,t.height+v+f)}else{let v=n.mirror?0:m*d.width+b*u.height;t.width=Math.min(this.maxWidth,t.width+v+f)}this._calculatePadding(c,h,b,m)}}this._handleMargins(),a?(this.width=this._length=i.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=i.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,i,n,s){let{ticks:{align:r,padding:o},position:a}=this.options,l=this.labelRotation!==0,c=a!=="top"&&this.axis==="x";if(this.isHorizontal()){let h=this.getPixelForTick(0)-this.left,d=this.right-this.getPixelForTick(this.ticks.length-1),u=0,f=0;l?c?(u=s*t.width,f=n*i.height):(u=n*t.height,f=s*i.width):r==="start"?f=i.width:r==="end"?u=t.width:r!=="inner"&&(u=t.width/2,f=i.width/2),this.paddingLeft=Math.max((u-h+o)*this.width/(this.width-h),0),this.paddingRight=Math.max((f-d+o)*this.width/(this.width-d),0)}else{let h=i.height/2,d=t.height/2;r==="start"?(h=0,d=t.height):r==="end"&&(h=i.height,d=0),this.paddingTop=h+o,this.paddingBottom=d+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){J(this.options.afterFit,[this])}isHorizontal(){let{axis:t,position:i}=this.options;return i==="top"||i==="bottom"||t==="x"}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){this.beforeTickToLabelConversion(),this.generateTickLabels(t);let i,n;for(i=0,n=t.length;i<n;i++)$(t[i].label)&&(t.splice(i,1),n--,i--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){let i=this.options.ticks.sampleSize,n=this.ticks;i<n.length&&(n=Sl(n,i)),this._labelSizes=t=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,i,n){let{ctx:s,_longestTextCache:r}=this,o=[],a=[],l=Math.floor(i/wl(i,n)),c=0,h=0,d,u,f,g,m,b,v,x,w,p,y;for(d=0;d<i;d+=l){if(g=t[d].label,m=this._resolveTickFontOptions(d),s.font=b=m.string,v=r[b]=r[b]||{data:{},gc:[]},x=m.lineHeight,w=p=0,!$(g)&&!K(g))w=en(s,v.data,v.gc,w,g),p=x;else if(K(g))for(u=0,f=g.length;u<f;++u)y=g[u],!$(y)&&!K(y)&&(w=en(s,v.data,v.gc,w,y),p+=x);o.push(w),a.push(p),c=Math.max(w,c),h=Math.max(p,h)}Tf(r,i);let _=o.indexOf(c),A=a.indexOf(h),C=E=>({width:o[E]||0,height:a[E]||0});return{first:C(0),last:C(i-1),widest:C(_),highest:C(A),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,i){return NaN}getValueForPixel(t){}getPixelForTick(t){let i=this.ticks;return t<0||t>i.length-1?null:this.getPixelForValue(i[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);let i=this._startPixel+t*this._length;return Fa(this._alignToPixels?De(this.chart,i,0):i)}getDecimalForPixel(t){let i=(t-this._startPixel)/this._length;return this._reversePixels?1-i:i}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){let{min:t,max:i}=this;return t<0&&i<0?i:t>0&&i>0?t:0}getContext(t){let i=this.ticks||[];if(t>=0&&t<i.length){let n=i[t];return n.$context||(n.$context=Of(this.getContext(),t,n))}return this.$context||(this.$context=Mf(this.chart.getContext(),this))}_tickSize(){let t=this.options.ticks,i=Bt(this.labelRotation),n=Math.abs(Math.cos(i)),s=Math.abs(Math.sin(i)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,a=r?r.widest.width+o:0,l=r?r.highest.height+o:0;return this.isHorizontal()?l*n>a*s?a/n:l/s:l*s<a*n?l/n:a/s}_isVisible(){let t=this.options.display;return t!=="auto"?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){let i=this.axis,n=this.chart,s=this.options,{grid:r,position:o,border:a}=s,l=r.offset,c=this.isHorizontal(),d=this.ticks.length+(l?1:0),u=hn(r),f=[],g=a.setContext(this.getContext()),m=g.display?g.width:0,b=m/2,v=function(B){return De(n,B,m)},x,w,p,y,_,A,C,E,M,P,L,H;if(o==="top")x=v(this.bottom),A=this.bottom-u,E=x-b,P=v(t.top)+b,H=t.bottom;else if(o==="bottom")x=v(this.top),P=t.top,H=v(t.bottom)-b,A=x+b,E=this.top+u;else if(o==="left")x=v(this.right),_=this.right-u,C=x-b,M=v(t.left)+b,L=t.right;else if(o==="right")x=v(this.left),M=t.left,L=v(t.right)-b,_=x+b,C=this.left+u;else if(i==="x"){if(o==="center")x=v((t.top+t.bottom)/2+.5);else if(z(o)){let B=Object.keys(o)[0],T=o[B];x=v(this.chart.scales[B].getPixelForValue(T))}P=t.top,H=t.bottom,A=x+b,E=A+u}else if(i==="y"){if(o==="center")x=v((t.left+t.right)/2);else if(z(o)){let B=Object.keys(o)[0],T=o[B];x=v(this.chart.scales[B].getPixelForValue(T))}_=x-b,C=_-u,M=t.left,L=t.right}let X=V(s.ticks.maxTicksLimit,d),j=Math.max(1,Math.ceil(d/X));for(w=0;w<d;w+=j){let B=this.getContext(w),T=r.setContext(B),O=a.setContext(B),F=T.lineWidth,I=T.color,W=O.dash||[],Q=O.dashOffset,rt=T.tickWidth,ot=T.tickColor,at=T.tickBorderDash||[],tt=T.tickBorderDashOffset;p=Pf(this,w,l),p!==void 0&&(y=De(n,p,F),c?_=C=M=L=y:A=E=P=H=y,f.push({tx1:_,ty1:A,tx2:C,ty2:E,x1:M,y1:P,x2:L,y2:H,width:F,color:I,borderDash:W,borderDashOffset:Q,tickWidth:rt,tickColor:ot,tickBorderDash:at,tickBorderDashOffset:tt}))}return this._ticksLength=d,this._borderValue=x,f}_computeLabelItems(t){let i=this.axis,n=this.options,{position:s,ticks:r}=n,o=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:h,mirror:d}=r,u=hn(n.grid),f=u+h,g=d?-h:f,m=-Bt(this.labelRotation),b=[],v,x,w,p,y,_,A,C,E,M,P,L,H="middle";if(s==="top")_=this.bottom-g,A=this._getXAxisLabelAlignment();else if(s==="bottom")_=this.top+g,A=this._getXAxisLabelAlignment();else if(s==="left"){let j=this._getYAxisLabelAlignment(u);A=j.textAlign,y=j.x}else if(s==="right"){let j=this._getYAxisLabelAlignment(u);A=j.textAlign,y=j.x}else if(i==="x"){if(s==="center")_=(t.top+t.bottom)/2+f;else if(z(s)){let j=Object.keys(s)[0],B=s[j];_=this.chart.scales[j].getPixelForValue(B)+f}A=this._getXAxisLabelAlignment()}else if(i==="y"){if(s==="center")y=(t.left+t.right)/2-f;else if(z(s)){let j=Object.keys(s)[0],B=s[j];y=this.chart.scales[j].getPixelForValue(B)}A=this._getYAxisLabelAlignment(u).textAlign}i==="y"&&(l==="start"?H="top":l==="end"&&(H="bottom"));let X=this._getLabelSizes();for(v=0,x=a.length;v<x;++v){w=a[v],p=w.label;let j=r.setContext(this.getContext(v));C=this.getPixelForTick(v)+r.labelOffset,E=this._resolveTickFontOptions(v),M=E.lineHeight,P=K(p)?p.length:1;let B=P/2,T=j.color,O=j.textStrokeColor,F=j.textStrokeWidth,I=A;o?(y=C,A==="inner"&&(v===x-1?I=this.options.reverse?"left":"right":v===0?I=this.options.reverse?"right":"left":I="center"),s==="top"?c==="near"||m!==0?L=-P*M+M/2:c==="center"?L=-X.highest.height/2-B*M+M:L=-X.highest.height+M/2:c==="near"||m!==0?L=M/2:c==="center"?L=X.highest.height/2-B*M:L=X.highest.height-P*M,d&&(L*=-1),m!==0&&!j.showLabelBackdrop&&(y+=M/2*Math.sin(m))):(_=C,L=(1-P)*M/2);let W;if(j.showLabelBackdrop){let Q=yt(j.backdropPadding),rt=X.heights[v],ot=X.widths[v],at=L-Q.top,tt=0-Q.left;switch(H){case"middle":at-=rt/2;break;case"bottom":at-=rt;break}switch(A){case"center":tt-=ot/2;break;case"right":tt-=ot;break}W={left:tt,top:at,width:ot+Q.width,height:rt+Q.height,color:j.backdropColor}}b.push({label:p,font:E,textOffset:L,options:{rotation:m,color:T,strokeColor:O,strokeWidth:F,textAlign:I,textBaseline:H,translation:[y,_],backdrop:W}})}return b}_getXAxisLabelAlignment(){let{position:t,ticks:i}=this.options;if(-Bt(this.labelRotation))return t==="top"?"left":"right";let s="center";return i.align==="start"?s="left":i.align==="end"?s="right":i.align==="inner"&&(s="inner"),s}_getYAxisLabelAlignment(t){let{position:i,ticks:{crossAlign:n,mirror:s,padding:r}}=this.options,o=this._getLabelSizes(),a=t+r,l=o.widest.width,c,h;return i==="left"?s?(h=this.right+r,n==="near"?c="left":n==="center"?(c="center",h+=l/2):(c="right",h+=l)):(h=this.right-a,n==="near"?c="right":n==="center"?(c="center",h-=l/2):(c="left",h=this.left)):i==="right"?s?(h=this.left+r,n==="near"?c="right":n==="center"?(c="center",h-=l/2):(c="left",h-=l)):(h=this.left+a,n==="near"?c="left":n==="center"?(c="center",h+=l/2):(c="right",h=this.right)):c="right",{textAlign:c,x:h}}_computeLabelArea(){if(this.options.ticks.mirror)return;let t=this.chart,i=this.options.position;if(i==="left"||i==="right")return{top:0,left:this.left,bottom:t.height,right:this.right};if(i==="top"||i==="bottom")return{top:this.top,left:0,bottom:this.bottom,right:t.width}}drawBackground(){let{ctx:t,options:{backgroundColor:i},left:n,top:s,width:r,height:o}=this;i&&(t.save(),t.fillStyle=i,t.fillRect(n,s,r,o),t.restore())}getLineWidthForValue(t){let i=this.options.grid;if(!this._isVisible()||!i.display)return 0;let s=this.ticks.findIndex(r=>r.value===t);return s>=0?i.setContext(this.getContext(s)).lineWidth:0}drawGrid(t){let i=this.options.grid,n=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t)),r,o,a=(l,c,h)=>{!h.width||!h.color||(n.save(),n.lineWidth=h.width,n.strokeStyle=h.color,n.setLineDash(h.borderDash||[]),n.lineDashOffset=h.borderDashOffset,n.beginPath(),n.moveTo(l.x,l.y),n.lineTo(c.x,c.y),n.stroke(),n.restore())};if(i.display)for(r=0,o=s.length;r<o;++r){let l=s[r];i.drawOnChartArea&&a({x:l.x1,y:l.y1},{x:l.x2,y:l.y2},l),i.drawTicks&&a({x:l.tx1,y:l.ty1},{x:l.tx2,y:l.ty2},{color:l.tickColor,width:l.tickWidth,borderDash:l.tickBorderDash,borderDashOffset:l.tickBorderDashOffset})}}drawBorder(){let{chart:t,ctx:i,options:{border:n,grid:s}}=this,r=n.setContext(this.getContext()),o=n.display?r.width:0;if(!o)return;let a=s.setContext(this.getContext(0)).lineWidth,l=this._borderValue,c,h,d,u;this.isHorizontal()?(c=De(t,this.left,o)-o/2,h=De(t,this.right,a)+a/2,d=u=l):(d=De(t,this.top,o)-o/2,u=De(t,this.bottom,a)+a/2,c=h=l),i.save(),i.lineWidth=r.width,i.strokeStyle=r.color,i.beginPath(),i.moveTo(c,d),i.lineTo(h,u),i.stroke(),i.restore()}drawLabels(t){if(!this.options.ticks.display)return;let n=this.ctx,s=this._computeLabelArea();s&&rn(n,s);let r=this.getLabelItems(t);for(let o of r){let a=o.options,l=o.font,c=o.label,h=o.textOffset;Le(n,c,0,h,l,a)}s&&on(n)}drawTitle(){let{ctx:t,options:{position:i,title:n,reverse:s}}=this;if(!n.display)return;let r=ht(n.font),o=yt(n.padding),a=n.align,l=r.lineHeight/2;i==="bottom"||i==="center"||z(i)?(l+=o.bottom,K(n.text)&&(l+=r.lineHeight*(n.text.length-1))):l+=o.top;let{titleX:c,titleY:h,maxWidth:d,rotation:u}=Lf(this,l,i,a);Le(t,n.text,0,0,r,{color:n.color,maxWidth:d,rotation:u,textAlign:Df(a,i,s),textBaseline:"middle",translation:[c,h]})}draw(t){!this._isVisible()||(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){let t=this.options,i=t.ticks&&t.ticks.z||0,n=V(t.grid&&t.grid.z,-1),s=V(t.border&&t.border.z,0);return!this._isVisible()||this.draw!==_e.prototype.draw?[{z:i,draw:r=>{this.draw(r)}}]:[{z:n,draw:r=>{this.drawBackground(),this.drawGrid(r),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:i,draw:r=>{this.drawLabels(r)}}]}getMatchingVisibleMetas(t){let i=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",s=[],r,o;for(r=0,o=i.length;r<o;++r){let a=i[r];a[n]===this.id&&(!t||a.type===t)&&s.push(a)}return s}_resolveTickFontOptions(t){let i=this.options.ticks.setContext(this.getContext(t));return ht(i.font)}_maxDigits(){let t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}},Ii=class{constructor(t,i,n){this.type=t,this.scope=i,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){let i=Object.getPrototypeOf(t),n;Ff(i)&&(n=this.register(i));let s=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in s||(s[r]=t,Rf(t,o,n),this.override&&nt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){let i=this.items,n=t.id,s=this.scope;n in i&&delete i[n],s&&n in nt[s]&&(delete nt[s][n],this.override&&delete Oe[n])}};function Rf(e,t,i){let n=vi(Object.create(null),[i?nt.get(i):{},nt.get(t),e.defaults]);nt.set(t,n),e.defaultRoutes&&If(t,e.defaultRoutes),e.descriptors&&nt.describe(t,e.descriptors)}function If(e,t){Object.keys(t).forEach(i=>{let n=i.split("."),s=n.pop(),r=[e].concat(n).join("."),o=t[i].split("."),a=o.pop(),l=o.join(".");nt.route(r,s,l,a)})}function Ff(e){return"id"in e&&"defaults"in e}var mo=class{constructor(){this.controllers=new Ii(Ot,"datasets",!0),this.elements=new Ii(Dt,"elements"),this.plugins=new Ii(Object,"plugins"),this.scales=new Ii(_e,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,i,n){[...i].forEach(s=>{let r=n||this._getRegistryForType(s);n||r.isForType(s)||r===this.plugins&&s.id?this._exec(t,r,s):Y(s,o=>{let a=n||this._getRegistryForType(o);this._exec(t,a,o)})})}_exec(t,i,n){let s=gs(t);J(n["before"+s],[],n),i[t](n),J(n["after"+s],[],n)}_getRegistryForType(t){for(let i=0;i<this._typedRegistries.length;i++){let n=this._typedRegistries[i];if(n.isForType(t))return n}return this.plugins}_get(t,i,n){let s=i.get(t);if(s===void 0)throw new Error('"'+t+'" is not a registered '+n+".");return s}},re=new mo,bo=class{constructor(){this._init=[]}notify(t,i,n,s){i==="beforeInit"&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));let r=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(r,t,i,n);return i==="afterDestroy"&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,i,n,s){s=s||{};for(let r of t){let o=r.plugin,a=o[n],l=[i,s,r.options];if(J(a,l,o)===!1&&s.cancelable)return!1}return!0}invalidate(){$(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;let i=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),i}_createDescriptors(t,i){let n=t&&t.config,s=V(n.options&&n.options.plugins,{}),r=Nf(n);return s===!1&&!i?[]:Hf(t,r,s,i)}_notifyStateChanges(t){let i=this._oldCache||[],n=this._cache,s=(r,o)=>r.filter(a=>!o.some(l=>a.plugin.id===l.plugin.id));this._notify(s(i,n),t,"stop"),this._notify(s(n,i),t,"start")}};function Nf(e){let t={},i=[],n=Object.keys(re.plugins.items);for(let r=0;r<n.length;r++)i.push(re.getPlugin(n[r]));let s=e.plugins||[];for(let r=0;r<s.length;r++){let o=s[r];i.indexOf(o)===-1&&(i.push(o),t[o.id]=!0)}return{plugins:i,localIds:t}}function Bf(e,t){return!t&&e===!1?null:e===!0?{}:e}function Hf(e,{plugins:t,localIds:i},n,s){let r=[],o=e.getContext();for(let a of t){let l=a.id,c=Bf(n[l],s);c!==null&&r.push({plugin:a,options:jf(e.config,{plugin:a,local:i[l]},c,o)})}return r}function jf(e,{plugin:t,local:i},n,s){let r=e.pluginScopeKeys(t),o=e.getOptionScopes(n,r);return i&&t.defaults&&o.push(t.defaults),e.createResolver(o,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function vo(e,t){let i=nt.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||i.indexAxis||"x"}function Vf(e,t){let i=e;return e==="_index_"?i=t:e==="_value_"&&(i=t==="x"?"y":"x"),i}function zf(e,t){return e===t?"_index_":"_value_"}function Al(e){if(e==="x"||e==="y"||e==="r")return e}function Wf(e){if(e==="top"||e==="bottom")return"x";if(e==="left"||e==="right")return"y"}function yo(e,...t){if(Al(e))return e;for(let i of t){let n=i.axis||Wf(i.position)||e.length>1&&Al(e[0].toLowerCase());if(n)return n}throw new Error(`Cannot determine type of '${e}' axis. Please provide 'axis' or 'position' option.`)}function Cl(e,t,i){if(i[t+"AxisID"]===e)return{axis:t}}function $f(e,t){if(t.data&&t.data.datasets){let i=t.data.datasets.filter(n=>n.xAxisID===e||n.yAxisID===e);if(i.length)return Cl(e,"x",i[0])||Cl(e,"y",i[0])}return{}}function Uf(e,t){let i=Oe[e.type]||{scales:{}},n=t.scales||{},s=vo(e.type,t),r=Object.create(null);return Object.keys(n).forEach(o=>{let a=n[o];if(!z(a))return console.error(`Invalid scale configuration for scale: ${o}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${o}`);let l=yo(o,a,$f(o,e),nt.scales[a.type]),c=zf(l,s),h=i.scales||{};r[o]=xi(Object.create(null),[{axis:l},a,h[l],h[c]])}),e.data.datasets.forEach(o=>{let a=o.type||e.type,l=o.indexAxis||vo(a,t),h=(Oe[a]||{}).scales||{};Object.keys(h).forEach(d=>{let u=Vf(d,l),f=o[u+"AxisID"]||u;r[f]=r[f]||Object.create(null),xi(r[f],[{axis:u},n[f],h[d]])})}),Object.keys(r).forEach(o=>{let a=r[o];xi(a,[nt.scales[a.type],nt.scale])}),r}function hc(e){let t=e.options||(e.options={});t.plugins=V(t.plugins,{}),t.scales=Uf(e,t)}function dc(e){return e=e||{},e.datasets=e.datasets||[],e.labels=e.labels||[],e}function Xf(e){return e=e||{},e.data=dc(e.data),hc(e),e}var El=new Map,uc=new Set;function Es(e,t){let i=El.get(e);return i||(i=t(),El.set(e,i),uc.add(i)),i}var dn=(e,t,i)=>{let n=me(t,i);n!==void 0&&e.add(n)},xo=class{constructor(t){this._config=Xf(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=dc(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){let t=this._config;this.clearCache(),hc(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Es(t,()=>[[`datasets.${t}`,""]])}datasetAnimationScopeKeys(t,i){return Es(`${t}.transition.${i}`,()=>[[`datasets.${t}.transitions.${i}`,`transitions.${i}`],[`datasets.${t}`,""]])}datasetElementScopeKeys(t,i){return Es(`${t}-${i}`,()=>[[`datasets.${t}.elements.${i}`,`datasets.${t}`,`elements.${i}`,""]])}pluginScopeKeys(t){let i=t.id,n=this.type;return Es(`${n}-plugin-${i}`,()=>[[`plugins.${i}`,...t.additionalOptionScopes||[]]])}_cachedScopes(t,i){let n=this._scopeCache,s=n.get(t);return(!s||i)&&(s=new Map,n.set(t,s)),s}getOptionScopes(t,i,n){let{options:s,type:r}=this,o=this._cachedScopes(t,n),a=o.get(i);if(a)return a;let l=new Set;i.forEach(h=>{t&&(l.add(t),h.forEach(d=>dn(l,t,d))),h.forEach(d=>dn(l,s,d)),h.forEach(d=>dn(l,Oe[r]||{},d)),h.forEach(d=>dn(l,nt,d)),h.forEach(d=>dn(l,ys,d))});let c=Array.from(l);return c.length===0&&c.push(Object.create(null)),uc.has(i)&&o.set(i,c),c}chartOptionScopes(){let{options:t,type:i}=this;return[t,Oe[i]||{},nt.datasets[i]||{},{type:i},nt,ys]}resolveNamedOptions(t,i,n,s=[""]){let r={$shared:!0},{resolver:o,subPrefixes:a}=Pl(this._resolverCache,t,s),l=o;if(qf(o,i)){r.$shared=!1,n=pe(n)?n():n;let c=this.createResolver(t,n,a);l=Ye(o,n,c)}for(let c of i)r[c]=l[c];return r}createResolver(t,i,n=[""],s){let{resolver:r}=Pl(this._resolverCache,t,n);return z(i)?Ye(r,i,void 0,s):r}};function Pl(e,t,i){let n=e.get(t);n||(n=new Map,e.set(t,n));let s=i.join(),r=n.get(s);return r||(r={resolver:ws(t,i),subPrefixes:i.filter(a=>!a.toLowerCase().includes("hover"))},n.set(s,r)),r}var Yf=e=>z(e)&&Object.getOwnPropertyNames(e).reduce((t,i)=>t||pe(e[i]),!1);function qf(e,t){let{isScriptable:i,isIndexable:n}=Ur(e);for(let s of t){let r=i(s),o=n(s),a=(o||r)&&e[s];if(r&&(pe(a)||Yf(a))||o&&K(a))return!0}return!1}var Jf="4.3.0",Kf=["top","bottom","left","right","chartArea"];function Tl(e,t){return e==="top"||e==="bottom"||Kf.indexOf(e)===-1&&t==="x"}function Ml(e,t){return function(i,n){return i[e]===n[e]?i[t]-n[t]:i[e]-n[e]}}function Ol(e){let t=e.chart,i=t.options.animation;t.notifyPlugins("afterRender"),J(i&&i.onComplete,[e],t)}function Gf(e){let t=e.chart,i=t.options.animation;J(i&&i.onProgress,[e],t)}function fc(e){return Jr()&&typeof e=="string"?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}var Ds={},Dl=e=>{let t=fc(e);return Object.values(Ds).filter(i=>i.canvas===t).pop()};function Zf(e,t,i){let n=Object.keys(e);for(let s of n){let r=+s;if(r>=t){let o=e[s];delete e[s],(i>0||r>t)&&(e[r+i]=o)}}}function Qf(e,t,i,n){return!i||e.type==="mouseout"?null:n?t:e}function tp(e){let{xScale:t,yScale:i}=e;if(t&&i)return{left:t.left,right:t.right,top:i.top,bottom:i.bottom}}var Ht=class{static register(...t){re.add(...t),Ll()}static unregister(...t){re.remove(...t),Ll()}constructor(t,i){let n=this.config=new xo(i),s=fc(t),r=Dl(s);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");let o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||xf(s)),this.platform.updateConfig(n);let a=this.platform.acquireContext(s,o.aspectRatio),l=a&&a.canvas,c=l&&l.height,h=l&&l.width;if(this.id=Ma(),this.ctx=a,this.canvas=l,this.width=h,this.height=c,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new bo,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=Va(d=>this.update(d),o.resizeDelay||0),this._dataChanges=[],Ds[this.id]=this,!a||!l){console.error("Failed to create chart: can't acquire context from the given item");return}ve.listen(this,"complete",Ol),ve.listen(this,"progress",Gf),this._initialize(),this.attached&&this.update()}get aspectRatio(){let{options:{aspectRatio:t,maintainAspectRatio:i},width:n,height:s,_aspectRatio:r}=this;return $(t)?i&&r?r:s?n/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return re}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Kr(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return zr(this.canvas,this.ctx),this}stop(){return ve.stop(this),this}resize(t,i){ve.running(this)?this._resizeBeforeDraw={width:t,height:i}:this._resize(t,i)}_resize(t,i){let n=this.options,s=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,i,r),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Kr(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),J(n.onResize,[this,o],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){let i=this.options.scales||{};Y(i,(n,s)=>{n.id=s})}buildOrUpdateScales(){let t=this.options,i=t.scales,n=this.scales,s=Object.keys(n).reduce((o,a)=>(o[a]=!1,o),{}),r=[];i&&(r=r.concat(Object.keys(i).map(o=>{let a=i[o],l=yo(o,a),c=l==="r",h=l==="x";return{options:a,dposition:c?"chartArea":h?"bottom":"left",dtype:c?"radialLinear":h?"category":"linear"}}))),Y(r,o=>{let a=o.options,l=a.id,c=yo(l,a),h=V(a.type,o.dtype);(a.position===void 0||Tl(a.position,c)!==Tl(o.dposition))&&(a.position=o.dposition),s[l]=!0;let d=null;if(l in n&&n[l].type===h)d=n[l];else{let u=re.getScale(h);d=new u({id:l,type:h,ctx:this.ctx,chart:this}),n[d.id]=d}d.init(a,t)}),Y(s,(o,a)=>{o||delete n[a]}),Y(n,o=>{_t.configure(this,o,o.options),_t.addBox(this,o)})}_updateMetasets(){let t=this._metasets,i=this.data.datasets.length,n=t.length;if(t.sort((s,r)=>s.index-r.index),n>i){for(let s=i;s<n;++s)this._destroyDatasetMeta(s);t.splice(i,n-i)}this._sortedMetasets=t.slice(0).sort(Ml("order","index"))}_removeUnreferencedMetasets(){let{_metasets:t,data:{datasets:i}}=this;t.length>i.length&&delete this._stacks,t.forEach((n,s)=>{i.filter(r=>r===n._dataset).length===0&&this._destroyDatasetMeta(s)})}buildOrUpdateControllers(){let t=[],i=this.data.datasets,n,s;for(this._removeUnreferencedMetasets(),n=0,s=i.length;n<s;n++){let r=i[n],o=this.getDatasetMeta(n),a=r.type||this.config.type;if(o.type&&o.type!==a&&(this._destroyDatasetMeta(n),o=this.getDatasetMeta(n)),o.type=a,o.indexAxis=r.indexAxis||vo(a,this.options),o.order=r.order||0,o.index=n,o.label=""+r.label,o.visible=this.isDatasetVisible(n),o.controller)o.controller.updateIndex(n),o.controller.linkScales();else{let l=re.getController(a),{datasetElementType:c,dataElementType:h}=nt.datasets[a];Object.assign(l,{dataElementType:re.getElement(h),datasetElementType:c&&re.getElement(c)}),o.controller=new l(this,n),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){Y(this.data.datasets,(t,i)=>{this.getDatasetMeta(i).controller.reset()},this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){let i=this.config;i.update();let n=this._options=i.createResolver(i.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0})===!1)return;let r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let c=0,h=this.data.datasets.length;c<h;c++){let{controller:d}=this.getDatasetMeta(c),u=!s&&r.indexOf(d)===-1;d.buildOrUpdateElements(u),o=Math.max(+d.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),s||Y(r,c=>{c.reset()}),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Ml("z","_idx"));let{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){Y(this.scales,t=>{_t.removeBox(this,t)}),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){let t=this.options,i=new Set(Object.keys(this._listeners)),n=new Set(t.events);(!Tr(i,n)||!!this._responsiveListeners!==t.responsive)&&(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){let{_hiddenIndices:t}=this,i=this._getUniformDataChanges()||[];for(let{method:n,start:s,count:r}of i){let o=n==="_removeElements"?-r:r;Zf(t,s,o)}}_getUniformDataChanges(){let t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];let i=this.data.datasets.length,n=r=>new Set(t.filter(o=>o[0]===r).map((o,a)=>a+","+o.splice(1).join(","))),s=n(0);for(let r=1;r<i;r++)if(!Tr(s,n(r)))return;return Array.from(s).map(r=>r.split(",")).map(r=>({method:r[1],start:+r[2],count:+r[3]}))}_updateLayout(t){if(this.notifyPlugins("beforeLayout",{cancelable:!0})===!1)return;_t.update(this,this.width,this.height,t);let i=this.chartArea,n=i.width<=0||i.height<=0;this._layers=[],Y(this.boxes,s=>{n&&s.position==="chartArea"||(s.configure&&s.configure(),this._layers.push(...s._layers()))},this),this._layers.forEach((s,r)=>{s._idx=r}),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})!==!1){for(let i=0,n=this.data.datasets.length;i<n;++i)this.getDatasetMeta(i).controller.configure();for(let i=0,n=this.data.datasets.length;i<n;++i)this._updateDataset(i,pe(t)?t({datasetIndex:i}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,i){let n=this.getDatasetMeta(t),s={meta:n,index:t,mode:i,cancelable:!0};this.notifyPlugins("beforeDatasetUpdate",s)!==!1&&(n.controller._update(i),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){this.notifyPlugins("beforeRender",{cancelable:!0})!==!1&&(ve.has(this)?this.attached&&!ve.running(this)&&ve.start(this):(this.draw(),Ol({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){let{width:n,height:s}=this._resizeBeforeDraw;this._resize(n,s),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0||this.notifyPlugins("beforeDraw",{cancelable:!0})===!1)return;let i=this._layers;for(t=0;t<i.length&&i[t].z<=0;++t)i[t].draw(this.chartArea);for(this._drawDatasets();t<i.length;++t)i[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){let i=this._sortedMetasets,n=[],s,r;for(s=0,r=i.length;s<r;++s){let o=i[s];(!t||o.visible)&&n.push(o)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0})===!1)return;let t=this.getSortedVisibleDatasetMetas();for(let i=t.length-1;i>=0;--i)this._drawDataset(t[i]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){let i=this.ctx,n=t._clip,s=!n.disabled,r=tp(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};this.notifyPlugins("beforeDatasetDraw",o)!==!1&&(s&&rn(i,{left:n.left===!1?0:r.left-n.left,right:n.right===!1?this.width:r.right+n.right,top:n.top===!1?0:r.top-n.top,bottom:n.bottom===!1?this.height:r.bottom+n.bottom}),t.controller.draw(),s&&on(i),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return ee(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,i,n,s){let r=tf.modes[i];return typeof r=="function"?r(this,t,n,s):[]}getDatasetMeta(t){let i=this.data.datasets[t],n=this._metasets,s=n.filter(r=>r&&r._dataset===i).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:i&&i.order||0,index:t,_dataset:i,_parsed:[],_sorted:!1},n.push(s)),s}getContext(){return this.$context||(this.$context=be(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){let i=this.data.datasets[t];if(!i)return!1;let n=this.getDatasetMeta(t);return typeof n.hidden=="boolean"?!n.hidden:!i.hidden}setDatasetVisibility(t,i){let n=this.getDatasetMeta(t);n.hidden=!i}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,i,n){let s=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,s);_i(i)?(r.data[i].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update(a=>a.datasetIndex===t?s:void 0))}hide(t,i){this._updateVisibility(t,i,!1)}show(t,i){this._updateVisibility(t,i,!0)}_destroyDatasetMeta(t){let i=this._metasets[t];i&&i.controller&&i.controller._destroy(),delete this._metasets[t]}_stop(){let t,i;for(this.stop(),ve.remove(this),t=0,i=this.data.datasets.length;t<i;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");let{canvas:t,ctx:i}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),zr(t,i),this.platform.releaseContext(i),this.canvas=null,this.ctx=null),delete Ds[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){let t=this._listeners,i=this.platform,n=(r,o)=>{i.addEventListener(this,r,o),t[r]=o},s=(r,o,a)=>{r.offsetX=o,r.offsetY=a,this._eventHandler(r)};Y(this.options.events,r=>n(r,s))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});let t=this._responsiveListeners,i=this.platform,n=(l,c)=>{i.addEventListener(this,l,c),t[l]=c},s=(l,c)=>{t[l]&&(i.removeEventListener(this,l,c),delete t[l])},r=(l,c)=>{this.canvas&&this.resize(l,c)},o,a=()=>{s("attach",a),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,s("resize",r),this._stop(),this._resize(0,0),n("attach",a)},i.isAttached(this.canvas)?a():o()}unbindEvents(){Y(this._listeners,(t,i)=>{this.platform.removeEventListener(this,i,t)}),this._listeners={},Y(this._responsiveListeners,(t,i)=>{this.platform.removeEventListener(this,i,t)}),this._responsiveListeners=void 0}updateHoverStyle(t,i,n){let s=n?"set":"remove",r,o,a,l;for(i==="dataset"&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+s+"DatasetHoverStyle"]()),a=0,l=t.length;a<l;++a){o=t[a];let c=o&&this.getDatasetMeta(o.datasetIndex).controller;c&&c[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){let i=this._active||[],n=t.map(({datasetIndex:r,index:o})=>{let a=this.getDatasetMeta(r);if(!a)throw new Error("No dataset found at index "+r);return{datasetIndex:r,element:a.data[o],index:o}});!nn(n,i)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,i))}notifyPlugins(t,i,n){return this._plugins.notify(this,t,i,n)}isPluginEnabled(t){return this._plugins._cache.filter(i=>i.plugin.id===t).length===1}_updateHoverStyles(t,i,n){let s=this.options.hover,r=(l,c)=>l.filter(h=>!c.some(d=>h.datasetIndex===d.datasetIndex&&h.index===d.index)),o=r(i,t),a=n?t:r(t,i);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,i){let n={event:t,replay:i,cancelable:!0,inChartArea:this.isPointInArea(t)},s=o=>(o.options.events||this.options.events).includes(t.native.type);if(this.notifyPlugins("beforeEvent",n,s)===!1)return;let r=this._handleEvent(t,i,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,s),(r||n.changed)&&this.render(),this}_handleEvent(t,i,n){let{_active:s=[],options:r}=this,o=i,a=this._getActiveElements(t,s,n,o),l=La(t),c=Qf(t,this._lastEvent,n,l);n&&(this._lastEvent=null,J(r.onHover,[t,a,this],this),l&&J(r.onClick,[t,a,this],this));let h=!nn(a,s);return(h||i)&&(this._active=a,this._updateHoverStyles(a,s,i)),this._lastEvent=c,h}_getActiveElements(t,i,n,s){if(t.type==="mouseout")return[];if(!n)return i;let r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,s)}};D(Ht,"defaults",nt),D(Ht,"instances",Ds),D(Ht,"overrides",Oe),D(Ht,"registry",re),D(Ht,"version",Jf),D(Ht,"getChart",Dl);function Ll(){return Y(Ht.instances,e=>e._plugins.invalidate())}function ep(e,t,i){let{startAngle:n,pixelMargin:s,x:r,y:o,outerRadius:a,innerRadius:l}=t,c=s/a;e.beginPath(),e.arc(r,o,a,n-c,i+c),l>s?(c=s/l,e.arc(r,o,l,i+c,n-c,!0)):e.arc(r,o,s,i+et,n-et),e.closePath(),e.clip()}function ip(e){return _s(e,["outerStart","outerEnd","innerStart","innerEnd"])}function np(e,t,i,n){let s=ip(e.options.borderRadius),r=(i-t)/2,o=Math.min(r,n*t/2),a=l=>{let c=(i-Math.min(r,l))*n/2;return ut(l,0,Math.min(r,c))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:ut(s.innerStart,0,o),innerEnd:ut(s.innerEnd,0,o)}}function Ei(e,t,i,n){return{x:i+e*Math.cos(t),y:n+e*Math.sin(t)}}function Fs(e,t,i,n,s,r){let{x:o,y:a,startAngle:l,pixelMargin:c,innerRadius:h}=t,d=Math.max(t.outerRadius+n+i-c,0),u=h>0?h+n+i+c:0,f=0,g=s-l;if(n){let j=h>0?h-n:0,B=d>0?d-n:0,T=(j+B)/2,O=T!==0?g*T/(T+n):g;f=(g-O)/2}let m=Math.max(.001,g*d-i/Z)/d,b=(g-m)/2,v=l+b+f,x=s-b-f,{outerStart:w,outerEnd:p,innerStart:y,innerEnd:_}=np(t,u,d,x-v),A=d-w,C=d-p,E=v+w/A,M=x-p/C,P=u+y,L=u+_,H=v+y/P,X=x-_/L;if(e.beginPath(),r){let j=(E+M)/2;if(e.arc(o,a,d,E,j),e.arc(o,a,d,j,M),p>0){let F=Ei(C,M,o,a);e.arc(F.x,F.y,p,M,x+et)}let B=Ei(L,x,o,a);if(e.lineTo(B.x,B.y),_>0){let F=Ei(L,X,o,a);e.arc(F.x,F.y,_,x+et,X+Math.PI)}let T=(x-_/u+(v+y/u))/2;if(e.arc(o,a,u,x-_/u,T,!0),e.arc(o,a,u,T,v+y/u,!0),y>0){let F=Ei(P,H,o,a);e.arc(F.x,F.y,y,H+Math.PI,v-et)}let O=Ei(A,v,o,a);if(e.lineTo(O.x,O.y),w>0){let F=Ei(A,E,o,a);e.arc(F.x,F.y,w,v-et,E)}}else{e.moveTo(o,a);let j=Math.cos(E)*d+o,B=Math.sin(E)*d+a;e.lineTo(j,B);let T=Math.cos(M)*d+o,O=Math.sin(M)*d+a;e.lineTo(T,O)}e.closePath()}function sp(e,t,i,n,s){let{fullCircles:r,startAngle:o,circumference:a}=t,l=t.endAngle;if(r){Fs(e,t,i,n,l,s);for(let c=0;c<r;++c)e.fill();isNaN(a)||(l=o+(a%G||G))}return Fs(e,t,i,n,l,s),e.fill(),l}function rp(e,t,i,n,s){let{fullCircles:r,startAngle:o,circumference:a,options:l}=t,{borderWidth:c,borderJoinStyle:h,borderDash:d,borderDashOffset:u}=l,f=l.borderAlign==="inner";if(!c)return;e.setLineDash(d||[]),e.lineDashOffset=u,f?(e.lineWidth=c*2,e.lineJoin=h||"round"):(e.lineWidth=c,e.lineJoin=h||"bevel");let g=t.endAngle;if(r){Fs(e,t,i,n,g,s);for(let m=0;m<r;++m)e.stroke();isNaN(a)||(g=o+(a%G||G))}f&&ep(e,t,g),r||(Fs(e,t,i,n,g,s),e.stroke())}var Ze=class extends Dt{circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,i,n){let s=this.getProps(["x","y"],n),{angle:r,distance:o}=Lr(s,{x:t,y:i}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:h,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),u=(this.options.spacing+this.options.borderWidth)/2,g=V(d,l-a)>=G||Si(r,a,l),m=ne(o,c+u,h+u);return g&&m}getCenterPoint(t){let{x:i,y:n,startAngle:s,endAngle:r,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:l,spacing:c}=this.options,h=(s+r)/2,d=(o+a+c+l)/2;return{x:i+Math.cos(h)*d,y:n+Math.sin(h)*d}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){let{options:i,circumference:n}=this,s=(i.offset||0)/4,r=(i.spacing||0)/2,o=i.circular;if(this.pixelMargin=i.borderAlign==="inner"?.33:0,this.fullCircles=n>G?Math.floor(n/G):0,n===0||this.innerRadius<0||this.outerRadius<0)return;t.save();let a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);let l=1-Math.sin(Math.min(Z,n||0)),c=s*l;t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,sp(t,this,c,r,o),rp(t,this,c,r,o),t.restore()}};D(Ze,"id","arc"),D(Ze,"defaults",{borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0}),D(Ze,"defaultRoutes",{backgroundColor:"backgroundColor"}),D(Ze,"descriptors",{_scriptable:!0,_indexable:t=>t!=="borderDash"});function pc(e,t,i=t){e.lineCap=V(i.borderCapStyle,t.borderCapStyle),e.setLineDash(V(i.borderDash,t.borderDash)),e.lineDashOffset=V(i.borderDashOffset,t.borderDashOffset),e.lineJoin=V(i.borderJoinStyle,t.borderJoinStyle),e.lineWidth=V(i.borderWidth,t.borderWidth),e.strokeStyle=V(i.borderColor,t.borderColor)}function op(e,t,i){e.lineTo(i.x,i.y)}function ap(e){return e.stepped?Ua:e.tension||e.cubicInterpolationMode==="monotone"?Xa:op}function gc(e,t,i={}){let n=e.length,{start:s=0,end:r=n-1}=i,{start:o,end:a}=t,l=Math.max(s,o),c=Math.min(r,a),h=s<o&&r<o||s>a&&r>a;return{count:n,start:l,loop:t.loop,ilen:c<l&&!h?n+c-l:c-l}}function lp(e,t,i,n){let{points:s,options:r}=t,{count:o,start:a,loop:l,ilen:c}=gc(s,i,n),h=ap(r),{move:d=!0,reverse:u}=n||{},f,g,m;for(f=0;f<=c;++f)g=s[(a+(u?c-f:f))%o],!g.skip&&(d?(e.moveTo(g.x,g.y),d=!1):h(e,m,g,u,r.stepped),m=g);return l&&(g=s[(a+(u?c:0))%o],h(e,m,g,u,r.stepped)),!!l}function cp(e,t,i,n){let s=t.points,{count:r,start:o,ilen:a}=gc(s,i,n),{move:l=!0,reverse:c}=n||{},h=0,d=0,u,f,g,m,b,v,x=p=>(o+(c?a-p:p))%r,w=()=>{m!==b&&(e.lineTo(h,b),e.lineTo(h,m),e.lineTo(h,v))};for(l&&(f=s[x(0)],e.moveTo(f.x,f.y)),u=0;u<=a;++u){if(f=s[x(u)],f.skip)continue;let p=f.x,y=f.y,_=p|0;_===g?(y<m?m=y:y>b&&(b=y),h=(d*h+p)/++d):(w(),e.lineTo(p,y),g=_,d=0,m=b=y),v=y}w()}function _o(e){let t=e.options,i=t.borderDash&&t.borderDash.length;return!e._decimated&&!e._loop&&!t.tension&&t.cubicInterpolationMode!=="monotone"&&!t.stepped&&!i?cp:lp}function hp(e){return e.stepped?el:e.tension||e.cubicInterpolationMode==="monotone"?il:Me}function dp(e,t,i,n){let s=t._path;s||(s=t._path=new Path2D,t.path(s,i,n)&&s.closePath()),pc(e,t.options),e.stroke(s)}function up(e,t,i,n){let{segments:s,options:r}=t,o=_o(t);for(let a of s)pc(e,r,a.style),e.beginPath(),o(e,t,a,{start:i,end:i+n-1})&&e.closePath(),e.stroke()}var fp=typeof Path2D=="function";function pp(e,t,i,n){fp&&!t.options.segment?dp(e,t,i,n):up(e,t,i,n)}var oe=class extends Dt{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,i){let n=this.options;if((n.tension||n.cubicInterpolationMode==="monotone")&&!n.stepped&&!this._pointsUpdated){let s=n.spanGaps?this._loop:this._fullLoop;Za(this._points,n,t,s,i),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=sl(this,this.options.segment))}first(){let t=this.segments,i=this.points;return t.length&&i[t[0].start]}last(){let t=this.segments,i=this.points,n=t.length;return n&&i[t[n-1].end]}interpolate(t,i){let n=this.options,s=t[i],r=this.points,o=eo(this,{property:i,start:s,end:s});if(!o.length)return;let a=[],l=hp(n),c,h;for(c=0,h=o.length;c<h;++c){let{start:d,end:u}=o[c],f=r[d],g=r[u];if(f===g){a.push(f);continue}let m=Math.abs((s-f[i])/(g[i]-f[i])),b=l(f,g,m,n.stepped);b[i]=t[i],a.push(b)}return a.length===1?a[0]:a}pathSegment(t,i,n){return _o(this)(t,this,i,n)}path(t,i,n){let s=this.segments,r=_o(this),o=this._loop;i=i||0,n=n||this.points.length-i;for(let a of s)o&=r(t,this,a,{start:i,end:i+n-1});return!!o}draw(t,i,n,s){let r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),pp(t,this,n,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}};D(oe,"id","line"),D(oe,"defaults",{borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0}),D(oe,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"}),D(oe,"descriptors",{_scriptable:!0,_indexable:t=>t!=="borderDash"&&t!=="fill"});function Rl(e,t,i,n){let s=e.options,{[i]:r}=e.getProps([i],n);return Math.abs(t-r)<s.radius+s.hitRadius}var Li=class extends Dt{parsed;skip;stop;constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,i,n){let s=this.options,{x:r,y:o}=this.getProps(["x","y"],n);return Math.pow(t-r,2)+Math.pow(i-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,i){return Rl(this,t,"x",i)}inYRange(t,i){return Rl(this,t,"y",i)}getCenterPoint(t){let{x:i,y:n}=this.getProps(["x","y"],t);return{x:i,y:n}}size(t){t=t||this.options||{};let i=t.radius||0;i=Math.max(i,i&&t.hoverRadius||0);let n=i&&t.borderWidth||0;return(i+n)*2}draw(t,i){let n=this.options;this.skip||n.radius<.1||!ee(this,i,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,xs(t,n,this.x,this.y))}getRange(){let t=this.options||{};return t.radius+t.hitRadius}};D(Li,"id","point"),D(Li,"defaults",{borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0}),D(Li,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"});function mc(e,t){let{x:i,y:n,base:s,width:r,height:o}=e.getProps(["x","y","base","width","height"],t),a,l,c,h,d;return e.horizontal?(d=o/2,a=Math.min(i,s),l=Math.max(i,s),c=n-d,h=n+d):(d=r/2,a=i-d,l=i+d,c=Math.min(n,s),h=Math.max(n,s)),{left:a,top:c,right:l,bottom:h}}function Fe(e,t,i,n){return e?0:ut(t,i,n)}function gp(e,t,i){let n=e.options.borderWidth,s=e.borderSkipped,r=$r(n);return{t:Fe(s.top,r.top,0,i),r:Fe(s.right,r.right,0,t),b:Fe(s.bottom,r.bottom,0,i),l:Fe(s.left,r.left,0,t)}}function mp(e,t,i){let{enableBorderRadius:n}=e.getProps(["enableBorderRadius"]),s=e.options.borderRadius,r=Re(s),o=Math.min(t,i),a=e.borderSkipped,l=n||z(s);return{topLeft:Fe(!l||a.top||a.left,r.topLeft,0,o),topRight:Fe(!l||a.top||a.right,r.topRight,0,o),bottomLeft:Fe(!l||a.bottom||a.left,r.bottomLeft,0,o),bottomRight:Fe(!l||a.bottom||a.right,r.bottomRight,0,o)}}function bp(e){let t=mc(e),i=t.right-t.left,n=t.bottom-t.top,s=gp(e,i/2,n/2),r=mp(e,i/2,n/2);return{outer:{x:t.left,y:t.top,w:i,h:n,radius:r},inner:{x:t.left+s.l,y:t.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,r.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(s.b,s.r))}}}}function lo(e,t,i,n){let s=t===null,r=i===null,a=e&&!(s&&r)&&mc(e,n);return a&&(s||ne(t,a.left,a.right))&&(r||ne(i,a.top,a.bottom))}function vp(e){return e.topLeft||e.topRight||e.bottomLeft||e.bottomRight}function yp(e,t){e.rect(t.x,t.y,t.w,t.h)}function co(e,t,i={}){let n=e.x!==i.x?-t:0,s=e.y!==i.y?-t:0,r=(e.x+e.w!==i.x+i.w?t:0)-n,o=(e.y+e.h!==i.y+i.h?t:0)-s;return{x:e.x+n,y:e.y+s,w:e.w+r,h:e.h+o,radius:e.radius}}var Ri=class extends Dt{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){let{inflateAmount:i,options:{borderColor:n,backgroundColor:s}}=this,{inner:r,outer:o}=bp(this),a=vp(o.radius)?Ai:yp;t.save(),(o.w!==r.w||o.h!==r.h)&&(t.beginPath(),a(t,co(o,i,r)),t.clip(),a(t,co(r,-i,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),a(t,co(r,i)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,i,n){return lo(this,t,i,n)}inXRange(t,i){return lo(this,t,null,i)}inYRange(t,i){return lo(this,null,t,i)}getCenterPoint(t){let{x:i,y:n,base:s,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(i+s)/2:i,y:r?n:(n+s)/2}}getRange(t){return t==="x"?this.width/2:this.height/2}};D(Ri,"id","bar"),D(Ri,"defaults",{borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0}),D(Ri,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"});var xp=Object.freeze({__proto__:null,ArcElement:Ze,BarElement:Ri,LineElement:oe,PointElement:Li}),wo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Il=wo.map(e=>e.replace("rgb(","rgba(").replace(")",", 0.5)"));function bc(e){return wo[e%wo.length]}function vc(e){return Il[e%Il.length]}function _p(e,t){return e.borderColor=bc(t),e.backgroundColor=vc(t),++t}function wp(e,t){return e.backgroundColor=e.data.map(()=>bc(t++)),t}function Sp(e,t){return e.backgroundColor=e.data.map(()=>vc(t++)),t}function kp(e){let t=0;return(i,n)=>{let s=e.getDatasetMeta(n).controller;s instanceof xe?t=wp(i,t):s instanceof ti?t=Sp(i,t):s&&(t=_p(i,t))}}function Fl(e){let t;for(t in e)if(e[t].borderColor||e[t].backgroundColor)return!0;return!1}function Ap(e){return e&&(e.borderColor||e.backgroundColor)}var Cp={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(e,t,i){if(!i.enabled)return;let{data:{datasets:n},options:s}=e.config,{elements:r}=s;if(!i.forceOverride&&(Fl(n)||Ap(s)||r&&Fl(r)))return;let o=kp(e);n.forEach(o)}};function Ep(e,t,i,n,s){let r=s.samples||n;if(r>=i)return e.slice(t,t+i);let o=[],a=(i-2)/(r-2),l=0,c=t+i-1,h=t,d,u,f,g,m;for(o[l++]=e[h],d=0;d<r-2;d++){let b=0,v=0,x,w=Math.floor((d+1)*a)+1+t,p=Math.min(Math.floor((d+2)*a)+1,i)+t,y=p-w;for(x=w;x<p;x++)b+=e[x].x,v+=e[x].y;b/=y,v/=y;let _=Math.floor(d*a)+1+t,A=Math.min(Math.floor((d+1)*a)+1,i)+t,{x:C,y:E}=e[h];for(f=g=-1,x=_;x<A;x++)g=.5*Math.abs((C-b)*(e[x].y-E)-(C-e[x].x)*(v-E)),g>f&&(f=g,u=e[x],m=x);o[l++]=u,h=m}return o[l++]=e[c],o}function Pp(e,t,i,n){let s=0,r=0,o,a,l,c,h,d,u,f,g,m,b=[],v=t+i-1,x=e[t].x,p=e[v].x-x;for(o=t;o<t+i;++o){a=e[o],l=(a.x-x)/p*n,c=a.y;let y=l|0;if(y===h)c<g?(g=c,d=o):c>m&&(m=c,u=o),s=(r*s+a.x)/++r;else{let _=o-1;if(!$(d)&&!$(u)){let A=Math.min(d,u),C=Math.max(d,u);A!==f&&A!==_&&b.push({...e[A],x:s}),C!==f&&C!==_&&b.push({...e[C],x:s})}o>0&&_!==f&&b.push(e[_]),b.push(a),h=y,r=0,g=m=c,d=u=f=o}}return b}function yc(e){if(e._decimated){let t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,writable:!0,value:t})}}function Nl(e){e.data.datasets.forEach(t=>{yc(t)})}function Tp(e,t){let i=t.length,n=0,s,{iScale:r}=e,{min:o,max:a,minDefined:l,maxDefined:c}=r.getUserBounds();return l&&(n=ut(te(t,r.axis,o).lo,0,i-1)),c?s=ut(te(t,r.axis,a).hi+1,n,i)-n:s=i-n,{start:n,count:s}}var Mp={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,i)=>{if(!i.enabled){Nl(e);return}let n=e.width;e.data.datasets.forEach((s,r)=>{let{_data:o,indexAxis:a}=s,l=e.getDatasetMeta(r),c=o||s.data;if(Ci([a,e.options.indexAxis])==="y"||!l.controller.supportsDecimation)return;let h=e.scales[l.xAxisID];if(h.type!=="linear"&&h.type!=="time"||e.options.parsing)return;let{start:d,count:u}=Tp(l,c),f=i.threshold||4*n;if(u<=f){yc(s);return}$(o)&&(s._data=c,delete s.data,Object.defineProperty(s,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(m){this._data=m}}));let g;switch(i.algorithm){case"lttb":g=Ep(c,d,u,n,i);break;case"min-max":g=Pp(c,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}s._decimated=g})},destroy(e){Nl(e)}};function Op(e,t,i){let n=e.segments,s=e.points,r=t.points,o=[];for(let a of n){let{start:l,end:c}=a;c=Ao(l,c,s);let h=So(i,s[l],s[c],a.loop);if(!t.segments){o.push({source:a,target:h,start:s[l],end:s[c]});continue}let d=eo(t,h);for(let u of d){let f=So(i,r[u.start],r[u.end],u.loop),g=to(a,s,f);for(let m of g)o.push({source:m,target:u,start:{[i]:Bl(h,f,"start",Math.max)},end:{[i]:Bl(h,f,"end",Math.min)}})}}return o}function So(e,t,i,n){if(n)return;let s=t[e],r=i[e];return e==="angle"&&(s=Ct(s),r=Ct(r)),{property:e,start:s,end:r}}function Dp(e,t){let{x:i=null,y:n=null}=e||{},s=t.points,r=[];return t.segments.forEach(({start:o,end:a})=>{a=Ao(o,a,s);let l=s[o],c=s[a];n!==null?(r.push({x:l.x,y:n}),r.push({x:c.x,y:n})):i!==null&&(r.push({x:i,y:l.y}),r.push({x:i,y:c.y}))}),r}function Ao(e,t,i){for(;t>e;t--){let n=i[t];if(!isNaN(n.x)&&!isNaN(n.y))break}return t}function Bl(e,t,i,n){return e&&t?n(e[i],t[i]):e?e[i]:t?t[i]:0}function xc(e,t){let i=[],n=!1;return K(e)?(n=!0,i=e):i=Dp(e,t),i.length?new oe({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function Hl(e){return e&&e.fill!==!1}function Lp(e,t,i){let s=e[t].fill,r=[t],o;if(!i)return s;for(;s!==!1&&r.indexOf(s)===-1;){if(!it(s))return s;if(o=e[s],!o)return!1;if(o.visible)return s;r.push(s),s=o.fill}return!1}function Rp(e,t,i){let n=Bp(e);if(z(n))return isNaN(n.value)?!1:n;let s=parseFloat(n);return it(s)&&Math.floor(s)===s?Ip(n[0],t,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Ip(e,t,i,n){return(e==="-"||e==="+")&&(i=t+i),i===t||i<0||i>=n?!1:i}function Fp(e,t){let i=null;return e==="start"?i=t.bottom:e==="end"?i=t.top:z(e)?i=t.getPixelForValue(e.value):t.getBasePixel&&(i=t.getBasePixel()),i}function Np(e,t,i){let n;return e==="start"?n=i:e==="end"?n=t.options.reverse?t.min:t.max:z(e)?n=e.value:n=t.getBaseValue(),n}function Bp(e){let t=e.options,i=t.fill,n=V(i&&i.target,i);return n===void 0&&(n=!!t.backgroundColor),n===!1||n===null?!1:n===!0?"origin":n}function Hp(e){let{scale:t,index:i,line:n}=e,s=[],r=n.segments,o=n.points,a=jp(t,i);a.push(xc({x:null,y:t.bottom},n));for(let l=0;l<r.length;l++){let c=r[l];for(let h=c.start;h<=c.end;h++)Vp(s,o[h],a)}return new oe({points:s,options:{}})}function jp(e,t){let i=[],n=e.getMatchingVisibleMetas("line");for(let s=0;s<n.length;s++){let r=n[s];if(r.index===t)break;r.hidden||i.unshift(r.dataset)}return i}function Vp(e,t,i){let n=[];for(let s=0;s<i.length;s++){let r=i[s],{first:o,last:a,point:l}=zp(r,t,"x");if(!(!l||o&&a)){if(o)n.unshift(l);else if(e.push(l),!a)break}}e.push(...n)}function zp(e,t,i){let n=e.interpolate(t,i);if(!n)return{};let s=n[i],r=e.segments,o=e.points,a=!1,l=!1;for(let c=0;c<r.length;c++){let h=r[c],d=o[h.start][i],u=o[h.end][i];if(ne(s,d,u)){a=s===d,l=s===u;break}}return{first:a,last:l,point:n}}var Ns=class{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,i,n){let{x:s,y:r,radius:o}=this;return i=i||{start:0,end:G},t.arc(s,r,o,i.end,i.start,!0),!n.bounds}interpolate(t){let{x:i,y:n,radius:s}=this,r=t.angle;return{x:i+Math.cos(r)*s,y:n+Math.sin(r)*s,angle:r}}};function Wp(e){let{chart:t,fill:i,line:n}=e;if(it(i))return $p(t,i);if(i==="stack")return Hp(e);if(i==="shape")return!0;let s=Up(e);return s instanceof Ns?s:xc(s,n)}function $p(e,t){let i=e.getDatasetMeta(t);return i&&e.isDatasetVisible(t)?i.dataset:null}function Up(e){return(e.scale||{}).getPointPositionForValue?Yp(e):Xp(e)}function Xp(e){let{scale:t={},fill:i}=e,n=Fp(i,t);if(it(n)){let s=t.isHorizontal();return{x:s?n:null,y:s?null:n}}return null}function Yp(e){let{scale:t,fill:i}=e,n=t.options,s=t.getLabels().length,r=n.reverse?t.max:t.min,o=Np(i,t,r),a=[];if(n.grid.circular){let l=t.getPointPositionForValue(0,r);return new Ns({x:l.x,y:l.y,radius:t.getDistanceFromCenterForValue(o)})}for(let l=0;l<s;++l)a.push(t.getPointPositionForValue(l,o));return a}function ho(e,t,i){let n=Wp(t),{line:s,scale:r,axis:o}=t,a=s.options,l=a.fill,c=a.backgroundColor,{above:h=c,below:d=c}=l||{};n&&s.points.length&&(rn(e,i),qp(e,{line:s,target:n,above:h,below:d,area:i,scale:r,axis:o}),on(e))}function qp(e,t){let{line:i,target:n,above:s,below:r,area:o,scale:a}=t,l=i._loop?"angle":t.axis;e.save(),l==="x"&&r!==s&&(jl(e,n,o.top),Vl(e,{line:i,target:n,color:s,scale:a,property:l}),e.restore(),e.save(),jl(e,n,o.bottom)),Vl(e,{line:i,target:n,color:r,scale:a,property:l}),e.restore()}function jl(e,t,i){let{segments:n,points:s}=t,r=!0,o=!1;e.beginPath();for(let a of n){let{start:l,end:c}=a,h=s[l],d=s[Ao(l,c,s)];r?(e.moveTo(h.x,h.y),r=!1):(e.lineTo(h.x,i),e.lineTo(h.x,h.y)),o=!!t.pathSegment(e,a,{move:o}),o?e.closePath():e.lineTo(d.x,i)}e.lineTo(t.first().x,i),e.closePath(),e.clip()}function Vl(e,t){let{line:i,target:n,property:s,color:r,scale:o}=t,a=Op(i,n,s);for(let{source:l,target:c,start:h,end:d}of a){let{style:{backgroundColor:u=r}={}}=l,f=n!==!0;e.save(),e.fillStyle=u,Jp(e,o,f&&So(s,h,d)),e.beginPath();let g=!!i.pathSegment(e,l),m;if(f){g?e.closePath():zl(e,n,d,s);let b=!!n.pathSegment(e,c,{move:g,reverse:!0});m=g&&b,m||zl(e,n,h,s)}e.closePath(),e.fill(m?"evenodd":"nonzero"),e.restore()}}function Jp(e,t,i){let{top:n,bottom:s}=t.chart.chartArea,{property:r,start:o,end:a}=i||{};r==="x"&&(e.beginPath(),e.rect(o,n,a-o,s-n),e.clip())}function zl(e,t,i,n){let s=t.interpolate(i,n);s&&e.lineTo(s.x,s.y)}var Kp={id:"filler",afterDatasetsUpdate(e,t,i){let n=(e.data.datasets||[]).length,s=[],r,o,a,l;for(o=0;o<n;++o)r=e.getDatasetMeta(o),a=r.dataset,l=null,a&&a.options&&a instanceof oe&&(l={visible:e.isDatasetVisible(o),index:o,fill:Rp(a,o,n),chart:e,axis:r.controller.options.indexAxis,scale:r.vScale,line:a}),r.$filler=l,s.push(l);for(o=0;o<n;++o)l=s[o],!(!l||l.fill===!1)&&(l.fill=Lp(s,o,i.propagate))},beforeDraw(e,t,i){let n=i.drawTime==="beforeDraw",s=e.getSortedVisibleDatasetMetas(),r=e.chartArea;for(let o=s.length-1;o>=0;--o){let a=s[o].$filler;!a||(a.line.updateControlPoints(r,a.axis),n&&a.fill&&ho(e.ctx,a,r))}},beforeDatasetsDraw(e,t,i){if(i.drawTime!=="beforeDatasetsDraw")return;let n=e.getSortedVisibleDatasetMetas();for(let s=n.length-1;s>=0;--s){let r=n[s].$filler;Hl(r)&&ho(e.ctx,r,e.chartArea)}},beforeDatasetDraw(e,t,i){let n=t.meta.$filler;!Hl(n)||i.drawTime!=="beforeDatasetDraw"||ho(e.ctx,n,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}},Wl=(e,t)=>{let{boxHeight:i=t,boxWidth:n=t}=e;return e.usePointStyle&&(i=Math.min(i,t),n=e.pointStyleWidth||Math.min(n,t)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(t,i)}},Gp=(e,t)=>e!==null&&t!==null&&e.datasetIndex===t.datasetIndex&&e.index===t.index,Bs=class extends Dt{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,i,n){this.maxWidth=t,this.maxHeight=i,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){let t=this.options.labels||{},i=J(t.generateLabels,[this.chart],this)||[];t.filter&&(i=i.filter(n=>t.filter(n,this.chart.data))),t.sort&&(i=i.sort((n,s)=>t.sort(n,s,this.chart.data))),this.options.reverse&&i.reverse(),this.legendItems=i}fit(){let{options:t,ctx:i}=this;if(!t.display){this.width=this.height=0;return}let n=t.labels,s=ht(n.font),r=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=Wl(n,r),c,h;i.font=s.string,this.isHorizontal()?(c=this.maxWidth,h=this._fitRows(o,r,a,l)+10):(h=this.maxHeight,c=this._fitCols(o,s,a,l)+10),this.width=Math.min(c,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,i,n,s){let{ctx:r,maxWidth:o,options:{labels:{padding:a}}}=this,l=this.legendHitBoxes=[],c=this.lineWidths=[0],h=s+a,d=t;r.textAlign="left",r.textBaseline="middle";let u=-1,f=-h;return this.legendItems.forEach((g,m)=>{let b=n+i/2+r.measureText(g.text).width;(m===0||c[c.length-1]+b+2*a>o)&&(d+=h,c[c.length-(m>0?0:1)]=0,f+=h,u++),l[m]={left:0,top:f,row:u,width:b,height:s},c[c.length-1]+=b+a}),d}_fitCols(t,i,n,s){let{ctx:r,maxHeight:o,options:{labels:{padding:a}}}=this,l=this.legendHitBoxes=[],c=this.columnSizes=[],h=o-t,d=a,u=0,f=0,g=0,m=0;return this.legendItems.forEach((b,v)=>{let{itemWidth:x,itemHeight:w}=Zp(n,i,r,b,s);v>0&&f+w+2*a>h&&(d+=u+a,c.push({width:u,height:f}),g+=u+a,m++,u=f=0),l[v]={left:g,top:f,col:m,width:x,height:w},u=Math.max(u,x),f+=w+a}),d+=u,c.push({width:u,height:f}),d}adjustHitBoxes(){if(!this.options.display)return;let t=this._computeTitleHeight(),{legendHitBoxes:i,options:{align:n,labels:{padding:s},rtl:r}}=this,o=Je(r,this.left,this.width);if(this.isHorizontal()){let a=0,l=vt(n,this.left+s,this.right-this.lineWidths[a]);for(let c of i)a!==c.row&&(a=c.row,l=vt(n,this.left+s,this.right-this.lineWidths[a])),c.top+=this.top+t+s,c.left=o.leftForLtr(o.x(l),c.width),l+=c.width+s}else{let a=0,l=vt(n,this.top+t+s,this.bottom-this.columnSizes[a].height);for(let c of i)c.col!==a&&(a=c.col,l=vt(n,this.top+t+s,this.bottom-this.columnSizes[a].height)),c.top=l,c.left+=this.left+s,c.left=o.leftForLtr(o.x(c.left),c.width),l+=c.height+s}}isHorizontal(){return this.options.position==="top"||this.options.position==="bottom"}draw(){if(this.options.display){let t=this.ctx;rn(t,this),this._draw(),on(t)}}_draw(){let{options:t,columnSizes:i,lineWidths:n,ctx:s}=this,{align:r,labels:o}=t,a=nt.color,l=Je(t.rtl,this.left,this.width),c=ht(o.font),{padding:h}=o,d=c.size,u=d/2,f;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=c.string;let{boxWidth:g,boxHeight:m,itemHeight:b}=Wl(o,d),v=function(_,A,C){if(isNaN(g)||g<=0||isNaN(m)||m<0)return;s.save();let E=V(C.lineWidth,1);if(s.fillStyle=V(C.fillStyle,a),s.lineCap=V(C.lineCap,"butt"),s.lineDashOffset=V(C.lineDashOffset,0),s.lineJoin=V(C.lineJoin,"miter"),s.lineWidth=E,s.strokeStyle=V(C.strokeStyle,a),s.setLineDash(V(C.lineDash,[])),o.usePointStyle){let M={radius:m*Math.SQRT2/2,pointStyle:C.pointStyle,rotation:C.rotation,borderWidth:E},P=l.xPlus(_,g/2),L=A+u;Wr(s,M,P,L,o.pointStyleWidth&&g)}else{let M=A+Math.max((d-m)/2,0),P=l.leftForLtr(_,g),L=Re(C.borderRadius);s.beginPath(),Object.values(L).some(H=>H!==0)?Ai(s,{x:P,y:M,w:g,h:m,radius:L}):s.rect(P,M,g,m),s.fill(),E!==0&&s.stroke()}s.restore()},x=function(_,A,C){Le(s,C.text,_,A+b/2,c,{strikethrough:C.hidden,textAlign:l.textAlign(C.textAlign)})},w=this.isHorizontal(),p=this._computeTitleHeight();w?f={x:vt(r,this.left+h,this.right-n[0]),y:this.top+h+p,line:0}:f={x:this.left+h,y:vt(r,this.top+p+h,this.bottom-i[0].height),line:0},Zr(this.ctx,t.textDirection);let y=b+h;this.legendItems.forEach((_,A)=>{s.strokeStyle=_.fontColor,s.fillStyle=_.fontColor;let C=s.measureText(_.text).width,E=l.textAlign(_.textAlign||(_.textAlign=o.textAlign)),M=g+u+C,P=f.x,L=f.y;l.setWidth(this.width),w?A>0&&P+M+h>this.right&&(L=f.y+=y,f.line++,P=f.x=vt(r,this.left+h,this.right-n[f.line])):A>0&&L+y>this.bottom&&(P=f.x=P+i[f.line].width+h,f.line++,L=f.y=vt(r,this.top+p+h,this.bottom-i[f.line].height));let H=l.x(P);if(v(H,L,_),P=za(E,P+g+u,w?P+M:this.right,t.rtl),x(l.x(P),L,_),w)f.x+=M+h;else if(typeof _.text!="string"){let X=c.lineHeight;f.y+=_c(_,X)}else f.y+=y}),Qr(this.ctx,t.textDirection)}drawTitle(){let t=this.options,i=t.title,n=ht(i.font),s=yt(i.padding);if(!i.display)return;let r=Je(t.rtl,this.left,this.width),o=this.ctx,a=i.position,l=n.size/2,c=s.top+l,h,d=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),h=this.top+c,d=vt(t.align,d,this.right-u);else{let g=this.columnSizes.reduce((m,b)=>Math.max(m,b.height),0);h=c+vt(t.align,this.top,this.bottom-g-t.labels.padding-this._computeTitleHeight())}let f=vt(a,d,d+u);o.textAlign=r.textAlign(vs(a)),o.textBaseline="middle",o.strokeStyle=i.color,o.fillStyle=i.color,o.font=n.string,Le(o,i.text,f,h,n)}_computeTitleHeight(){let t=this.options.title,i=ht(t.font),n=yt(t.padding);return t.display?i.lineHeight+n.height:0}_getLegendItemAt(t,i){let n,s,r;if(ne(t,this.left,this.right)&&ne(i,this.top,this.bottom)){for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(s=r[n],ne(t,s.left,s.left+s.width)&&ne(i,s.top,s.top+s.height))return this.legendItems[n]}return null}handleEvent(t){let i=this.options;if(!eg(t.type,i))return;let n=this._getLegendItemAt(t.x,t.y);if(t.type==="mousemove"||t.type==="mouseout"){let s=this._hoveredItem,r=Gp(s,n);s&&!r&&J(i.onLeave,[t,s,this],this),this._hoveredItem=n,n&&!r&&J(i.onHover,[t,n,this],this)}else n&&J(i.onClick,[t,n,this],this)}};function Zp(e,t,i,n,s){let r=Qp(n,e,t,i),o=tg(s,n,t.lineHeight);return{itemWidth:r,itemHeight:o}}function Qp(e,t,i,n){let s=e.text;return s&&typeof s!="string"&&(s=s.reduce((r,o)=>r.length>o.length?r:o)),t+i.size/2+n.measureText(s).width}function tg(e,t,i){let n=e;return typeof t.text!="string"&&(n=_c(t,i)),n}function _c(e,t){let i=e.text?e.text.length+.5:0;return t*i}function eg(e,t){return!!((e==="mousemove"||e==="mouseout")&&(t.onHover||t.onLeave)||t.onClick&&(e==="click"||e==="mouseup"))}var ig={id:"legend",_element:Bs,start(e,t,i){let n=e.legend=new Bs({ctx:e.ctx,options:i,chart:e});_t.configure(e,n,i),_t.addBox(e,n)},stop(e){_t.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,i){let n=e.legend;_t.configure(e,n,i),n.options=i},afterUpdate(e){let t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,i){let n=t.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),t.hidden=!0):(s.show(n),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){let t=e.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:r,useBorderRadius:o,borderRadius:a}}=e.legend.options;return e._getSortedDatasetMetas().map(l=>{let c=l.controller.getStyle(i?0:void 0),h=yt(c.borderWidth);return{text:t[l.index].label,fillStyle:c.backgroundColor,fontColor:r,hidden:!l.visible,lineCap:c.borderCapStyle,lineDash:c.borderDash,lineDashOffset:c.borderDashOffset,lineJoin:c.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:c.borderColor,pointStyle:n||c.pointStyle,rotation:c.rotation,textAlign:s||c.textAlign,borderRadius:o&&(a||c.borderRadius),datasetIndex:l.index}},this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}},wn=class extends Dt{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,i){let n=this.options;if(this.left=0,this.top=0,!n.display){this.width=this.height=this.right=this.bottom=0;return}this.width=this.right=t,this.height=this.bottom=i;let s=K(n.text)?n.text.length:1;this._padding=yt(n.padding);let r=s*ht(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){let t=this.options.position;return t==="top"||t==="bottom"}_drawArgs(t){let{top:i,left:n,bottom:s,right:r,options:o}=this,a=o.align,l=0,c,h,d;return this.isHorizontal()?(h=vt(a,n,r),d=i+t,c=r-n):(o.position==="left"?(h=n+t,d=vt(a,s,i),l=Z*-.5):(h=r-t,d=vt(a,i,s),l=Z*.5),c=s-i),{titleX:h,titleY:d,maxWidth:c,rotation:l}}draw(){let t=this.ctx,i=this.options;if(!i.display)return;let n=ht(i.font),r=n.lineHeight/2+this._padding.top,{titleX:o,titleY:a,maxWidth:l,rotation:c}=this._drawArgs(r);Le(t,i.text,0,0,n,{color:i.color,maxWidth:l,rotation:c,textAlign:vs(i.align),textBaseline:"middle",translation:[o,a]})}};function ng(e,t){let i=new wn({ctx:e.ctx,options:t,chart:e});_t.configure(e,i,t),_t.addBox(e,i),e.titleBlock=i}var sg={id:"title",_element:wn,start(e,t,i){ng(e,i)},stop(e){let t=e.titleBlock;_t.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,i){let n=e.titleBlock;_t.configure(e,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}},Ps=new WeakMap,rg={id:"subtitle",start(e,t,i){let n=new wn({ctx:e.ctx,options:i,chart:e});_t.configure(e,n,i),_t.addBox(e,n),Ps.set(e,n)},stop(e){_t.removeBox(e,Ps.get(e)),Ps.delete(e)},beforeUpdate(e,t,i){let n=Ps.get(e);_t.configure(e,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}},pn={average(e){if(!e.length)return!1;let t,i,n=0,s=0,r=0;for(t=0,i=e.length;t<i;++t){let o=e[t].element;if(o&&o.hasValue()){let a=o.tooltipPosition();n+=a.x,s+=a.y,++r}}return{x:n/r,y:s/r}},nearest(e,t){if(!e.length)return!1;let i=t.x,n=t.y,s=Number.POSITIVE_INFINITY,r,o,a;for(r=0,o=e.length;r<o;++r){let l=e[r].element;if(l&&l.hasValue()){let c=l.getCenterPoint(),h=fs(t,c);h<s&&(s=h,a=l)}}if(a){let l=a.tooltipPosition();i=l.x,n=l.y}return{x:i,y:n}}};function se(e,t){return t&&(K(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function ye(e){return(typeof e=="string"||e instanceof String)&&e.indexOf(`
`)>-1?e.split(`
`):e}function og(e,t){let{element:i,datasetIndex:n,index:s}=t,r=e.getDatasetMeta(n).controller,{label:o,value:a}=r.getLabelAndValue(s);return{chart:e,label:o,parsed:r.getParsed(s),raw:e.data.datasets[n].data[s],formattedValue:a,dataset:r.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function $l(e,t){let i=e.chart.ctx,{body:n,footer:s,title:r}=e,{boxWidth:o,boxHeight:a}=t,l=ht(t.bodyFont),c=ht(t.titleFont),h=ht(t.footerFont),d=r.length,u=s.length,f=n.length,g=yt(t.padding),m=g.height,b=0,v=n.reduce((p,y)=>p+y.before.length+y.lines.length+y.after.length,0);if(v+=e.beforeBody.length+e.afterBody.length,d&&(m+=d*c.lineHeight+(d-1)*t.titleSpacing+t.titleMarginBottom),v){let p=t.displayColors?Math.max(a,l.lineHeight):l.lineHeight;m+=f*p+(v-f)*l.lineHeight+(v-1)*t.bodySpacing}u&&(m+=t.footerMarginTop+u*h.lineHeight+(u-1)*t.footerSpacing);let x=0,w=function(p){b=Math.max(b,i.measureText(p).width+x)};return i.save(),i.font=c.string,Y(e.title,w),i.font=l.string,Y(e.beforeBody.concat(e.afterBody),w),x=t.displayColors?o+2+t.boxPadding:0,Y(n,p=>{Y(p.before,w),Y(p.lines,w),Y(p.after,w)}),x=0,i.font=h.string,Y(e.footer,w),i.restore(),b+=g.width,{width:b,height:m}}function ag(e,t){let{y:i,height:n}=t;return i<n/2?"top":i>e.height-n/2?"bottom":"center"}function lg(e,t,i,n){let{x:s,width:r}=n,o=i.caretSize+i.caretPadding;if(e==="left"&&s+r+o>t.width||e==="right"&&s-r-o<0)return!0}function cg(e,t,i,n){let{x:s,width:r}=i,{width:o,chartArea:{left:a,right:l}}=e,c="center";return n==="center"?c=s<=(a+l)/2?"left":"right":s<=r/2?c="left":s>=o-r/2&&(c="right"),lg(c,e,t,i)&&(c="center"),c}function Ul(e,t,i){let n=i.yAlign||t.yAlign||ag(e,i);return{xAlign:i.xAlign||t.xAlign||cg(e,t,i,n),yAlign:n}}function hg(e,t){let{x:i,width:n}=e;return t==="right"?i-=n:t==="center"&&(i-=n/2),i}function dg(e,t,i){let{y:n,height:s}=e;return t==="top"?n+=i:t==="bottom"?n-=s+i:n-=s/2,n}function Xl(e,t,i,n){let{caretSize:s,caretPadding:r,cornerRadius:o}=e,{xAlign:a,yAlign:l}=i,c=s+r,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:f}=Re(o),g=hg(t,a),m=dg(t,l,c);return l==="center"?a==="left"?g+=c:a==="right"&&(g-=c):a==="left"?g-=Math.max(h,u)+s:a==="right"&&(g+=Math.max(d,f)+s),{x:ut(g,0,n.width-t.width),y:ut(m,0,n.height-t.height)}}function Ts(e,t,i){let n=yt(i.padding);return t==="center"?e.x+e.width/2:t==="right"?e.x+e.width-n.right:e.x+n.left}function Yl(e){return se([],ye(e))}function ug(e,t,i){return be(e,{tooltip:t,tooltipItems:i,type:"tooltip"})}function ql(e,t){let i=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return i?e.override(i):e}var wc={beforeTitle:ie,title(e){if(e.length>0){let t=e[0],i=t.chart.data.labels,n=i?i.length:0;if(this&&this.options&&this.options.mode==="dataset")return t.dataset.label||"";if(t.label)return t.label;if(n>0&&t.dataIndex<n)return i[t.dataIndex]}return""},afterTitle:ie,beforeBody:ie,beforeLabel:ie,label(e){if(this&&this.options&&this.options.mode==="dataset")return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");let i=e.formattedValue;return $(i)||(t+=i),t},labelColor(e){let i=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:i.borderColor,backgroundColor:i.backgroundColor,borderWidth:i.borderWidth,borderDash:i.borderDash,borderDashOffset:i.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){let i=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:i.pointStyle,rotation:i.rotation}},afterLabel:ie,afterBody:ie,beforeFooter:ie,footer:ie,afterFooter:ie};function Pt(e,t,i,n){let s=e[t].call(i,n);return typeof s>"u"?wc[t].call(i,n):s}var yn=class extends Dt{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){let t=this._cachedAnimations;if(t)return t;let i=this.chart,n=this.options.setContext(this.getContext()),s=n.enabled&&i.options.animation&&n.animations,r=new Ls(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=ug(this.chart.getContext(),this,this._tooltipItems))}getTitle(t,i){let{callbacks:n}=i,s=Pt(n,"beforeTitle",this,t),r=Pt(n,"title",this,t),o=Pt(n,"afterTitle",this,t),a=[];return a=se(a,ye(s)),a=se(a,ye(r)),a=se(a,ye(o)),a}getBeforeBody(t,i){return Yl(Pt(i.callbacks,"beforeBody",this,t))}getBody(t,i){let{callbacks:n}=i,s=[];return Y(t,r=>{let o={before:[],lines:[],after:[]},a=ql(n,r);se(o.before,ye(Pt(a,"beforeLabel",this,r))),se(o.lines,Pt(a,"label",this,r)),se(o.after,ye(Pt(a,"afterLabel",this,r))),s.push(o)}),s}getAfterBody(t,i){return Yl(Pt(i.callbacks,"afterBody",this,t))}getFooter(t,i){let{callbacks:n}=i,s=Pt(n,"beforeFooter",this,t),r=Pt(n,"footer",this,t),o=Pt(n,"afterFooter",this,t),a=[];return a=se(a,ye(s)),a=se(a,ye(r)),a=se(a,ye(o)),a}_createItems(t){let i=this._active,n=this.chart.data,s=[],r=[],o=[],a=[],l,c;for(l=0,c=i.length;l<c;++l)a.push(og(this.chart,i[l]));return t.filter&&(a=a.filter((h,d,u)=>t.filter(h,d,u,n))),t.itemSort&&(a=a.sort((h,d)=>t.itemSort(h,d,n))),Y(a,h=>{let d=ql(t.callbacks,h);s.push(Pt(d,"labelColor",this,h)),r.push(Pt(d,"labelPointStyle",this,h)),o.push(Pt(d,"labelTextColor",this,h))}),this.labelColors=s,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=a,a}update(t,i){let n=this.options.setContext(this.getContext()),s=this._active,r,o=[];if(!s.length)this.opacity!==0&&(r={opacity:0});else{let a=pn[n.position].call(this,s,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);let l=this._size=$l(this,n),c=Object.assign({},a,l),h=Ul(this.chart,n,c),d=Xl(n,c,h,this.chart);this.xAlign=h.xAlign,this.yAlign=h.yAlign,r={opacity:1,x:d.x,y:d.y,width:l.width,height:l.height,caretX:a.x,caretY:a.y}}this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:i})}drawCaret(t,i,n,s){let r=this.getCaretPosition(t,n,s);i.lineTo(r.x1,r.y1),i.lineTo(r.x2,r.y2),i.lineTo(r.x3,r.y3)}getCaretPosition(t,i,n){let{xAlign:s,yAlign:r}=this,{caretSize:o,cornerRadius:a}=n,{topLeft:l,topRight:c,bottomLeft:h,bottomRight:d}=Re(a),{x:u,y:f}=t,{width:g,height:m}=i,b,v,x,w,p,y;return r==="center"?(p=f+m/2,s==="left"?(b=u,v=b-o,w=p+o,y=p-o):(b=u+g,v=b+o,w=p-o,y=p+o),x=b):(s==="left"?v=u+Math.max(l,h)+o:s==="right"?v=u+g-Math.max(c,d)-o:v=this.caretX,r==="top"?(w=f,p=w-o,b=v-o,x=v+o):(w=f+m,p=w+o,b=v+o,x=v-o),y=w),{x1:b,x2:v,x3:x,y1:w,y2:p,y3:y}}drawTitle(t,i,n){let s=this.title,r=s.length,o,a,l;if(r){let c=Je(n.rtl,this.x,this.width);for(t.x=Ts(this,n.titleAlign,n),i.textAlign=c.textAlign(n.titleAlign),i.textBaseline="middle",o=ht(n.titleFont),a=n.titleSpacing,i.fillStyle=n.titleColor,i.font=o.string,l=0;l<r;++l)i.fillText(s[l],c.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,l+1===r&&(t.y+=n.titleMarginBottom-a)}}_drawColorBox(t,i,n,s,r){let o=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:l,boxWidth:c}=r,h=ht(r.bodyFont),d=Ts(this,"left",r),u=s.x(d),f=l<h.lineHeight?(h.lineHeight-l)/2:0,g=i.y+f;if(r.usePointStyle){let m={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},b=s.leftForLtr(u,c)+c/2,v=g+l/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,xs(t,m,b,v),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,xs(t,m,b,v)}else{t.lineWidth=z(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;let m=s.leftForLtr(u,c),b=s.leftForLtr(s.xPlus(u,1),c-2),v=Re(o.borderRadius);Object.values(v).some(x=>x!==0)?(t.beginPath(),t.fillStyle=r.multiKeyBackground,Ai(t,{x:m,y:g,w:c,h:l,radius:v}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Ai(t,{x:b,y:g+1,w:c-2,h:l-2,radius:v}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(m,g,c,l),t.strokeRect(m,g,c,l),t.fillStyle=o.backgroundColor,t.fillRect(b,g+1,c-2,l-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,i,n){let{body:s}=this,{bodySpacing:r,bodyAlign:o,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:h}=n,d=ht(n.bodyFont),u=d.lineHeight,f=0,g=Je(n.rtl,this.x,this.width),m=function(C){i.fillText(C,g.x(t.x+f),t.y+u/2),t.y+=u+r},b=g.textAlign(o),v,x,w,p,y,_,A;for(i.textAlign=o,i.textBaseline="middle",i.font=d.string,t.x=Ts(this,b,n),i.fillStyle=n.bodyColor,Y(this.beforeBody,m),f=a&&b!=="right"?o==="center"?c/2+h:c+2+h:0,p=0,_=s.length;p<_;++p){for(v=s[p],x=this.labelTextColors[p],i.fillStyle=x,Y(v.before,m),w=v.lines,a&&w.length&&(this._drawColorBox(i,t,p,g,n),u=Math.max(d.lineHeight,l)),y=0,A=w.length;y<A;++y)m(w[y]),u=d.lineHeight;Y(v.after,m)}f=0,u=d.lineHeight,Y(this.afterBody,m),t.y-=r}drawFooter(t,i,n){let s=this.footer,r=s.length,o,a;if(r){let l=Je(n.rtl,this.x,this.width);for(t.x=Ts(this,n.footerAlign,n),t.y+=n.footerMarginTop,i.textAlign=l.textAlign(n.footerAlign),i.textBaseline="middle",o=ht(n.footerFont),i.fillStyle=n.footerColor,i.font=o.string,a=0;a<r;++a)i.fillText(s[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,i,n,s){let{xAlign:r,yAlign:o}=this,{x:a,y:l}=t,{width:c,height:h}=n,{topLeft:d,topRight:u,bottomLeft:f,bottomRight:g}=Re(s.cornerRadius);i.fillStyle=s.backgroundColor,i.strokeStyle=s.borderColor,i.lineWidth=s.borderWidth,i.beginPath(),i.moveTo(a+d,l),o==="top"&&this.drawCaret(t,i,n,s),i.lineTo(a+c-u,l),i.quadraticCurveTo(a+c,l,a+c,l+u),o==="center"&&r==="right"&&this.drawCaret(t,i,n,s),i.lineTo(a+c,l+h-g),i.quadraticCurveTo(a+c,l+h,a+c-g,l+h),o==="bottom"&&this.drawCaret(t,i,n,s),i.lineTo(a+f,l+h),i.quadraticCurveTo(a,l+h,a,l+h-f),o==="center"&&r==="left"&&this.drawCaret(t,i,n,s),i.lineTo(a,l+d),i.quadraticCurveTo(a,l,a+d,l),i.closePath(),i.fill(),s.borderWidth>0&&i.stroke()}_updateAnimationTarget(t){let i=this.chart,n=this.$animations,s=n&&n.x,r=n&&n.y;if(s||r){let o=pn[t.position].call(this,this._active,this._eventPosition);if(!o)return;let a=this._size=$l(this,t),l=Object.assign({},o,this._size),c=Ul(i,t,l),h=Xl(t,l,c,i);(s._to!==h.x||r._to!==h.y)&&(this.xAlign=c.xAlign,this.yAlign=c.yAlign,this.width=a.width,this.height=a.height,this.caretX=o.x,this.caretY=o.y,this._resolveAnimations().update(this,h))}}_willRender(){return!!this.opacity}draw(t){let i=this.options.setContext(this.getContext()),n=this.opacity;if(!n)return;this._updateAnimationTarget(i);let s={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;let o=yt(i.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;i.enabled&&a&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,s,i),Zr(t,i.textDirection),r.y+=o.top,this.drawTitle(r,t,i),this.drawBody(r,t,i),this.drawFooter(r,t,i),Qr(t,i.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,i){let n=this._active,s=t.map(({datasetIndex:a,index:l})=>{let c=this.chart.getDatasetMeta(a);if(!c)throw new Error("Cannot find a dataset at index "+a);return{datasetIndex:a,element:c.data[l],index:l}}),r=!nn(n,s),o=this._positionChanged(s,i);(r||o)&&(this._active=s,this._eventPosition=i,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,i,n=!0){if(i&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;let s=this.options,r=this._active||[],o=this._getActiveElements(t,r,i,n),a=this._positionChanged(o,t),l=i||!nn(o,r)||a;return l&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,i))),l}_getActiveElements(t,i,n,s){let r=this.options;if(t.type==="mouseout")return[];if(!s)return i;let o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,i){let{caretX:n,caretY:s,options:r}=this,o=pn[r.position].call(this,t,i);return o!==!1&&(n!==o.x||s!==o.y)}};D(yn,"positioners",pn);var fg={id:"tooltip",_element:yn,positioners:pn,afterInit(e,t,i){i&&(e.tooltip=new yn({chart:e,options:i}))},beforeUpdate(e,t,i){e.tooltip&&e.tooltip.initialize(i)},reset(e,t,i){e.tooltip&&e.tooltip.initialize(i)},afterDraw(e){let t=e.tooltip;if(t&&t._willRender()){let i={tooltip:t};if(e.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0})===!1)return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",i)}},afterEvent(e,t){if(e.tooltip){let i=t.replay;e.tooltip.handleEvent(t.event,i,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:wc},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>e!=="filter"&&e!=="itemSort"&&e!=="external",_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},pg=Object.freeze({__proto__:null,Colors:Cp,Decimation:Mp,Filler:Kp,Legend:ig,SubTitle:rg,Title:sg,Tooltip:fg}),gg=(e,t,i,n)=>(typeof t=="string"?(i=e.push(t)-1,n.unshift({index:i,label:t})):isNaN(t)&&(i=null),i);function mg(e,t,i,n){let s=e.indexOf(t);if(s===-1)return gg(e,t,i,n);let r=e.lastIndexOf(t);return s!==r?i:s}var bg=(e,t)=>e===null?null:ut(Math.round(e),0,t);function Jl(e){let t=this.getLabels();return e>=0&&e<t.length?t[e]:e}var gn=class extends _e{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){let i=this._addedLabels;if(i.length){let n=this.getLabels();for(let{index:s,label:r}of i)n[s]===r&&n.splice(s,1);this._addedLabels=[]}super.init(t)}parse(t,i){if($(t))return null;let n=this.getLabels();return i=isFinite(i)&&n[i]===t?i:mg(n,t,V(i,t),this._addedLabels),bg(i,n.length-1)}determineDataLimits(){let{minDefined:t,maxDefined:i}=this.getUserBounds(),{min:n,max:s}=this.getMinMax(!0);this.options.bounds==="ticks"&&(t||(n=0),i||(s=this.getLabels().length-1)),this.min=n,this.max=s}buildTicks(){let t=this.min,i=this.max,n=this.options.offset,s=[],r=this.getLabels();r=t===0&&i===r.length-1?r:r.slice(t,i+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let o=t;o<=i;o++)s.push({value:o});return s}getLabelForValue(t){return Jl.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return typeof t!="number"&&(t=this.parse(t)),t===null?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){let i=this.ticks;return t<0||t>i.length-1?null:this.getPixelForValue(i[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}};D(gn,"id","category"),D(gn,"defaults",{ticks:{callback:Jl}});function vg(e,t){let i=[],{bounds:s,step:r,min:o,max:a,precision:l,count:c,maxTicks:h,maxDigits:d,includeBounds:u}=e,f=r||1,g=h-1,{min:m,max:b}=t,v=!$(o),x=!$(a),w=!$(c),p=(b-m)/(d+1),y=Mr((b-m)/g/f)*f,_,A,C,E;if(y<1e-14&&!v&&!x)return[{value:m},{value:b}];E=Math.ceil(b/y)-Math.floor(m/y),E>g&&(y=Mr(E*y/g/f)*f),$(l)||(_=Math.pow(10,l),y=Math.ceil(y*_)/_),s==="ticks"?(A=Math.floor(m/y)*y,C=Math.ceil(b/y)*y):(A=m,C=b),v&&x&&r&&Ia((a-o)/r,y/1e3)?(E=Math.round(Math.min((a-o)/y,h)),y=(a-o)/E,A=o,C=a):w?(A=v?o:A,C=x?a:C,E=c-1,y=(C-A)/E):(E=(C-A)/y,wi(E,Math.round(E),y/1e3)?E=Math.round(E):E=Math.ceil(E));let M=Math.max(Dr(y),Dr(A));_=Math.pow(10,$(l)?M:l),A=Math.round(A*_)/_,C=Math.round(C*_)/_;let P=0;for(v&&(u&&A!==o?(i.push({value:o}),A<o&&P++,wi(Math.round((A+P*y)*_)/_,o,Kl(o,p,e))&&P++):A<o&&P++);P<E;++P){let L=Math.round((A+P*y)*_)/_;if(x&&L>a)break;i.push({value:L})}return x&&u&&C!==a?i.length&&wi(i[i.length-1].value,a,Kl(a,p,e))?i[i.length-1].value=a:i.push({value:a}):(!x||C===a)&&i.push({value:C}),i}function Kl(e,t,{horizontal:i,minRotation:n}){let s=Bt(n),r=(i?Math.sin(s):Math.cos(s))||.001,o=.75*t*(""+e).length;return Math.min(t/r,o)}var Fi=class extends _e{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,i){return $(t)||(typeof t=="number"||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){let{beginAtZero:t}=this.options,{minDefined:i,maxDefined:n}=this.getUserBounds(),{min:s,max:r}=this,o=l=>s=i?s:l,a=l=>r=n?r:l;if(t){let l=Yt(s),c=Yt(r);l<0&&c<0?a(0):l>0&&c>0&&o(0)}if(s===r){let l=r===0?1:Math.abs(r*.05);a(r+l),t||o(s-l)}this.min=s,this.max=r}getTickLimit(){let t=this.options.ticks,{maxTicksLimit:i,stepSize:n}=t,s;return n?(s=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,s>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${s} ticks. Limiting to 1000.`),s=1e3)):(s=this.computeTickLimit(),i=i||11),i&&(s=Math.min(i,s)),s}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){let t=this.options,i=t.ticks,n=this.getTickLimit();n=Math.max(2,n);let s={maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:i.precision,step:i.stepSize,count:i.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:i.minRotation||0,includeBounds:i.includeBounds!==!1},r=this._range||this,o=vg(s,r);return t.bounds==="ticks"&&Or(o,this,"value"),t.reverse?(o.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),o}configure(){let t=this.ticks,i=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){let s=(n-i)/Math.max(t.length-1,1)/2;i-=s,n+=s}this._startValue=i,this._endValue=n,this._valueRange=n-i}getLabelForValue(t){return ki(t,this.chart.options.locale,this.options.ticks.format)}},mn=class extends Fi{determineDataLimits(){let{min:t,max:i}=this.getMinMax(!0);this.min=it(t)?t:0,this.max=it(i)?i:1,this.handleTickRangeOptions()}computeTickLimit(){let t=this.isHorizontal(),i=t?this.width:this.height,n=Bt(this.options.ticks.minRotation),s=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(i/Math.min(40,r.lineHeight/s))}getPixelForValue(t){return t===null?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}};D(mn,"id","linear"),D(mn,"defaults",{ticks:{callback:sn.formatters.numeric}});var Sn=e=>Math.floor(ge(e)),Ge=(e,t)=>Math.pow(10,Sn(e)+t);function Gl(e){return e/Math.pow(10,Sn(e))===1}function Zl(e,t,i){let n=Math.pow(10,i),s=Math.floor(e/n);return Math.ceil(t/n)-s}function yg(e,t){let i=t-e,n=Sn(i);for(;Zl(e,t,n)>10;)n++;for(;Zl(e,t,n)<10;)n--;return Math.min(n,Sn(e))}function xg(e,{min:t,max:i}){t=Et(e.min,t);let n=[],s=Sn(t),r=yg(t,i),o=r<0?Math.pow(10,Math.abs(r)):1,a=Math.pow(10,r),l=s>r?Math.pow(10,s):0,c=Math.round((t-l)*o)/o,h=Math.floor((t-l)/a/10)*a*10,d=Math.floor((c-h)/Math.pow(10,r)),u=Et(e.min,Math.round((l+h+d*Math.pow(10,r))*o)/o);for(;u<i;)n.push({value:u,major:Gl(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(r++,d=2,o=r>=0?1:o),u=Math.round((l+h+d*Math.pow(10,r))*o)/o;let f=Et(e.max,u);return n.push({value:f,major:Gl(f),significand:d}),n}var bn=class extends _e{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,i){let n=Fi.prototype.parse.apply(this,[t,i]);if(n===0){this._zero=!0;return}return it(n)&&n>0?n:null}determineDataLimits(){let{min:t,max:i}=this.getMinMax(!0);this.min=it(t)?Math.max(0,t):null,this.max=it(i)?Math.max(0,i):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!it(this._userMin)&&(this.min=t===Ge(this.min,0)?Ge(this.min,-1):Ge(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){let{minDefined:t,maxDefined:i}=this.getUserBounds(),n=this.min,s=this.max,r=a=>n=t?n:a,o=a=>s=i?s:a;n===s&&(n<=0?(r(1),o(10)):(r(Ge(n,-1)),o(Ge(s,1)))),n<=0&&r(Ge(s,-1)),s<=0&&o(Ge(n,1)),this.min=n,this.max=s}buildTicks(){let t=this.options,i={min:this._userMin,max:this._userMax},n=xg(i,this);return t.bounds==="ticks"&&Or(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}getLabelForValue(t){return t===void 0?"0":ki(t,this.chart.options.locale,this.options.ticks.format)}configure(){let t=this.min;super.configure(),this._startValue=ge(t),this._valueRange=ge(this.max)-ge(t)}getPixelForValue(t){return(t===void 0||t===0)&&(t=this.min),t===null||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(ge(t)-this._startValue)/this._valueRange)}getValueForPixel(t){let i=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+i*this._valueRange)}};D(bn,"id","logarithmic"),D(bn,"defaults",{ticks:{callback:sn.formatters.logarithmic,major:{enabled:!0}}});function ko(e){let t=e.ticks;if(t.display&&e.display){let i=yt(t.backdropPadding);return V(t.font&&t.font.size,nt.font.size)+i.height}return 0}function _g(e,t,i){return i=K(i)?i:[i],{w:$a(e,t.string,i),h:i.length*t.lineHeight}}function Ql(e,t,i,n,s){return e===n||e===s?{start:t-i/2,end:t+i/2}:e<n||e>s?{start:t-i,end:t}:{start:t,end:t+i}}function wg(e){let t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},i=Object.assign({},t),n=[],s=[],r=e._pointLabels.length,o=e.options.pointLabels,a=o.centerPointLabels?Z/r:0;for(let l=0;l<r;l++){let c=o.setContext(e.getPointLabelContext(l));s[l]=c.padding;let h=e.getPointPosition(l,e.drawingArea+s[l],a),d=ht(c.font),u=_g(e.ctx,d,e._pointLabels[l]);n[l]=u;let f=Ct(e.getIndexAngle(l)+a),g=Math.round(ms(f)),m=Ql(g,h.x,u.w,0,180),b=Ql(g,h.y,u.h,90,270);Sg(i,t,f,m,b)}e.setCenterPoint(t.l-i.l,i.r-t.r,t.t-i.t,i.b-t.b),e._pointLabelItems=Cg(e,n,s)}function Sg(e,t,i,n,s){let r=Math.abs(Math.sin(i)),o=Math.abs(Math.cos(i)),a=0,l=0;n.start<t.l?(a=(t.l-n.start)/r,e.l=Math.min(e.l,t.l-a)):n.end>t.r&&(a=(n.end-t.r)/r,e.r=Math.max(e.r,t.r+a)),s.start<t.t?(l=(t.t-s.start)/o,e.t=Math.min(e.t,t.t-l)):s.end>t.b&&(l=(s.end-t.b)/o,e.b=Math.max(e.b,t.b+l))}function kg(e,t,i){let n=e.drawingArea,{extra:s,additionalAngle:r,padding:o,size:a}=i,l=e.getPointPosition(t,n+s+o,r),c=Math.round(ms(Ct(l.angle+et))),h=Tg(l.y,a.h,c),d=Eg(c),u=Pg(l.x,a.w,d);return{visible:!0,x:l.x,y:h,textAlign:d,left:u,top:h,right:u+a.w,bottom:h+a.h}}function Ag(e,t){if(!t)return!0;let{left:i,top:n,right:s,bottom:r}=e;return!(ee({x:i,y:n},t)||ee({x:i,y:r},t)||ee({x:s,y:n},t)||ee({x:s,y:r},t))}function Cg(e,t,i){let n=[],s=e._pointLabels.length,r=e.options,{centerPointLabels:o,display:a}=r.pointLabels,l={extra:ko(r)/2,additionalAngle:o?Z/s:0},c;for(let h=0;h<s;h++){l.padding=i[h],l.size=t[h];let d=kg(e,h,l);n.push(d),a==="auto"&&(d.visible=Ag(d,c),d.visible&&(c=d))}return n}function Eg(e){return e===0||e===180?"center":e<180?"left":"right"}function Pg(e,t,i){return i==="right"?e-=t:i==="center"&&(e-=t/2),e}function Tg(e,t,i){return i===90||i===270?e-=t/2:(i>270||i<90)&&(e-=t),e}function Mg(e,t,i){let{left:n,top:s,right:r,bottom:o}=i,{backdropColor:a}=t;if(!$(a)){let l=Re(t.borderRadius),c=yt(t.backdropPadding);e.fillStyle=a;let h=n-c.left,d=s-c.top,u=r-n+c.width,f=o-s+c.height;Object.values(l).some(g=>g!==0)?(e.beginPath(),Ai(e,{x:h,y:d,w:u,h:f,radius:l}),e.fill()):e.fillRect(h,d,u,f)}}function Og(e,t){let{ctx:i,options:{pointLabels:n}}=e;for(let s=t-1;s>=0;s--){let r=e._pointLabelItems[s];if(!r.visible)continue;let o=n.setContext(e.getPointLabelContext(s));Mg(i,o,r);let a=ht(o.font),{x:l,y:c,textAlign:h}=r;Le(i,e._pointLabels[s],l,c+a.lineHeight/2,a,{color:o.color,textAlign:h,textBaseline:"middle"})}}function Sc(e,t,i,n){let{ctx:s}=e;if(i)s.arc(e.xCenter,e.yCenter,t,0,G);else{let r=e.getPointPosition(0,t);s.moveTo(r.x,r.y);for(let o=1;o<n;o++)r=e.getPointPosition(o,t),s.lineTo(r.x,r.y)}}function Dg(e,t,i,n,s){let r=e.ctx,o=t.circular,{color:a,lineWidth:l}=t;!o&&!n||!a||!l||i<0||(r.save(),r.strokeStyle=a,r.lineWidth=l,r.setLineDash(s.dash),r.lineDashOffset=s.dashOffset,r.beginPath(),Sc(e,i,o,n),r.closePath(),r.stroke(),r.restore())}function Lg(e,t,i){return be(e,{label:i,index:t,type:"pointLabel"})}var Qe=class extends Fi{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){let t=this._padding=yt(ko(this.options)/2),i=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+i/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(i,n)/2)}determineDataLimits(){let{min:t,max:i}=this.getMinMax(!1);this.min=it(t)&&!isNaN(t)?t:0,this.max=it(i)&&!isNaN(i)?i:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/ko(this.options))}generateTickLabels(t){Fi.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map((i,n)=>{let s=J(this.options.pointLabels.callback,[i,n],this);return s||s===0?s:""}).filter((i,n)=>this.chart.getDataVisibility(n))}fit(){let t=this.options;t.display&&t.pointLabels.display?wg(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,i,n,s){this.xCenter+=Math.floor((t-i)/2),this.yCenter+=Math.floor((n-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,i,n,s))}getIndexAngle(t){let i=G/(this._pointLabels.length||1),n=this.options.startAngle||0;return Ct(t*i+Bt(n))}getDistanceFromCenterForValue(t){if($(t))return NaN;let i=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*i:(t-this.min)*i}getValueForDistanceFromCenter(t){if($(t))return NaN;let i=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-i:this.min+i}getPointLabelContext(t){let i=this._pointLabels||[];if(t>=0&&t<i.length){let n=i[t];return Lg(this.getContext(),t,n)}}getPointPosition(t,i,n=0){let s=this.getIndexAngle(t)-et+n;return{x:Math.cos(s)*i+this.xCenter,y:Math.sin(s)*i+this.yCenter,angle:s}}getPointPositionForValue(t,i){return this.getPointPosition(t,this.getDistanceFromCenterForValue(i))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){let{left:i,top:n,right:s,bottom:r}=this._pointLabelItems[t];return{left:i,top:n,right:s,bottom:r}}drawBackground(){let{backgroundColor:t,grid:{circular:i}}=this.options;if(t){let n=this.ctx;n.save(),n.beginPath(),Sc(this,this.getDistanceFromCenterForValue(this._endValue),i,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){let t=this.ctx,i=this.options,{angleLines:n,grid:s,border:r}=i,o=this._pointLabels.length,a,l,c;if(i.pointLabels.display&&Og(this,o),s.display&&this.ticks.forEach((h,d)=>{if(d!==0){l=this.getDistanceFromCenterForValue(h.value);let u=this.getContext(d),f=s.setContext(u),g=r.setContext(u);Dg(this,f,l,o,g)}}),n.display){for(t.save(),a=o-1;a>=0;a--){let h=n.setContext(this.getPointLabelContext(a)),{color:d,lineWidth:u}=h;!u||!d||(t.lineWidth=u,t.strokeStyle=d,t.setLineDash(h.borderDash),t.lineDashOffset=h.borderDashOffset,l=this.getDistanceFromCenterForValue(i.ticks.reverse?this.min:this.max),c=this.getPointPosition(a,l),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(c.x,c.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){let t=this.ctx,i=this.options,n=i.ticks;if(!n.display)return;let s=this.getIndexAngle(0),r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach((a,l)=>{if(l===0&&!i.reverse)return;let c=n.setContext(this.getContext(l)),h=ht(c.font);if(r=this.getDistanceFromCenterForValue(this.ticks[l].value),c.showLabelBackdrop){t.font=h.string,o=t.measureText(a.label).width,t.fillStyle=c.backdropColor;let d=yt(c.backdropPadding);t.fillRect(-o/2-d.left,-r-h.size/2-d.top,o+d.width,h.size+d.height)}Le(t,a.label,0,-r,h,{color:c.color})}),t.restore()}drawTitle(){}};D(Qe,"id","radialLinear"),D(Qe,"defaults",{display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:sn.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback(t){return t},padding:5,centerPointLabels:!1}}),D(Qe,"defaultRoutes",{"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"}),D(Qe,"descriptors",{angleLines:{_fallback:"grid"}});var Hs={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Tt=Object.keys(Hs);function Rg(e,t){return e-t}function tc(e,t){if($(t))return null;let i=e._adapter,{parser:n,round:s,isoWeekday:r}=e._parseOpts,o=t;return typeof n=="function"&&(o=n(o)),it(o)||(o=typeof n=="string"?i.parse(o,n):i.parse(o)),o===null?null:(s&&(o=s==="week"&&(qe(r)||r===!0)?i.startOf(o,"isoWeek",r):i.startOf(o,s)),+o)}function ec(e,t,i,n){let s=Tt.length;for(let r=Tt.indexOf(e);r<s-1;++r){let o=Hs[Tt[r]],a=o.steps?o.steps:Number.MAX_SAFE_INTEGER;if(o.common&&Math.ceil((i-t)/(a*o.size))<=n)return Tt[r]}return Tt[s-1]}function Ig(e,t,i,n,s){for(let r=Tt.length-1;r>=Tt.indexOf(i);r--){let o=Tt[r];if(Hs[o].common&&e._adapter.diff(s,n,o)>=t-1)return o}return Tt[i?Tt.indexOf(i):0]}function Fg(e){for(let t=Tt.indexOf(e)+1,i=Tt.length;t<i;++t)if(Hs[Tt[t]].common)return Tt[t]}function ic(e,t,i){if(!i)e[t]=!0;else if(i.length){let{lo:n,hi:s}=bs(i,t),r=i[n]>=t?i[n]:i[s];e[r]=!0}}function Ng(e,t,i,n){let s=e._adapter,r=+s.startOf(t[0].value,n),o=t[t.length-1].value,a,l;for(a=r;a<=o;a=+s.add(a,1,n))l=i[a],l>=0&&(t[l].major=!0);return t}function nc(e,t,i){let n=[],s={},r=t.length,o,a;for(o=0;o<r;++o)a=t[o],s[a]=o,n.push({value:a,major:!1});return r===0||!i?n:Ng(e,n,s,i)}var ei=class extends _e{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,i={}){let n=t.time||(t.time={}),s=this._adapter=new Ju._date(t.adapters.date);s.init(i),xi(n.displayFormats,s.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=i.normalized}parse(t,i){return t===void 0?null:tc(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){let t=this.options,i=this._adapter,n=t.time.unit||"day",{min:s,max:r,minDefined:o,maxDefined:a}=this.getUserBounds();function l(c){!o&&!isNaN(c.min)&&(s=Math.min(s,c.min)),!a&&!isNaN(c.max)&&(r=Math.max(r,c.max))}(!o||!a)&&(l(this._getLabelBounds()),(t.bounds!=="ticks"||t.ticks.source!=="labels")&&l(this.getMinMax(!1))),s=it(s)&&!isNaN(s)?s:+i.startOf(Date.now(),n),r=it(r)&&!isNaN(r)?r:+i.endOf(Date.now(),n)+1,this.min=Math.min(s,r-1),this.max=Math.max(s+1,r)}_getLabelBounds(){let t=this.getLabelTimestamps(),i=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(i=t[0],n=t[t.length-1]),{min:i,max:n}}buildTicks(){let t=this.options,i=t.time,n=t.ticks,s=n.source==="labels"?this.getLabelTimestamps():this._generate();t.bounds==="ticks"&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);let r=this.min,o=this.max,a=Ba(s,r,o);return this._unit=i.unit||(n.autoSkip?ec(i.minUnit,this.min,this.max,this._getLabelCapacity(r)):Ig(this,a.length,i.minUnit,this.min,this.max)),this._majorUnit=!n.major.enabled||this._unit==="year"?void 0:Fg(this._unit),this.initOffsets(s),t.reverse&&a.reverse(),nc(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map(t=>+t.value))}initOffsets(t=[]){let i=0,n=0,s,r;this.options.offset&&t.length&&(s=this.getDecimalForValue(t[0]),t.length===1?i=1-s:i=(this.getDecimalForValue(t[1])-s)/2,r=this.getDecimalForValue(t[t.length-1]),t.length===1?n=r:n=(r-this.getDecimalForValue(t[t.length-2]))/2);let o=t.length<3?.5:.25;i=ut(i,0,o),n=ut(n,0,o),this._offsets={start:i,end:n,factor:1/(i+1+n)}}_generate(){let t=this._adapter,i=this.min,n=this.max,s=this.options,r=s.time,o=r.unit||ec(r.minUnit,i,n,this._getLabelCapacity(i)),a=V(s.ticks.stepSize,1),l=o==="week"?r.isoWeekday:!1,c=qe(l)||l===!0,h={},d=i,u,f;if(c&&(d=+t.startOf(d,"isoWeek",l)),d=+t.startOf(d,c?"day":o),t.diff(n,i,o)>1e5*a)throw new Error(i+" and "+n+" are too far apart with stepSize of "+a+" "+o);let g=s.ticks.source==="data"&&this.getDataTimestamps();for(u=d,f=0;u<n;u=+t.add(u,a,o),f++)ic(h,u,g);return(u===n||s.bounds==="ticks"||f===1)&&ic(h,u,g),Object.keys(h).sort((m,b)=>m-b).map(m=>+m)}getLabelForValue(t){let i=this._adapter,n=this.options.time;return n.tooltipFormat?i.format(t,n.tooltipFormat):i.format(t,n.displayFormats.datetime)}format(t,i){let s=this.options.time.displayFormats,r=this._unit,o=i||s[r];return this._adapter.format(t,o)}_tickFormatFunction(t,i,n,s){let r=this.options,o=r.ticks.callback;if(o)return J(o,[t,i,n],this);let a=r.time.displayFormats,l=this._unit,c=this._majorUnit,h=l&&a[l],d=c&&a[c],u=n[i],f=c&&d&&u&&u.major;return this._adapter.format(t,s||(f?d:h))}generateTickLabels(t){let i,n,s;for(i=0,n=t.length;i<n;++i)s=t[i],s.label=this._tickFormatFunction(s.value,i,t)}getDecimalForValue(t){return t===null?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){let i=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((i.start+n)*i.factor)}getValueForPixel(t){let i=this._offsets,n=this.getDecimalForPixel(t)/i.factor-i.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){let i=this.options.ticks,n=this.ctx.measureText(t).width,s=Bt(this.isHorizontal()?i.maxRotation:i.minRotation),r=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:n*r+a*o,h:n*o+a*r}}_getLabelCapacity(t){let i=this.options.time,n=i.displayFormats,s=n[i.unit]||n.millisecond,r=this._tickFormatFunction(t,0,nc(this,[t],this._majorUnit),s),o=this._getLabelSize(r),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t=this._cache.data||[],i,n;if(t.length)return t;let s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(i=0,n=s.length;i<n;++i)t=t.concat(s[i].controller.getAllParsedValues(this));return this._cache.data=this.normalize(t)}getLabelTimestamps(){let t=this._cache.labels||[],i,n;if(t.length)return t;let s=this.getLabels();for(i=0,n=s.length;i<n;++i)t.push(tc(this,s[i]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Ir(t.sort(Rg))}};D(ei,"id","time"),D(ei,"defaults",{bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}});function Ms(e,t,i){let n=0,s=e.length-1,r,o,a,l;i?(t>=e[n].pos&&t<=e[s].pos&&({lo:n,hi:s}=te(e,"pos",t)),{pos:r,time:a}=e[n],{pos:o,time:l}=e[s]):(t>=e[n].time&&t<=e[s].time&&({lo:n,hi:s}=te(e,"time",t)),{time:r,pos:a}=e[n],{time:o,pos:l}=e[s]);let c=o-r;return c?a+(l-a)*(t-r)/c:a}var vn=class extends ei{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){let t=this._getTimestampsForTable(),i=this._table=this.buildLookupTable(t);this._minPos=Ms(i,this.min),this._tableRange=Ms(i,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){let{min:i,max:n}=this,s=[],r=[],o,a,l,c,h;for(o=0,a=t.length;o<a;++o)c=t[o],c>=i&&c<=n&&s.push(c);if(s.length<2)return[{time:i,pos:0},{time:n,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],l=s[o-1],c=s[o],Math.round((h+l)/2)!==c&&r.push({time:c,pos:o/(a-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;let i=this.getDataTimestamps(),n=this.getLabelTimestamps();return i.length&&n.length?t=this.normalize(i.concat(n)):t=i.length?i:n,t=this._cache.all=t,t}getDecimalForValue(t){return(Ms(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){let i=this._offsets,n=this.getDecimalForPixel(t)/i.factor-i.end;return Ms(this._table,n*this._tableRange+this._minPos,!0)}};D(vn,"id","timeseries"),D(vn,"defaults",ei.defaults);var Bg=Object.freeze({__proto__:null,CategoryScale:gn,LinearScale:mn,LogarithmicScale:bn,RadialLinearScale:Qe,TimeScale:ei,TimeSeriesScale:vn}),kc=[qu,xp,pg,Bg];Ht.register(...kc);var js=Ht;var Cn=e=>typeof e=="function"?e:function(){return e},Hg=typeof self<"u"?self:null,An=typeof window<"u"?window:null,En=Hg||An||En,jg="2.0.0",ae={connecting:0,open:1,closing:2,closed:3},Vg=1e4,zg=1e3,Lt={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},we={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Co={longpoll:"longpoll",websocket:"websocket"},Wg={complete:4},Vs=class{constructor(e,t,i,n){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(n=>n.status===e).forEach(n=>n.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},Ac=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},$g=class{constructor(e,t,i){this.state=Lt.closed,this.topic=e,this.params=Cn(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Vs(this,we.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new Ac(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=Lt.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=Lt.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=Lt.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=Lt.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Vs(this,we.leave,Cn({}),this.timeout).send(),this.state=Lt.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(we.reply,(n,s)=>{this.trigger(this.replyEventName(s),n)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(we.close,e)}onError(e){return this.on(we.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t>"u"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new Vs(this,e,function(){return t},i);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=Lt.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(we.close,"leave")},i=new Vs(this,we.leave,Cn({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,n){return this.topic!==e?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=Lt.joining,this.joinPush.resend(e))}trigger(e,t,i,n){let s=this.onMessage(e,t,i,n);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let r=this.bindings.filter(o=>o.event===e);for(let o=0;o<r.length;o++)r[o].callback(s,i,n||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===Lt.closed}isErrored(){return this.state===Lt.errored}isJoined(){return this.state===Lt.joined}isJoining(){return this.state===Lt.joining}isLeaving(){return this.state===Lt.leaving}},Ws=class{static request(e,t,i,n,s,r,o){if(En.XDomainRequest){let a=new En.XDomainRequest;return this.xdomainRequest(a,e,t,n,s,r,o)}else{let a=new En.XMLHttpRequest;return this.xhrRequest(a,e,t,i,n,s,r,o)}}static xdomainRequest(e,t,i,n,s,r,o){return e.timeout=s,e.open(t,i),e.onload=()=>{let a=this.parseJSON(e.responseText);o&&o(a)},r&&(e.ontimeout=r),e.onprogress=()=>{},e.send(n),e}static xhrRequest(e,t,i,n,s,r,o,a){return e.open(t,i,!0),e.timeout=r,e.setRequestHeader("Content-Type",n),e.onerror=()=>a&&a(null),e.onreadystatechange=()=>{if(e.readyState===Wg.complete&&a){let l=this.parseJSON(e.responseText);a(l)}},o&&(e.ontimeout=o),e.send(s),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch{return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var n in e){if(!Object.prototype.hasOwnProperty.call(e,n))continue;let s=t?`${t}[${n}]`:n,r=e[n];typeof r=="object"?i.push(this.serialize(r,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(r))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},Pn=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=ae.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Co.websocket),"$1/"+Co.longpoll)}endpointURL(){return Ws.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=ae.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===ae.open||this.readyState===ae.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:n}=e;this.token=i}else t=0;switch(t){case 200:n.forEach(s=>{setTimeout(()=>this.onmessage({data:s}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=ae.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){this.currentBatch?this.currentBatch.push(e):this.awaitingBatchAck?this.batchBuffer.push(e):(this.currentBatch=[e],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(e){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",e.join(`
`),()=>this.onerror("timeout"),t=>{this.awaitingBatchAck=!1,!t||t.status!==200?(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(e,t,i){for(let s of this.reqs)s.abort();this.readyState=ae.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(e,t,i,n,s){let r,o=()=>{this.reqs.delete(r),n()};r=Ws.request(e,this.endpointURL(),t,i,this.timeout,o,a=>{this.reqs.delete(r),this.isActive()&&s(a)}),this.reqs.add(r)}};var zs={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,n,s,r,o]=JSON.parse(e);return t({join_ref:i,ref:n,topic:s,event:r,payload:o})}},binaryEncode(e){let{join_ref:t,ref:i,event:n,topic:s,payload:r}=e,o=this.META_LENGTH+t.length+i.length+s.length+n.length,a=new ArrayBuffer(this.HEADER_LENGTH+o),l=new DataView(a),c=0;l.setUint8(c++,this.KINDS.push),l.setUint8(c++,t.length),l.setUint8(c++,i.length),l.setUint8(c++,s.length),l.setUint8(c++,n.length),Array.from(t,d=>l.setUint8(c++,d.charCodeAt(0))),Array.from(i,d=>l.setUint8(c++,d.charCodeAt(0))),Array.from(s,d=>l.setUint8(c++,d.charCodeAt(0))),Array.from(n,d=>l.setUint8(c++,d.charCodeAt(0)));var h=new Uint8Array(a.byteLength+r.byteLength);return h.set(new Uint8Array(a),0),h.set(new Uint8Array(r),a.byteLength),h.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),n=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,n);case this.KINDS.reply:return this.decodeReply(e,t,n);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,n)}},decodePush(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),o=this.HEADER_LENGTH+this.META_LENGTH-1,a=i.decode(e.slice(o,o+n));o=o+n;let l=i.decode(e.slice(o,o+s));o=o+s;let c=i.decode(e.slice(o,o+r));o=o+r;let h=e.slice(o,e.byteLength);return{join_ref:a,ref:null,topic:l,event:c,payload:h}},decodeReply(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),o=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(a,a+n));a=a+n;let c=i.decode(e.slice(a,a+s));a=a+s;let h=i.decode(e.slice(a,a+r));a=a+r;let d=i.decode(e.slice(a,a+o));a=a+o;let u=e.slice(a,e.byteLength),f={status:d,response:u};return{join_ref:l,ref:c,topic:h,event:we.reply,payload:f}},decodeBroadcast(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=this.HEADER_LENGTH+2,o=i.decode(e.slice(r,r+n));r=r+n;let a=i.decode(e.slice(r,r+s));r=r+s;let l=e.slice(r,e.byteLength);return{join_ref:null,ref:null,topic:o,event:a,payload:l}}},Cc=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||Vg,this.transport=t.transport||En.WebSocket||Pn,this.establishedConnections=0,this.defaultEncoder=zs.encode.bind(zs),this.defaultDecoder=zs.decode.bind(zs),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==Pn?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;An&&An.addEventListener&&(An.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),i=this.connectClock)}),An.addEventListener("pageshow",n=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>t.rejoinAfterMs?t.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>t.reconnectAfterMs?t.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=Cn(t.params||{}),this.endPoint=`${e}/${Co.websocket}`,this.vsn=t.vsn||jg,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new Ac(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return Pn}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.sendBuffer=[],this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=Ws.appendParams(Ws.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=Cn(e)),!this.conn&&(this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let n=this.onMessage(s=>{s.ref===t&&(this.off([n]),e(Date.now()-i))});return!0}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),zg,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===ae.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(we.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case ae.connecting:return"connecting";case ae.open:return"open";case ae.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new $g(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:n,ref:s,join_ref:r}=e;this.log("push",`${t} ${i} (${r}, ${s})`,n)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:n,payload:s,ref:r,join_ref:o}=t;r&&r===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${n} ${r&&"("+r+")"||""}`,s);for(let a=0;a<this.channels.length;a++){let l=this.channels[a];!l.isMember(i,n,s,o)||l.trigger(n,s,r,o)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,l]=this.stateChangeCallbacks.message[a];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var Kc="consecutive-reloads",Ug=10,Xg=5e3,Yg=1e4,qg=3e4,Gc=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],It="data-phx-component",Eo="data-phx-link",Jg="track-static",Kg="data-phx-link-state",Vt="data-phx-ref",ii="data-phx-ref-src",Zc="track-uploads",ni="data-phx-upload-ref",zo="data-phx-preflighted-refs",Gg="data-phx-done-refs",Ec="drop-target",Bo="data-phx-active-refs",tr="phx:live-file:updated",Ho="data-phx-skip",Pc="data-phx-prune",Tc="page-loading",Mc="phx-connected",Tn="phx-loading",Po="phx-no-feedback",$s="phx-error",Oc="phx-client-error",To="phx-server-error",Ni="data-phx-parent-id",Wo="data-phx-main",Bn="data-phx-root-id",Qc="viewport-top",th="viewport-bottom",Zg="trigger-action",ir="feedback-for",jo="phx-has-focused",Qg=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],eh=["checkbox","radio"],nr="phx-has-submitted",je="data-phx-session",Hi=`[${je}]`,Dc="data-phx-sticky",Fn="data-phx-static",Mo="data-phx-readonly",Us="data-phx-disabled",Vo="disable-with",Xs="data-phx-disable-with-restore",Mn="hook",tm="debounce",em="throttle",sr="update",Oo="stream",On="data-phx-stream",im="key",le="phxPrivate",Lc="auto-recover",Ys="phx:live-socket:debug",Do="phx:live-socket:profiling",Lo="phx:live-socket:latency-sim",nm="progress",Rc="mounted",sm=1,rm=200,om="phx-",am=3e4,Dn="debounce-trigger",qs="throttled",Ic="debounce-prev-key",lm={debounce:300,throttle:300},Ro="d",ce="s",Rt="c",Fc="e",Nc="r",Bc="t",cm="p",Hc="stream",hm=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return St("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},St=(e,t)=>console.error&&console.error(e,t),Be=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function dm(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,n=t.length;i<n;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var um=(e,t,i,n)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n)},Io=e=>typeof e=="function"?e:function(){return e},er=e=>JSON.parse(JSON.stringify(e)),Nn=(e,t,i)=>{do{if(e.matches(`[${t}]`)&&!e.disabled)return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(Hi)));return null},Ln=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),fm=(e,t)=>JSON.stringify(e)===JSON.stringify(t),jc=e=>{for(let t in e)return!1;return!0},He=(e,t)=>e&&t(e),pm=function(e,t,i,n){e.forEach(s=>{new hm(s,i.config.chunk_size,n).upload()})},ih={canPushState(){return typeof history.pushState<"u"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,n,s){let r=this.getLocal(e,t,i),o=this.localKey(t,i),a=r===null?n:s(r);return e.setItem(o,JSON.stringify(a)),a},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&ih.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},he=ih,jt={byId(e){return document.getElementById(e)||St(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let n=Array.from(e.querySelectorAll(t));return i?n.forEach(i):n},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(ni)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${ni}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${It}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&jt.private(e,"destroyed"))},wantsNewTab(e){let t=e.ctrlKey||e.shiftKey||e.metaKey||e.button&&e.button===1,i=e.target instanceof HTMLAnchorElement&&e.target.hasAttribute("download"),n=e.target.getAttribute("target")==="_blank";return t||n||i},isUnloadableFormSubmit(e){return!e.defaultPrevented&&!this.wantsNewTab(e)},isNewPageHref(e,t){if(e.startsWith("mailto:")||e.startsWith("tel:"))return!1;let i;try{i=new URL(e)}catch{try{i=new URL(e,t)}catch{return!0}}return i.host===t.host&&i.protocol===t.protocol&&i.pathname===t.pathname&&i.search===t.search?i.hash===""&&!i.href.endsWith("#"):!0},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(je,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${Dc}]`)},findPhxChildren(e,t){return this.all(e,`${Hi}[${Ni}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t),n=t.reduce((s,r)=>{let o=`[${It}="${r}"] [${It}]`;return this.filterWithinSameLiveView(this.all(e,o),e).map(a=>parseInt(a.getAttribute(It))).forEach(a=>s.delete(a)),s},i);return n.size===0?new Set(t):n},filterWithinSameLiveView(e,t){return t.querySelector(Hi)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(je)!==null)return!1}},private(e,t){return e[le]&&e[le][t]},deletePrivate(e,t){e[le]&&delete e[le][t]},putPrivate(e,t,i){e[le]||(e[le]={}),e[le][t]=i},updatePrivate(e,t,i,n){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,n(i)):this.putPrivate(e,t,n(s))},copyPrivates(e,t){t[le]&&(e[le]=t[le])},putTitle(e){let t=document.querySelector("title");if(t){let{prefix:i,suffix:n}=t.dataset;document.title=`${i||""}${e}${n||""}`}else document.title=e},debounce(e,t,i,n,s,r,o,a){let l=e.getAttribute(i),c=e.getAttribute(s);l===""&&(l=n),c===""&&(c=r);let h=l||c;switch(h){case null:return a();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>a());return;default:let d=parseInt(h),u=()=>c?this.deletePrivate(e,qs):a(),f=this.incCycle(e,Dn,u);if(isNaN(d))return St(`invalid throttle/debounce value: ${h}`);if(c){let m=!1;if(t.type==="keydown"){let b=this.private(e,Ic);this.putPrivate(e,Ic,t.key),m=b!==t.key}if(!m&&this.private(e,qs))return!1;a(),this.putPrivate(e,qs,!0),setTimeout(()=>{o()&&this.triggerCycle(e,Dn)},d)}else setTimeout(()=>{o()&&this.triggerCycle(e,Dn,f)},d);let g=e.form;g&&this.once(g,"bind-debounce")&&g.addEventListener("submit",()=>{Array.from(new FormData(g).entries(),([m])=>{let b=g.querySelector(`[name="${m}"]`);this.incCycle(b,Dn),this.deletePrivate(b,qs)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,Dn))}},triggerCycle(e,t,i){let[n,s]=this.private(e,t);i||(i=n),i===n&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[n]=this.private(e,t)||[0,i];return n++,this.putPrivate(e,t,[n,i]),n},maybeAddPrivateHooks(e,t,i){e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(i))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},maybeHideFeedback(e,t,i){if(!(this.private(t,jo)||this.private(t,nr))){let n=[t.name];t.name.endsWith("[]")&&n.push(t.name.slice(0,-2));let s=n.map(r=>`[${i}="${r}"]`).join(", ");jt.all(e,s,r=>r.classList.add(Po))}},resetForm(e,t){Array.from(e.elements).forEach(i=>{let n=`[${t}="${i.id}"],
                   [${t}="${i.name}"],
                   [${t}="${i.name.replace(/\[\]$/,"")}"]`;this.deletePrivate(i,jo),this.deletePrivate(i,nr),this.all(document,n,s=>{s.classList.add(Po)})})},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,Po)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(Ni)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(Dc)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${Ni}]`)[0]},dispatchEvent(e,t,i={}){let s={bubbles:i.bubbles===void 0?!0:!!i.bubbles,cancelable:!0,detail:i.detail||{}},r=t==="click"?new MouseEvent("click",s):new CustomEvent(t,s);e.dispatchEvent(r)},cloneNode(e,t){if(typeof t>"u")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let n=i.exclude||[],s=i.isIgnored,r=t.attributes;for(let a=r.length-1;a>=0;a--){let l=r[a].name;n.indexOf(l)<0&&e.setAttribute(l,t.getAttribute(l))}let o=e.attributes;for(let a=o.length-1;a>=0;a--){let l=o[a].name;s?l.startsWith("data-")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||jt.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!jt.isTextualInput(e))return;let n=e.matches(":focus");e.readOnly&&e.blur(),n||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&eh.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return Qg.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let n=e.getAttribute(Vt);if(n===null)return!0;let s=e.getAttribute(ii);return jt.isFormInput(e)||e.getAttribute(i)!==null?(jt.isUploadInput(e)&&jt.mergeAttrs(e,t,{isIgnored:!0}),jt.putPrivate(e,Vt,t),!1):(Gc.forEach(r=>{e.classList.contains(r)&&t.classList.add(r)}),t.setAttribute(Vt,n),t.setAttribute(ii,s),!0)},cleanChildNodes(e,t){if(jt.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(n=>{n.id||(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()===""||St(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),i.push(n))}),i.forEach(n=>n.remove())}},replaceRootContainer(e,t,i){let n=new Set(["id",je,Fn,Wo,Bn]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!n.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!n.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(r=>s.setAttribute(r,i[r])),n.forEach(r=>s.setAttribute(r,e.getAttribute(r))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let n=(jt.private(e,"sticky")||[]).find(([s])=>t===s);if(n){let[s,r,o]=n;return o}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([n,s])=>n!==t))},putSticky(e,t,i){let n=i(e);this.updatePrivate(e,"sticky",[],s=>{let r=s.findIndex(([o])=>t===o);return r>=0?s[r]=[t,i,n]:s.push([t,i,n]),s})},applyStickyOperations(e){let t=jt.private(e,"sticky");!t||t.forEach(([i,n,s])=>this.putSticky(e,i,n))}},S=jt,Fo=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(Bo).split(",").indexOf(wt.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(zo).split(",").indexOf(wt.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=wt.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(tr,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{wt.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.fileEl.removeEventListener(tr,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),wt.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(tr,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(Bo).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||St(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:pm}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||St(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},gm=0,wt=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(gm++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return S.findUploadInputs(e).forEach(i=>{i.getAttribute(zo)!==i.getAttribute(Gg)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},r=e.getAttribute(ni);i[r]=i[r]||[],s.ref=this.genFileRef(n),s.last_modified=n.lastModified,s.name=n.name||s.ref,s.relative_path=n.webkitRelativePath,s.type=n.type,s.size=n.size,i[r].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(ni),S.putPrivate(e,"files",[])}static untrackFile(e,t){S.putPrivate(e,"files",S.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t,i){if(e.getAttribute("multiple")!==null){let n=t.filter(s=>!this.activeFiles(e).find(r=>Object.is(r,s)));S.putPrivate(e,"files",this.activeFiles(e).concat(n)),e.value=null}else i&&i.files.length>0&&(e.files=i.files),S.putPrivate(e,"files",t)}static activeFileInputs(e){let t=S.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(S.private(e,"files")||[]).filter(t=>Fo.isActive(e,t))}static inputsAwaitingPreflight(e){let t=S.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!Fo.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from(wt.filesAwaitingPreflight(e)||[]).map(n=>new Fo(e,n,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),s));let n=this._entries.reduce((s,r)=>{let{name:o,callback:a}=r.uploader(i.uploaders);return s[o]=s[o]||{callback:a,entries:[]},s[o].entries.push(r),s},{});for(let s in n){let{callback:r,entries:o}=n[s];r(o,t,e,i)}}},mm={focusMain(){let e=document.querySelector("main h1, main, h1");if(e){let t=e.tabIndex;e.tabIndex=-1,e.focus(),e.tabIndex=t}},anyOf(e,t){return t.find(i=>e instanceof i)},isFocusable(e,t){return e instanceof HTMLAnchorElement&&e.rel!=="ignore"||e instanceof HTMLAreaElement&&e.href!==void 0||!e.disabled&&this.anyOf(e,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||e instanceof HTMLIFrameElement||e.tabIndex>0||!t&&e.tabIndex===0&&e.getAttribute("tabindex")!==null&&e.getAttribute("aria-hidden")!=="true"},attemptFocus(e,t){if(this.isFocusable(e,t))try{e.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(e)},focusFirstInteractive(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(e){let t=e.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},Bi=mm,nh={LiveFileUpload:{activeRefs(){return this.el.getAttribute(Bo)},preflightedRefs(){return this.el.getAttribute(zo)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(tr))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(ni)),wt.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>Bi.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>Bi.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&Bi.focusFirst(this.el)}}},Vc=()=>document.documentElement.scrollTop||document.body.scrollTop,$o=()=>window.innerHeight||document.documentElement.clientHeight,bm=e=>{let t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.top<=$o()},vm=e=>{let t=e.getBoundingClientRect();return t.right>=0&&t.left>=0&&t.bottom<=$o()},zc=e=>{let t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.top<=$o()};nh.InfiniteScroll={mounted(){let e=Vc(),t=!1,i=500,n=null,s=this.throttle(i,(a,l)=>{n=()=>!0,this.liveSocket.execJSHookPush(this.el,a,{id:l.id,_overran:!0},()=>{n=null})}),r=this.throttle(i,(a,l)=>{n=()=>l.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{n=null,zc(l)||l.scrollIntoView({block:"start"})})}),o=this.throttle(i,(a,l)=>{n=()=>l.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{n=null,zc(l)||l.scrollIntoView({block:"end"})})});this.onScroll=a=>{let l=Vc();if(n)return e=l,n();let c=this.el.getBoundingClientRect(),h=this.el.getAttribute(this.liveSocket.binding("viewport-top")),d=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),u=this.el.lastElementChild,f=this.el.firstElementChild,g=l<e,m=l>e;g&&h&&!t&&c.top>=0?(t=!0,s(h,f)):m&&t&&c.top<=0&&(t=!1),h&&g&&bm(f)?r(h,f):d&&m&&vm(u)&&o(d,u),e=l},window.addEventListener("scroll",this.onScroll)},destroyed(){window.removeEventListener("scroll",this.onScroll)},throttle(e,t){let i=0,n;return(...s)=>{let r=Date.now(),o=e-(r-i);o<=0||o>e?(n&&(clearTimeout(n),n=null),i=r,t(...s)):n||(n=setTimeout(()=>{i=Date.now(),n=null,t(...s)},o))}}};var ym=nh,xm=class{constructor(e,t,i){let n=new Set,s=new Set([...t.children].map(o=>o.id)),r=[];Array.from(e.children).forEach(o=>{if(o.id&&(n.add(o.id),s.has(o.id))){let a=o.previousElementSibling&&o.previousElementSibling.id;r.push({elementId:o.id,previousElementId:a})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=r,this.elementIdsToAdd=[...s].filter(o=>!n.has(o))}perform(){let e=S.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?He(document.getElementById(t.previousElementId),i=>{He(document.getElementById(t.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",n)})}):He(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{He(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},Wc=11;function _m(e,t){var i=t.attributes,n,s,r,o,a;if(!(t.nodeType===Wc||e.nodeType===Wc)){for(var l=i.length-1;l>=0;l--)n=i[l],s=n.name,r=n.namespaceURI,o=n.value,r?(s=n.localName||s,a=e.getAttributeNS(r,s),a!==o&&(n.prefix==="xmlns"&&(s=n.name),e.setAttributeNS(r,s,o))):(a=e.getAttribute(s),a!==o&&e.setAttribute(s,o));for(var c=e.attributes,h=c.length-1;h>=0;h--)n=c[h],s=n.name,r=n.namespaceURI,r?(s=n.localName||s,t.hasAttributeNS(r,s)||e.removeAttributeNS(r,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var Js,wm="http://www.w3.org/1999/xhtml",Mt=typeof document>"u"?void 0:document,Sm=!!Mt&&"content"in Mt.createElement("template"),km=!!Mt&&Mt.createRange&&"createContextualFragment"in Mt.createRange();function Am(e){var t=Mt.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function Cm(e){Js||(Js=Mt.createRange(),Js.selectNode(Mt.body));var t=Js.createContextualFragment(e);return t.childNodes[0]}function Em(e){var t=Mt.createElement("body");return t.innerHTML=e,t.childNodes[0]}function Pm(e){return e=e.trim(),Sm?Am(e):km?Cm(e):Em(e)}function Ks(e,t){var i=e.nodeName,n=t.nodeName,s,r;return i===n?!0:(s=i.charCodeAt(0),r=n.charCodeAt(0),s<=90&&r>=97?i===n.toUpperCase():r<=90&&s>=97?n===i.toUpperCase():!1)}function Tm(e,t){return!t||t===wm?Mt.createElement(e):Mt.createElementNS(t,e)}function Mm(e,t){for(var i=e.firstChild;i;){var n=i.nextSibling;t.appendChild(i),i=n}return t}function No(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var $c={OPTION:function(e,t){var i=e.parentNode;if(i){var n=i.nodeName.toUpperCase();n==="OPTGROUP"&&(i=i.parentNode,n=i&&i.nodeName.toUpperCase()),n==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}No(e,t,"selected")},INPUT:function(e,t){No(e,t,"checked"),No(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var n=e.firstChild;if(n){var s=n.nodeValue;if(s==i||!i&&s==e.placeholder)return;n.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,n=0,s=e.firstChild,r,o;s;)if(o=s.nodeName&&s.nodeName.toUpperCase(),o==="OPTGROUP")r=s,s=r.firstChild;else{if(o==="OPTION"){if(s.hasAttribute("selected")){i=n;break}n++}s=s.nextSibling,!s&&r&&(s=r.nextSibling,r=null)}e.selectedIndex=i}}},Rn=1,Uc=11,Xc=3,Yc=8;function Ne(){}function Om(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function Dm(e){return function(i,n,s){if(s||(s={}),typeof n=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var r=n;n=Mt.createElement("html"),n.innerHTML=r}else n=Pm(n);else n.nodeType===Uc&&(n=n.firstElementChild);var o=s.getNodeKey||Om,a=s.onBeforeNodeAdded||Ne,l=s.onNodeAdded||Ne,c=s.onBeforeElUpdated||Ne,h=s.onElUpdated||Ne,d=s.onBeforeNodeDiscarded||Ne,u=s.onNodeDiscarded||Ne,f=s.onBeforeElChildrenUpdated||Ne,g=s.skipFromChildren||Ne,m=s.addChild||function(T,O){return T.appendChild(O)},b=s.childrenOnly===!0,v=Object.create(null),x=[];function w(T){x.push(T)}function p(T,O){if(T.nodeType===Rn)for(var F=T.firstChild;F;){var I=void 0;O&&(I=o(F))?w(I):(u(F),F.firstChild&&p(F,O)),F=F.nextSibling}}function y(T,O,F){d(T)!==!1&&(O&&O.removeChild(T),u(T),p(T,F))}function _(T){if(T.nodeType===Rn||T.nodeType===Uc)for(var O=T.firstChild;O;){var F=o(O);F&&(v[F]=O),_(O),O=O.nextSibling}}_(i);function A(T){l(T);for(var O=T.firstChild;O;){var F=O.nextSibling,I=o(O);if(I){var W=v[I];W&&Ks(O,W)?(O.parentNode.replaceChild(W,O),E(W,O)):A(O)}else A(O);O=F}}function C(T,O,F){for(;O;){var I=O.nextSibling;(F=o(O))?w(F):y(O,T,!0),O=I}}function E(T,O,F){var I=o(O);I&&delete v[I],!(!F&&(c(T,O)===!1||(e(T,O),h(T),f(T,O)===!1)))&&(T.nodeName!=="TEXTAREA"?M(T,O):$c.TEXTAREA(T,O))}function M(T,O){var F=g(T),I=O.firstChild,W=T.firstChild,Q,rt,ot,at,tt;t:for(;I;){for(at=I.nextSibling,Q=o(I);!F&&W;){if(ot=W.nextSibling,I.isSameNode&&I.isSameNode(W)){I=at,W=ot;continue t}rt=o(W);var Ut=W.nodeType,gt=void 0;if(Ut===I.nodeType&&(Ut===Rn?(Q?Q!==rt&&((tt=v[Q])?ot===tt?gt=!1:(T.insertBefore(tt,W),rt?w(rt):y(W,T,!0),W=tt):gt=!1):rt&&(gt=!1),gt=gt!==!1&&Ks(W,I),gt&&E(W,I)):(Ut===Xc||Ut==Yc)&&(gt=!0,W.nodeValue!==I.nodeValue&&(W.nodeValue=I.nodeValue))),gt){I=at,W=ot;continue t}rt?w(rt):y(W,T,!0),W=ot}if(Q&&(tt=v[Q])&&Ks(tt,I))F||m(T,tt),E(tt,I);else{var Qt=a(I);Qt!==!1&&(Qt&&(I=Qt),I.actualize&&(I=I.actualize(T.ownerDocument||Mt)),m(T,I),A(I))}I=at,W=ot}C(T,W,rt);var Xt=$c[T.nodeName];Xt&&Xt(T,O)}var P=i,L=P.nodeType,H=n.nodeType;if(!b){if(L===Rn)H===Rn?Ks(i,n)||(u(i),P=Mm(i,Tm(n.nodeName,n.namespaceURI))):P=n;else if(L===Xc||L===Yc){if(H===L)return P.nodeValue!==n.nodeValue&&(P.nodeValue=n.nodeValue),P;P=n}}if(P===n)u(i);else{if(n.isSameNode&&n.isSameNode(P))return;if(E(P,n,b),x)for(var X=0,j=x.length;X<j;X++){var B=v[x[X]];B&&y(B,B.parentNode,!1)}}return!b&&P!==i&&i.parentNode&&(P.actualize&&(P=P.actualize(i.ownerDocument||Mt)),i.parentNode.replaceChild(P,i)),P}}var Lm=Dm(_m),qc=Lm,Gs=class{static patchEl(e,t,i){qc(e,t,{childrenOnly:!1,onBeforeElUpdated:(n,s)=>{if(i&&i.isSameNode(n)&&S.isFormInput(n))return S.mergeFocusedInput(n,s),!1}})}constructor(e,t,i,n,s,r){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=n,this.streams=s,this.streamInserts={},this.targetCID=r,this.cidPatch=Be(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){let e=this.liveSocket.binding(sr);S.all(this.container,`[${e}=${Oo}]`,t=>t.innerHTML=""),S.all(this.container,`[${e}=append] > *, [${e}=prepend] > *`,t=>{t.setAttribute(Pc,"")})}perform(){let{view:e,liveSocket:t,container:i,html:n}=this,s=this.isCIDPatch()?this.targetCIDContainer(n):i;if(this.isCIDPatch()&&!s)return;let r=t.getActiveElement(),{selectionStart:o,selectionEnd:a}=r&&S.hasSelectionRange(r)?r:{},l=t.binding(sr),c=t.binding(ir),h=t.binding(Vo),d=t.binding(Qc),u=t.binding(th),f=t.binding(Zg),g=[],m=[],b=[],v=[],x=null,w=t.time("premorph container prep",()=>this.buildDiffHTML(i,n,l,s));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{this.streams.forEach(([p,y,_,A])=>{Object.entries(y).forEach(([C,[E,M]])=>{this.streamInserts[C]={ref:p,streamAt:E,limit:M}}),A!==void 0&&S.all(i,`[${On}="${p}"]`,C=>{this.removeStreamChildElement(C)}),_.forEach(C=>{let E=i.querySelector(`[id="${C}"]`);E&&this.removeStreamChildElement(E)})}),qc(s,w,{childrenOnly:s.getAttribute(It)===null,getNodeKey:p=>S.isPhxDestroyed(p)?null:p.id,skipFromChildren:p=>p.getAttribute(l)===Oo,addChild:(p,y)=>{let{ref:_,streamAt:A,limit:C}=this.getStreamInsert(y);if(_===void 0)return p.appendChild(y);if(S.putSticky(y,On,M=>M.setAttribute(On,_)),A===0)p.insertAdjacentElement("afterbegin",y);else if(A===-1)p.appendChild(y);else if(A>0){let M=Array.from(p.children)[A];p.insertBefore(y,M)}let E=C!==null&&Array.from(p.children);C&&C<0&&E.length>C*-1?E.slice(0,E.length+C).forEach(M=>this.removeStreamChildElement(M)):C&&C>=0&&E.length>C&&E.slice(C).forEach(M=>this.removeStreamChildElement(M))},onBeforeNodeAdded:p=>(S.maybeAddPrivateHooks(p,d,u),this.trackBefore("added",p),p),onNodeAdded:p=>{p.getAttribute&&this.maybeReOrderStream(p),p instanceof HTMLImageElement&&p.srcset?p.srcset=p.srcset:p instanceof HTMLVideoElement&&p.autoplay&&p.play(),S.isNowTriggerFormExternal(p,f)&&(x=p),p.getAttribute&&p.getAttribute("name")&&m.push(p),(S.isPhxChild(p)&&e.ownsElement(p)||S.isPhxSticky(p)&&e.ownsElement(p.parentNode))&&this.trackAfter("phxChildAdded",p),g.push(p)},onNodeDiscarded:p=>this.onNodeDiscarded(p),onBeforeNodeDiscarded:p=>p.getAttribute&&p.getAttribute(Pc)!==null?!0:!(p.parentElement!==null&&p.id&&S.isPhxUpdate(p.parentElement,l,[Oo,"append","prepend"])||this.maybePendingRemove(p)||this.skipCIDSibling(p)),onElUpdated:p=>{S.isNowTriggerFormExternal(p,f)&&(x=p),b.push(p),this.maybeReOrderStream(p)},onBeforeElUpdated:(p,y)=>{if(S.cleanChildNodes(y,l),this.skipCIDSibling(y)||S.isPhxSticky(p))return!1;if(S.isIgnored(p,l)||p.form&&p.form.isSameNode(x))return this.trackBefore("updated",p,y),S.mergeAttrs(p,y,{isIgnored:!0}),b.push(p),S.applyStickyOperations(p),!1;if(p.type==="number"&&p.validity&&p.validity.badInput)return!1;if(!S.syncPendingRef(p,y,h))return S.isUploadInput(p)&&(this.trackBefore("updated",p,y),b.push(p)),S.applyStickyOperations(p),!1;if(S.isPhxChild(y)){let A=p.getAttribute(je);return S.mergeAttrs(p,y,{exclude:[Fn]}),A!==""&&p.setAttribute(je,A),p.setAttribute(Bn,this.rootID),S.applyStickyOperations(p),!1}return S.copyPrivates(y,p),r&&p.isSameNode(r)&&S.isFormInput(p)&&p.type!=="hidden"?(this.trackBefore("updated",p,y),S.mergeFocusedInput(p,y),S.syncAttrsToProps(p),b.push(p),S.applyStickyOperations(p),m.push(p),!1):(S.isPhxUpdate(y,l,["append","prepend"])&&v.push(new xm(p,y,y.getAttribute(l))),S.maybeAddPrivateHooks(y,d,u),S.syncAttrsToProps(y),S.applyStickyOperations(y),y.getAttribute("name")&&m.push(y),this.trackBefore("updated",p,y),!0)}})}),t.isDebugEnabled()&&dm(),v.length>0&&t.time("post-morph append/prepend restoration",()=>{v.forEach(p=>p.perform())}),m.forEach(p=>{S.maybeHideFeedback(s,p,c)}),t.silenceEvents(()=>S.restoreFocus(r,o,a)),S.dispatchEvent(document,"phx:update"),g.forEach(p=>this.trackAfter("added",p)),b.forEach(p=>this.trackAfter("updated",p)),this.transitionPendingRemoves(),x&&(t.unload(),x.submit()),!0}onNodeDiscarded(e){(S.isPhxChild(e)||S.isPhxSticky(e))&&this.liveSocket.destroyViewByEl(e),this.trackAfter("discarded",e)}maybePendingRemove(e){return e.getAttribute&&e.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(e),!0):!1}removeStreamChildElement(e){this.maybePendingRemove(e)||(e.remove(),this.onNodeDiscarded(e))}getStreamInsert(e){return(e.id?this.streamInserts[e.id]:{})||{}}maybeReOrderStream(e){let{ref:t,streamAt:i,limit:n}=this.getStreamInsert(e);if(i!==void 0){if(S.putSticky(e,On,s=>s.setAttribute(On,t)),i===0)e.parentElement.insertBefore(e,e.parentElement.firstElementChild);else if(i>0){let s=Array.from(e.parentElement.children),r=s.indexOf(e);if(i>=s.length-1)e.parentElement.appendChild(e);else{let o=s[i];r>i?e.parentElement.insertBefore(e,o):e.parentElement.insertBefore(e,o.nextElementSibling)}}}}transitionPendingRemoves(){let{pendingRemoves:e,liveSocket:t}=this;e.length>0&&(t.transitionRemoves(e),t.requestDOMUpdate(()=>{e.forEach(i=>{let n=S.firstPhxChild(i);n&&t.destroyViewByEl(n),i.remove()}),this.trackAfter("transitionsDiscarded",e)}))}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(Ho)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=S.findComponentNodeList(this.container,this.targetCID);return i.length===0&&S.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,n){let s=this.isCIDPatch(),r=s&&n.getAttribute(It)===this.targetCID.toString();if(!s||r)return t;{let o=null,a=document.createElement("template");o=S.cloneNode(n);let[l,...c]=S.findComponentNodeList(o,this.targetCID);return a.innerHTML=t,c.forEach(h=>h.remove()),Array.from(o.childNodes).forEach(h=>{h.id&&h.nodeType===Node.ELEMENT_NODE&&h.getAttribute(It)!==this.targetCID.toString()&&(h.setAttribute(Ho,""),h.innerHTML="")}),Array.from(a.content.childNodes).forEach(h=>o.insertBefore(h,l)),l.remove(),o.outerHTML}}indexOf(e,t){return Array.from(e.children).indexOf(t)}},Jc=class{static extract(e){let{[Nc]:t,[Fc]:i,[Bc]:n}=e;return delete e[Nc],delete e[Fc],delete e[Bc],{diff:e,title:n,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){let[t,i]=this.recursiveToString(this.rendered,this.rendered[Rt],e);return[t,i]}recursiveToString(e,t=e[Rt],i){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i,streams:new Set};return this.toOutputBuffer(e,null,n),[n.buffer,n.streams]}componentCIDs(e){return Object.keys(e[Rt]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[Rt]?Object.keys(e).length===1:!1}getComponent(e,t){return e[Rt][t]}mergeDiff(e){let t=e[Rt],i={};if(delete e[Rt],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[Rt]=this.rendered[Rt]||{},t){let n=this.rendered[Rt];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],n,t,i);for(let s in t)n[s]=t[s];e[Rt]=t}}cachedFindComponent(e,t,i,n,s){if(s[e])return s[e];{let r,o,a=t[ce];if(Be(a)){let l;a>0?l=this.cachedFindComponent(a,n[a],i,n,s):l=i[-a],o=l[ce],r=this.cloneMerge(l,t),r[ce]=o}else r=t[ce]!==void 0?t:this.cloneMerge(i[e]||{},t);return s[e]=r,r}}mutableMerge(e,t){return t[ce]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let n=t[i],s=e[i];Ln(n)&&n[ce]===void 0&&Ln(s)?this.doMutableMerge(s,n):e[i]=n}}cloneMerge(e,t){let i={...e,...t};for(let n in i){let s=t[n],r=e[n];Ln(s)&&s[ce]===void 0&&Ln(r)&&(i[n]=this.cloneMerge(r,s))}return i}componentToString(e){let[t,i]=this.recursiveCIDToString(this.rendered[Rt],e);return[t,i]}pruneCIDs(e){e.forEach(t=>delete this.rendered[Rt][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[ce]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[Ro])return this.comprehensionToBuffer(e,t,i);let{[ce]:n}=e;n=this.templateStatic(n,t),i.buffer+=n[0];for(let s=1;s<n.length;s++)this.dynamicToBuffer(e[s-1],t,i),i.buffer+=n[s]}comprehensionToBuffer(e,t,i){let{[Ro]:n,[ce]:s,[Hc]:r}=e,[o,a,l,c]=r||[null,{},[],null];s=this.templateStatic(s,t);let h=t||e[cm];for(let d=0;d<n.length;d++){let u=n[d];i.buffer+=s[0];for(let f=1;f<s.length;f++)this.dynamicToBuffer(u[f-1],h,i),i.buffer+=s[f]}r!==void 0&&(e[Ro].length>0||l.length>0||c)&&(delete e[Hc],i.streams.add(r))}dynamicToBuffer(e,t,i){if(typeof e=="number"){let[n,s]=this.recursiveCIDToString(i.components,e,i.onlyCids);i.buffer+=n,i.streams=new Set([...i.streams,...s])}else Ln(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let n=e[t]||St(`no component for CID ${t}`,e),s=document.createElement("template"),[r,o]=this.recursiveToString(n,e,i);s.innerHTML=r;let a=s.content,l=i&&!i.has(t),[c,h]=Array.from(a.childNodes).reduce(([d,u],f,g)=>f.nodeType===Node.ELEMENT_NODE?f.getAttribute(It)?[d,!0]:(f.setAttribute(It,t),f.id||(f.id=`${this.parentViewId()}-${t}-${g}`),l&&(f.setAttribute(Ho,""),f.innerHTML=""),[!0,u]):f.nodeValue.trim()!==""?(St(`only HTML element tags are allowed at the root of components.

got: "${f.nodeValue.trim()}"

within:
`,s.innerHTML.trim()),f.replaceWith(this.createSpan(f.nodeValue,t)),[!0,u]):(f.remove(),[d,u]),[!1,!1]);return!c&&!h?(St(`expected at least one HTML element tag inside a component, but the component is empty:
`,s.innerHTML.trim()),[this.createSpan("",t).outerHTML,o]):!c&&h?(St("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",s.innerHTML.trim()),[s.innerHTML,o]):[s.innerHTML,o]}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(It,t),i}},Rm=1,In=class{static makeID(){return Rm++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(this.el,null,e,t,i)}pushEventTo(e,t,i={},n=function(){}){return this.__view.withinTargets(e,(s,r)=>s.pushHookEvent(this.el,r,t,i,n))}handleEvent(e,t){let i=(n,s)=>s?e:t(n.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,n=>n.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},Zs=null,Im={exec(e,t,i,n,s){let[r,o]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[r,o]]).forEach(([l,c])=>{l===r&&o.data&&(c.data=Object.assign(c.data||{},o.data),c.callback=c.callback||o.callback),this.filterToEls(n,c).forEach(h=>{this[`exec_${l}`](e,t,i,n,h,c)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_exec(e,t,i,n,s,[r,o]){(o?S.all(document,o):[n]).forEach(l=>{let c=l.getAttribute(r);if(!c)throw new Error(`expected ${r} to contain JS command on "${o}"`);i.liveSocket.execJS(l,c,e)})},exec_dispatch(e,t,i,n,s,{to:r,event:o,detail:a,bubbles:l}){a=a||{},a.dispatcher=n,S.dispatchEvent(s,o,{detail:a,bubbles:l})},exec_push(e,t,i,n,s,r){if(!i.isConnected())return;let{event:o,data:a,target:l,page_loading:c,loading:h,value:d,dispatcher:u,callback:f}=r,g={loading:h,value:d,target:l,page_loading:!!c},m=e==="change"&&u?u:n,b=l||m.getAttribute(i.binding("target"))||m;i.withinTargets(b,(v,x)=>{if(e==="change"){let{newCid:w,_target:p}=r;p=p||(S.isFormInput(n)?n.name:void 0),p&&(g._target=p),v.pushInput(n,x,w,o||t,g,f)}else if(e==="submit"){let{submitter:w}=r;v.submitForm(n,x,o||t,w,g,f)}else v.pushEvent(e,n,x,o||t,a,g,f)})},exec_navigate(e,t,i,n,s,{href:r,replace:o}){i.liveSocket.historyRedirect(r,o?"replace":"push")},exec_patch(e,t,i,n,s,{href:r,replace:o}){i.liveSocket.pushHistoryPatch(r,o?"replace":"push",n)},exec_focus(e,t,i,n,s){window.requestAnimationFrame(()=>Bi.attemptFocus(s))},exec_focus_first(e,t,i,n,s){window.requestAnimationFrame(()=>Bi.focusFirstInteractive(s)||Bi.focusFirst(s))},exec_push_focus(e,t,i,n,s){window.requestAnimationFrame(()=>Zs=s||n)},exec_pop_focus(e,t,i,n,s){window.requestAnimationFrame(()=>{Zs&&Zs.focus(),Zs=null})},exec_add_class(e,t,i,n,s,{names:r,transition:o,time:a}){this.addOrRemoveClasses(s,r,[],o,a,i)},exec_remove_class(e,t,i,n,s,{names:r,transition:o,time:a}){this.addOrRemoveClasses(s,[],r,o,a,i)},exec_transition(e,t,i,n,s,{time:r,transition:o}){this.addOrRemoveClasses(s,[],[],o,r,i)},exec_toggle(e,t,i,n,s,{display:r,ins:o,outs:a,time:l}){this.toggle(e,i,s,r,o,a,l)},exec_show(e,t,i,n,s,{display:r,transition:o,time:a}){this.show(e,i,s,r,o,a)},exec_hide(e,t,i,n,s,{display:r,transition:o,time:a}){this.hide(e,i,s,r,o,a)},exec_set_attr(e,t,i,n,s,{attr:[r,o]}){this.setOrRemoveAttrs(s,[[r,o]],[])},exec_remove_attr(e,t,i,n,s,{attr:r}){this.setOrRemoveAttrs(s,[],[r])},show(e,t,i,n,s,r){this.isVisible(i)||this.toggle(e,t,i,n,s,null,r)},hide(e,t,i,n,s,r){this.isVisible(i)&&this.toggle(e,t,i,n,null,s,r)},toggle(e,t,i,n,s,r,o){let[a,l,c]=s||[[],[],[]],[h,d,u]=r||[[],[],[]];if(a.length>0||h.length>0)if(this.isVisible(i)){let f=()=>{this.addOrRemoveClasses(i,d,a.concat(l).concat(c)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,h,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,u,d))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(o,f,()=>{this.addOrRemoveClasses(i,[],h.concat(u)),S.putSticky(i,"toggle",g=>g.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let f=()=>{this.addOrRemoveClasses(i,l,h.concat(d).concat(u));let g=n||this.defaultDisplay(i);S.putSticky(i,"toggle",m=>m.style.display=g),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,c,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(o,f,()=>{this.addOrRemoveClasses(i,[],a.concat(c)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),S.putSticky(i,"toggle",f=>f.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start"));let f=n||this.defaultDisplay(i);S.putSticky(i,"toggle",g=>g.style.display=f),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,n,s,r){let[o,a,l]=n||[[],[],[]];if(o.length>0){let c=()=>this.addOrRemoveClasses(e,a.concat(o),[]),h=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(o).concat(a));return r.transition(s,c,h)}window.requestAnimationFrame(()=>{let[c,h]=S.getSticky(e,"classes",[[],[]]),d=t.filter(m=>c.indexOf(m)<0&&!e.classList.contains(m)),u=i.filter(m=>h.indexOf(m)<0&&e.classList.contains(m)),f=c.filter(m=>i.indexOf(m)<0).concat(d),g=h.filter(m=>t.indexOf(m)<0).concat(u);S.putSticky(e,"classes",m=>(m.classList.remove(...g),m.classList.add(...f),[f,g]))})},setOrRemoveAttrs(e,t,i){let[n,s]=S.getSticky(e,"attrs",[[],[]]),r=t.map(([l,c])=>l).concat(i),o=n.filter(([l,c])=>!r.includes(l)).concat(t),a=s.filter(l=>!r.includes(l)).concat(i);S.putSticky(e,"attrs",l=>(a.forEach(c=>l.removeAttribute(c)),o.forEach(([c,h])=>l.setAttribute(c,h)),[o,a]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?S.all(document,t):[e]},defaultDisplay(e){return{tr:"table-row",td:"table-cell"}[e.tagName.toLowerCase()]||"block"}},qt=Im,Qs=(e,t,i=[])=>{let{submitter:n,...s}=t,r=new FormData(e);n&&n.hasAttribute("name")&&n.form&&n.form===e&&r.append(n.name,n.value);let o=[];r.forEach((l,c,h)=>{l instanceof File&&o.push(c)}),o.forEach(l=>r.delete(l));let a=new URLSearchParams;for(let[l,c]of r.entries())(i.length===0||i.indexOf(l)>=0)&&a.append(l,c);for(let l in s)a.append(l,s[l]);return a.toString()},sh=class{constructor(e,t,i,n,s){this.isDead=!1,this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(r){r&&r()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}))}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(Wo)}connectParams(e){let t=this.liveSocket.params(this.el),i=S.all(document,`[${this.binding(Jg)}]`).map(n=>n.src||n.href).filter(n=>typeof n=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._live_referer=e,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(je)}getStatic(){let e=this.el.getAttribute(Fn);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};S.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(Mc,Tn,$s,Oc,To),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(Tn)}}execAll(e){S.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(Mc),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(Be(e))S.findComponentNodeList(this.el,e).length===0?St(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&St(`nothing found matching the phx-target selector "${e}"`),i.forEach(n=>this.liveSocket.owner(n,s=>t(s,n)))}}applyDiff(e,t,i){this.log(e,()=>["",er(t)]);let{diff:n,reply:s,events:r,title:o}=Jc.extract(t);i({diff:n,reply:s,events:r}),o&&window.requestAnimationFrame(()=>S.putTitle(o))}onJoin(e){let{rendered:t,container:i}=e;if(i){let[n,s]=i;this.el=S.replaceRootContainer(this.el,n,s)}this.childJoins=0,this.joinPending=!0,this.flash=null,he.dropLocal(this.liveSocket.localStorage,window.location.pathname,Kc),this.applyDiff("mount",t,({diff:n,events:s})=>{this.rendered=new Jc(this.id,n);let[r,o]=this.renderContainer(null,"join");this.dropPendingRefs();let a=this.formsForRecovery(r);this.joinCount++,a.length>0?a.forEach(([l,c,h],d)=>{this.pushFormRecovery(l,h,u=>{d===a.length-1&&this.onJoinComplete(u,r,o,s)})}):this.onJoinComplete(e,r,o,s)})}dropPendingRefs(){S.all(document,`[${ii}="${this.id}"][${Vt}]`,e=>{e.removeAttribute(Vt),e.removeAttribute(ii)})}onJoinComplete({live_patch:e},t,i,n){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i,n);S.findPhxChildrenInFragment(t,this.id).filter(r=>{let o=r.id&&this.el.querySelector(`[id="${r.id}"]`),a=o&&o.getAttribute(Fn);return a&&r.setAttribute(Fn,a),this.joinChild(r)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i,n)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)])}attachTrueDocEl(){this.el=S.byId(this.id),this.el.setAttribute(Bn,this.root.id)}execNewMounted(){let e=this.binding(Qc),t=this.binding(th);S.all(this.el,`[${e}], [${t}]`,i=>{S.maybeAddPrivateHooks(i,e,t),this.maybeAddNewHook(i)}),S.all(this.el,`[${this.binding(Mn)}], [data-phx-${Mn}]`,i=>{this.maybeAddNewHook(i)}),S.all(this.el,`[${this.binding(Rc)}]`,i=>this.maybeMounted(i))}applyJoinPatch(e,t,i,n){this.attachTrueDocEl();let s=new Gs(this,this.el,this.id,t,i,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(n),this.applyPendingUpdates(),e){let{kind:r,to:o}=e;this.liveSocket.historyPatch(o,r)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&S.isIgnored(e,this.binding(sr));if(i&&!e.isEqualNode(t)&&!(n&&fm(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(Rc)),i=t&&S.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),S.putPrivate(e,"mounted",!0))}maybeAddNewHook(e,t){let i=this.addHook(e);i&&i.__mounted()}performPatch(e,t){let i=[],n=!1,s=new Set;return e.after("added",r=>{this.liveSocket.triggerDOM("onNodeAdded",[r]),this.maybeAddNewHook(r),r.getAttribute&&this.maybeMounted(r)}),e.after("phxChildAdded",r=>{S.isPhxSticky(r)?this.liveSocket.joinRootViews():n=!0}),e.before("updated",(r,o)=>{this.triggerBeforeUpdateHook(r,o)&&s.add(r.id)}),e.after("updated",r=>{s.has(r.id)&&this.getHook(r).__updated()}),e.after("discarded",r=>{r.nodeType===Node.ELEMENT_NODE&&i.push(r)}),e.after("transitionsDiscarded",r=>this.afterElementsRemoved(r,t)),e.perform(),this.afterElementsRemoved(i,t),n}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{let s=S.all(n,`[${It}]`),r=S.all(n,`[${this.binding(Mn)}]`);s.concat(n).forEach(o=>{let a=this.componentID(o);Be(a)&&i.indexOf(a)===-1&&i.push(a)}),r.concat(n).forEach(o=>{let a=this.getHook(o);a&&this.destroyHook(a)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){S.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(Ni)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new sh(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{S.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):jc(e)||this.liveSocket.time("full patch complete",()=>{let[n,s]=this.renderContainer(e,"update"),r=new Gs(this,this.el,this.id,n,s,null);i=this.performPatch(r,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,[s,r]=this.rendered.toString(n);return[`<${i}>${s}</${i}>`,r]})}componentPatch(e,t){if(jc(e))return!1;let[i,n]=this.rendered.componentToString(t),s=new Gs(this,this.el,this.id,i,n,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[In.elementID(e)]}addHook(e){if(In.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Mn}`)||e.getAttribute(this.binding(Mn));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||St(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let n=new In(this,e,i);return this.viewHooks[In.elementID(n.el)]=n,n}else t!==null&&St(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[In.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let i in t)e(this.getChildById(i))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="reload")return this.log("error",()=>[`failed mount with ${e.status}. Falling back to page request`,e]),this.onRedirect({to:this.href});if(e.reason==="unauthorized"||e.reason==="stale")return this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href});if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.displayError([Tn,$s,To]),this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(rm)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([Tn,$s,To]):this.displayError([Tn,$s,Oc]))}displayError(e){this.isMain()&&S.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}pushWithReply(e,t,i,n=function(){}){if(!this.isConnected())return;let[s,[r],o]=e?e():[null,[],{}],a=function(){};return(o.page_loading||r&&r.getAttribute(this.binding(Tc))!==null)&&(a=this.liveSocket.withPageLoading({kind:"element",target:r})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,am).receive("ok",l=>{let c=h=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),a(),n(l,h)};l.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",l.diff,({diff:h,reply:d,events:u})=>{s!==null&&this.undoRefs(s),this.update(h,u),c(d)})}):(s!==null&&this.undoRefs(s),c(null))}))}undoRefs(e){!this.isConnected()||S.all(document,`[${ii}="${this.id}"][${Vt}="${e}"]`,t=>{let i=t.getAttribute(Us);t.removeAttribute(Vt),t.removeAttribute(ii),t.getAttribute(Mo)!==null&&(t.readOnly=!1,t.removeAttribute(Mo)),i!==null&&(t.disabled=i==="true",t.removeAttribute(Us)),Gc.forEach(r=>S.removeClass(t,r));let n=t.getAttribute(Xs);n!==null&&(t.innerText=n,t.removeAttribute(Xs));let s=S.private(t,Vt);if(s){let r=this.triggerBeforeUpdateHook(t,s);Gs.patchEl(t,s,this.liveSocket.getActiveElement()),r&&r.__updated(),S.deletePrivate(t,Vt)}})}putRef(e,t,i={}){let n=this.ref++,s=this.binding(Vo);return i.loading&&(e=e.concat(S.all(document,i.loading))),e.forEach(r=>{r.classList.add(`phx-${t}-loading`),r.setAttribute(Vt,n),r.setAttribute(ii,this.el.id);let o=r.getAttribute(s);o!==null&&(r.getAttribute(Xs)||r.setAttribute(Xs,r.innerText),o!==""&&(r.innerText=o),r.setAttribute("disabled",""))}),[n,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(It);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(Be(t))return t;let n=e.getAttribute(this.binding("target"));return Be(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return Be(e)?e:e?He(e.closest(`[${It}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",i,n]),!1;let[r,o,a]=this.putRef([e],"hook");return this.pushWithReply(()=>[r,o,a],"event",{type:"hook",event:i,value:n,cid:this.closestComponentID(t)},(l,c)=>s(c,r)),r}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let r=e.attributes[s].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&eh.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,r={},o){this.pushWithReply(()=>this.putRef([t],e,r),"event",{type:e,event:n,value:this.extractMeta(t,s,r.value),cid:this.targetComponentID(t,i,r)},(a,l)=>o&&o(l))}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,r)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(nm)),ref:e.getAttribute(ni),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,r)},n)})}pushInput(e,t,i,n,s,r){let o,a=Be(i)?i:this.targetComponentID(e.form,t),l=()=>this.putRef([e,e.form],"change",s),c,h=this.extractMeta(e.form);e.getAttribute(this.binding("change"))?c=Qs(e.form,{_target:s._target,...h},[e.name]):c=Qs(e.form,{_target:s._target,...h}),S.isUploadInput(e)&&e.files&&e.files.length>0&&wt.trackFiles(e,Array.from(e.files)),o=wt.serializeUploads(e);let d={type:"form",event:n,value:c,uploads:o,cid:a};this.pushWithReply(l,"event",d,u=>{if(S.showError(e,this.liveSocket.binding(ir)),S.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if(wt.filesAwaitingPreflight(e).length>0){let[f,g]=l();this.uploadFiles(e.form,t,f,a,m=>{r&&r(u),this.triggerAwaitingSubmit(e.form)})}}else r&&r(u)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,n,s,r]=t;this.cancelSubmit(e),r()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,n])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}disableForm(e,t={}){let i=h=>!(Nn(h,`${this.binding(sr)}=ignore`,h.form)||Nn(h,"data-phx-update=ignore",h.form)),n=h=>h.hasAttribute(this.binding(Vo)),s=h=>h.tagName=="BUTTON",r=h=>["INPUT","TEXTAREA","SELECT"].includes(h.tagName),o=Array.from(e.elements),a=o.filter(n),l=o.filter(s).filter(i),c=o.filter(r).filter(i);return l.forEach(h=>{h.setAttribute(Us,h.disabled),h.disabled=!0}),c.forEach(h=>{h.setAttribute(Mo,h.readOnly),h.readOnly=!0,h.files&&(h.setAttribute(Us,h.disabled),h.disabled=!0)}),e.setAttribute(this.binding(Tc),""),this.putRef([e].concat(a).concat(l).concat(c),"submit",t)}pushFormSubmit(e,t,i,n,s,r){let o=()=>this.disableForm(e,s),a=this.targetComponentID(e,t);if(wt.hasUploadsInProgress(e)){let[l,c]=o(),h=()=>this.pushFormSubmit(e,n,t,i,s,r);return this.scheduleSubmit(e,l,s,h)}else if(wt.inputsAwaitingPreflight(e).length>0){let[l,c]=o(),h=()=>[l,c,s];this.uploadFiles(e,t,l,a,d=>{let u=this.extractMeta(e),f=Qs(e,{submitter:n,...u});this.pushWithReply(h,"event",{type:"form",event:i,value:f,cid:a},r)})}else if(!(e.hasAttribute(Vt)&&e.classList.contains("phx-submit-loading"))){let l=this.extractMeta(e),c=Qs(e,{submitter:n,...l});this.pushWithReply(o,"event",{type:"form",event:i,value:c,cid:a},r)}}uploadFiles(e,t,i,n,s){let r=this.joinCount,o=wt.activeFileInputs(e),a=o.length;o.forEach(l=>{let c=new wt(l,this,()=>{a--,a===0&&s()});this.uploaders[l]=c;let h=c.entries().map(u=>u.toPreflightPayload()),d={ref:l.getAttribute(ni),entries:h,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",d]),this.pushWithReply(null,"allow_upload",d,u=>{if(this.log("upload",()=>["got preflight response",u]),u.error){this.undoRefs(i);let[f,g]=u.error;this.log("upload",()=>[`error for entry ${f}`,g])}else{let f=g=>{this.channel.onError(()=>{this.joinCount===r&&g()})};c.initAdapterUpload(u,f,this.liveSocket)}})})}dispatchUploads(e,t){let i=S.findUploadInputs(this.el).filter(n=>n.name===e);i.length===0?St(`no live file inputs found matching the name "${e}"`):i.length>1?St(`duplicate live file inputs found matching the name "${e}"`):S.dispatchEvent(i[0],Zc,{detail:{files:t}})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(n,s)=>{let r=this.binding("change"),o=Array.from(e.elements).filter(c=>S.isFormInput(c)&&c.name&&!c.hasAttribute(r));if(o.length===0)return;let a=o.find(c=>c.type!=="hidden")||a[0],l=e.getAttribute(this.binding(Lc))||e.getAttribute(this.binding("change"));qt.exec("change",l,n,a,["push",{_target:a.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let n=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,r=()=>this.liveSocket.redirect(window.location.href),o=this.pushWithReply(s,"live_patch",{url:e},a=>{this.liveSocket.requestDOMUpdate(()=>{a.link_redirect?this.liveSocket.replaceMain(e,null,i,n):(this.liveSocket.commitPendingLink(n)&&(this.href=e),this.applyPendingUpdates(),i&&i(n))})});o?o.receive("timeout",r):r()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,S.all(this.el,`form[${t}]`).filter(n=>n.id&&this.ownsElement(n)).filter(n=>n.elements.length>0).filter(n=>n.getAttribute(this.binding(Lc))!=="ignore").map(n=>{let s=i.content.querySelector(`form[id="${n.id}"][${t}="${n.getAttribute(t)}"]`);return s?[n,s,this.targetComponentID(s)]:[n,n,this.targetComponentID(n)]}).filter(([n,s,r])=>s)}maybePushComponentsDestroyed(e){let t=e.filter(i=>S.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(n=>t.indexOf(n)!==-1);let i=t.filter(n=>S.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},n=>{this.rendered.pruneCIDs(n.cids)})}))}ownsElement(e){let t=e.closest(Hi);return e.getAttribute(Ni)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,i,n,s={}){S.putPrivate(e,nr,!0);let r=this.liveSocket.binding(ir),o=Array.from(e.elements);o.forEach(a=>S.putPrivate(a,nr,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,s,()=>{o.forEach(a=>S.showError(a,r)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},rh=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||om,this.opts=i,this.params=Io(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(er(lm),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=er(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||sm,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||Ug,this.reloadJitterMin=i.reloadJitterMin||Xg,this.reloadJitterMax=i.reloadJitterMax||Yg,this.failsafeJitter=i.failsafeJitter||qg,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:Io(),onBeforeElUpdated:Io()},i.dom||{}),this.transitions=new Fm,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(Do)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(Ys)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(Ys)==="false"}enableDebug(){this.sessionStorage.setItem(Ys,"true")}enableProfiling(){this.sessionStorage.setItem(Do,"true")}disableDebug(){this.sessionStorage.setItem(Ys,"false")}disableProfiling(){this.sessionStorage.removeItem(Do)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(Lo,e)}disableLatencySim(){this.sessionStorage.removeItem(Lo)}getLatencySim(){let e=this.sessionStorage.getItem(Lo);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,n=>qt.exec(i,t,n,e))}execJSHookPush(e,t,i,n){this.withinOwners(e,s=>{qt.exec("hook",t,s,e,["push",{data:i,callback:n}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[n,s]=i();this.viewLogger(e,t,n,s)}else if(this.isDebugEnabled()){let[n,s]=i();um(e,t,n,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,n=>{let s=this.getLatencySim();s?setTimeout(()=>i(n),s):i(n)})}wrapPush(e,t,i){let n=this.getLatencySim(),s=e.joinCount;if(!n)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();let r={receives:[],receive(o,a){this.receives.push([o,a])}};return setTimeout(()=>{e.isDestroyed()||r.receives.reduce((o,[a,l])=>o.receive(a,l),i())},n),r}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,n=this.reloadJitterMax,s=Math.floor(Math.random()*(n-i+1))+i,r=he.updateLocal(this.localStorage,window.location.pathname,Kc,0,o=>o+1);r>this.maxReloads&&(s=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${r} consecutive reloads`]),r>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?ym[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinDeadView(){let e=document.body;if(e&&!this.isPhxView(e)&&!this.isPhxView(document.firstElementChild)){let t=this.newRootView(e);t.setHref(this.getHref()),t.joinDead(),this.main||(this.main=t),window.requestAnimationFrame(()=>t.execNewMounted())}}joinRootViews(){let e=!1;return S.all(document,`${Hi}:not([${Ni}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.hasAttribute(Wo)&&(this.main=i)}e=!0}),e}redirect(e,t){this.unload(),he.redirect(e,t)}replaceMain(e,t,i=null,n=this.setPendingLink(e)){let s=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let r=S.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(r,t,s),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((o,a)=>{o===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{S.findPhxSticky(document).forEach(l=>r.appendChild(l)),this.outgoingMainEl.replaceWith(r),this.outgoingMainEl=null,i&&requestAnimationFrame(i),a()})})}transitionRemoves(e){let t=this.binding("remove");e=e||S.all(document,`[${t}]`),e.forEach(i=>{this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(je)!==null}newRootView(e,t,i){let n=new sh(e,this,null,t,i);return this.roots[n.id]=n,n}owner(e,t){let i=He(e.closest(Hi),n=>this.getViewByEl(n))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(Bn);return He(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(Bn));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:e}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(t=>{if(t&&t.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),e||this.bindNav(),this.bindClicks(),e||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,i,n,s,r,o)=>{let a=s.getAttribute(this.binding(im)),l=t.key&&t.key.toLowerCase();if(a&&a.toLowerCase()!==l)return;let c={key:t.key,...this.eventMeta(i,t,s)};qt.exec(i,r,n,s,["push",{data:c}])}),this.bind({blur:"focusout",focus:"focusin"},(t,i,n,s,r,o)=>{if(!o){let a={key:t.key,...this.eventMeta(i,t,s)};qt.exec(i,r,n,s,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(t,i,n,s,r,o,a)=>{if(a==="window"){let l=this.eventMeta(i,t,s);qt.exec(i,o,n,s,["push",{data:l}])}}),window.addEventListener("dragover",t=>t.preventDefault()),window.addEventListener("drop",t=>{t.preventDefault();let i=He(Nn(t.target,this.binding(Ec)),r=>r.getAttribute(this.binding(Ec))),n=i&&document.getElementById(i),s=Array.from(t.dataTransfer.files||[]);!n||n.disabled||s.length===0||!(n.files instanceof FileList)||(wt.trackFiles(n,s,t.dataTransfer),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Zc,t=>{let i=t.target;if(!S.isUploadInput(i))return;let n=Array.from(t.detail.files||[]).filter(s=>s instanceof File||s instanceof Blob);wt.trackFiles(i,n),i.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let n=this.metadataCallbacks[e];return n?n(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let n=e[i];this.on(n,s=>{let r=this.binding(i),o=this.binding(`window-${i}`),a=s.target.getAttribute&&s.target.getAttribute(r);a?this.debounce(s.target,s,n,()=>{this.withinOwners(s.target,l=>{t(s,i,l,s.target,a,null)})}):S.all(document,`[${o}]`,l=>{let c=l.getAttribute(o);this.debounce(l,s,n,()=>{this.withinOwners(l,h=>{t(s,i,h,l,c,"window")})})})})}}bindClicks(){window.addEventListener("click",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let n=this.binding(t);window.addEventListener(e,s=>{let r=null;if(i)r=s.target.matches(`[${n}]`)?s.target:s.target.querySelector(`[${n}]`);else{let a=this.clickStartedAtTarget||s.target;r=Nn(a,n),this.dispatchClickAway(s,a),this.clickStartedAtTarget=null}let o=r&&r.getAttribute(n);if(!o){let a=s.target instanceof HTMLAnchorElement?s.target.getAttribute("href"):null;!i&&a!==null&&!S.wantsNewTab(s)&&S.isNewPageHref(a,window.location)&&this.unload();return}r.getAttribute("href")==="#"&&s.preventDefault(),!r.hasAttribute(Vt)&&this.debounce(r,s,"click",()=>{this.withinOwners(r,a=>{qt.exec("click",o,a,r,["push",{data:this.eventMeta("click",s,r)}])})})},i)}dispatchClickAway(e,t){let i=this.binding("click-away");S.all(document,`[${i}]`,n=>{n.isSameNode(t)||n.contains(t)||this.withinOwners(e.target,s=>{let r=n.getAttribute(i);qt.isVisible(n)&&qt.exec("click",r,s,n,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!he.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{he.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:n,root:s,scroll:r}=t.state||{},o=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&n===this.main.id?this.main.pushLinkPatch(o,null,()=>{this.maybeScroll(r)}):this.replaceMain(o,null,()=>{s&&this.replaceRootHistory(),this.maybeScroll(r)})})},!1),window.addEventListener("click",t=>{let i=Nn(t.target,Eo),n=i&&i.getAttribute(Eo);if(!n||!this.isConnected()||!this.main||S.wantsNewTab(t))return;let s=i.href,r=i.getAttribute(Kg);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==s&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(s,r,i);else if(n==="redirect")this.historyRedirect(s,r);else throw new Error(`expected ${Eo} to be "patch" or "redirect", got: ${n}`);let o=i.getAttribute(this.binding("click"));o&&this.requestDOMUpdate(()=>this.execJS(i,o,"click"))})},!1)}maybeScroll(e){typeof e=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,e)})}dispatchEvent(e,t={}){S.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){S.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>S.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){if(!this.isConnected())return he.redirect(e);this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(he.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){if(!this.isConnected())return he.redirect(e,i);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:s,host:r}=window.location;e=`${s}//${r}${e}`}let n=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,()=>{he.pushState(t,{type:"redirect",id:this.main.id,scroll:n},e),this.registerNewLocation(window.location),s()})})}replaceRootHistory(){he.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=er(e),!0)}bindForms(){let e=0,t=!1;this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit")),s=i.target.getAttribute(this.binding("change"));!t&&s&&!n&&(t=!0,i.preventDefault(),this.withinOwners(i.target,r=>{r.disableForm(i.target),window.requestAnimationFrame(()=>{S.isUnloadableFormSubmit(i)&&this.unload(),i.target.submit()})}))},!0),this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit"));if(!n){S.isUnloadableFormSubmit(i)&&this.unload();return}i.preventDefault(),i.target.disabled=!0,this.withinOwners(i.target,s=>{qt.exec("submit",n,s,i.target,["push",{submitter:i.submitter}])})},!1);for(let i of["change","input"])this.on(i,n=>{let s=this.binding("change"),r=n.target,o=r.getAttribute(s),a=r.form&&r.form.getAttribute(s),l=o||a;if(!l||r.type==="number"&&r.validity&&r.validity.badInput)return;let c=o?r:r.form,h=e;e++;let{at:d,type:u}=S.private(r,"prev-iteration")||{};d===h-1&&i!==u||(S.putPrivate(r,"prev-iteration",{at:h,type:i}),this.debounce(r,n,i,()=>{this.withinOwners(c,f=>{S.putPrivate(r,jo,!0),S.isTextualInput(r)||this.setActiveElement(r),qt.exec("change",l,f,r,["push",{_target:n.target.name,dispatcher:c}])})}))},!1);this.on("reset",i=>{let n=i.target;S.resetForm(n,this.binding(ir));let s=Array.from(n.elements).find(r=>r.type==="reset");window.requestAnimationFrame(()=>{s.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(e,t,i,n){if(i==="blur"||i==="focusout")return n();let s=this.binding(tm),r=this.binding(em),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(e,l=>{let c=()=>!l.isDestroyed()&&document.body.contains(e);S.debounce(e,t,s,o,r,a,c,()=>{n()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},Fm=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(e=>{clearTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let n=setTimeout(()=>{this.transitions.delete(n),i(),this.flushPendingOps()},e);this.transitions.add(n)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let e=this.pendingOps.shift();e&&(e(),this.flushPendingOps())}};var lt="top",ft="bottom",dt="right",ct="left",rr="auto",Ve=[lt,ft,dt,ct],Se="start",si="end",oh="clippingParents",or="viewport",ji="popper",ah="reference",Uo=Ve.reduce(function(e,t){return e.concat([t+"-"+Se,t+"-"+si])},[]),ar=[].concat(Ve,[rr]).reduce(function(e,t){return e.concat([t,t+"-"+Se,t+"-"+si])},[]),Nm="beforeRead",Bm="read",Hm="afterRead",jm="beforeMain",Vm="main",zm="afterMain",Wm="beforeWrite",$m="write",Um="afterWrite",lh=[Nm,Bm,Hm,jm,Vm,zm,Wm,$m,Um];function mt(e){return e?(e.nodeName||"").toLowerCase():null}function st(e){if(e==null)return window;if(e.toString()!=="[object Window]"){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function zt(e){var t=st(e).Element;return e instanceof t||e instanceof Element}function pt(e){var t=st(e).HTMLElement;return e instanceof t||e instanceof HTMLElement}function Vi(e){if(typeof ShadowRoot>"u")return!1;var t=st(e).ShadowRoot;return e instanceof t||e instanceof ShadowRoot}function Xm(e){var t=e.state;Object.keys(t.elements).forEach(function(i){var n=t.styles[i]||{},s=t.attributes[i]||{},r=t.elements[i];!pt(r)||!mt(r)||(Object.assign(r.style,n),Object.keys(s).forEach(function(o){var a=s[o];a===!1?r.removeAttribute(o):r.setAttribute(o,a===!0?"":a)}))})}function Ym(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach(function(n){var s=t.elements[n],r=t.attributes[n]||{},o=Object.keys(t.styles.hasOwnProperty(n)?t.styles[n]:i[n]),a=o.reduce(function(l,c){return l[c]="",l},{});!pt(s)||!mt(s)||(Object.assign(s.style,a),Object.keys(r).forEach(function(l){s.removeAttribute(l)}))})}}var Hn={name:"applyStyles",enabled:!0,phase:"write",fn:Xm,effect:Ym,requires:["computeStyles"]};function bt(e){return e.split("-")[0]}var Jt=Math.max,ri=Math.min,ke=Math.round;function zi(){var e=navigator.userAgentData;return e!=null&&e.brands?e.brands.map(function(t){return t.brand+"/"+t.version}).join(" "):navigator.userAgent}function jn(){return!/^((?!chrome|android).)*safari/i.test(zi())}function Wt(e,t,i){t===void 0&&(t=!1),i===void 0&&(i=!1);var n=e.getBoundingClientRect(),s=1,r=1;t&&pt(e)&&(s=e.offsetWidth>0&&ke(n.width)/e.offsetWidth||1,r=e.offsetHeight>0&&ke(n.height)/e.offsetHeight||1);var o=zt(e)?st(e):window,a=o.visualViewport,l=!jn()&&i,c=(n.left+(l&&a?a.offsetLeft:0))/s,h=(n.top+(l&&a?a.offsetTop:0))/r,d=n.width/s,u=n.height/r;return{width:d,height:u,top:h,right:c+d,bottom:h+u,left:c,x:c,y:h}}function oi(e){var t=Wt(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function Vn(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&Vi(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function At(e){return st(e).getComputedStyle(e)}function Xo(e){return["table","td","th"].indexOf(mt(e))>=0}function xt(e){return((zt(e)?e.ownerDocument:e.document)||window.document).documentElement}function Ae(e){return mt(e)==="html"?e:e.assignedSlot||e.parentNode||(Vi(e)?e.host:null)||xt(e)}function ch(e){return!pt(e)||At(e).position==="fixed"?null:e.offsetParent}function qm(e){var t=/firefox/i.test(zi()),i=/Trident/i.test(zi());if(i&&pt(e)){var n=At(e);if(n.position==="fixed")return null}var s=Ae(e);for(Vi(s)&&(s=s.host);pt(s)&&["html","body"].indexOf(mt(s))<0;){var r=At(s);if(r.transform!=="none"||r.perspective!=="none"||r.contain==="paint"||["transform","perspective"].indexOf(r.willChange)!==-1||t&&r.willChange==="filter"||t&&r.filter&&r.filter!=="none")return s;s=s.parentNode}return null}function Kt(e){for(var t=st(e),i=ch(e);i&&Xo(i)&&At(i).position==="static";)i=ch(i);return i&&(mt(i)==="html"||mt(i)==="body"&&At(i).position==="static")?t:i||qm(e)||t}function ai(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function li(e,t,i){return Jt(e,ri(t,i))}function hh(e,t,i){var n=li(e,t,i);return n>i?i:n}function zn(){return{top:0,right:0,bottom:0,left:0}}function Wn(e){return Object.assign({},zn(),e)}function $n(e,t){return t.reduce(function(i,n){return i[n]=e,i},{})}var Jm=function(t,i){return t=typeof t=="function"?t(Object.assign({},i.rects,{placement:i.placement})):t,Wn(typeof t!="number"?t:$n(t,Ve))};function Km(e){var t,i=e.state,n=e.name,s=e.options,r=i.elements.arrow,o=i.modifiersData.popperOffsets,a=bt(i.placement),l=ai(a),c=[ct,dt].indexOf(a)>=0,h=c?"height":"width";if(!(!r||!o)){var d=Jm(s.padding,i),u=oi(r),f=l==="y"?lt:ct,g=l==="y"?ft:dt,m=i.rects.reference[h]+i.rects.reference[l]-o[l]-i.rects.popper[h],b=o[l]-i.rects.reference[l],v=Kt(r),x=v?l==="y"?v.clientHeight||0:v.clientWidth||0:0,w=m/2-b/2,p=d[f],y=x-u[h]-d[g],_=x/2-u[h]/2+w,A=li(p,_,y),C=l;i.modifiersData[n]=(t={},t[C]=A,t.centerOffset=A-_,t)}}function Gm(e){var t=e.state,i=e.options,n=i.element,s=n===void 0?"[data-popper-arrow]":n;s!=null&&(typeof s=="string"&&(s=t.elements.popper.querySelector(s),!s)||!Vn(t.elements.popper,s)||(t.elements.arrow=s))}var dh={name:"arrow",enabled:!0,phase:"main",fn:Km,effect:Gm,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function $t(e){return e.split("-")[1]}var Zm={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Qm(e){var t=e.x,i=e.y,n=window,s=n.devicePixelRatio||1;return{x:ke(t*s)/s||0,y:ke(i*s)/s||0}}function uh(e){var t,i=e.popper,n=e.popperRect,s=e.placement,r=e.variation,o=e.offsets,a=e.position,l=e.gpuAcceleration,c=e.adaptive,h=e.roundOffsets,d=e.isFixed,u=o.x,f=u===void 0?0:u,g=o.y,m=g===void 0?0:g,b=typeof h=="function"?h({x:f,y:m}):{x:f,y:m};f=b.x,m=b.y;var v=o.hasOwnProperty("x"),x=o.hasOwnProperty("y"),w=ct,p=lt,y=window;if(c){var _=Kt(i),A="clientHeight",C="clientWidth";if(_===st(i)&&(_=xt(i),At(_).position!=="static"&&a==="absolute"&&(A="scrollHeight",C="scrollWidth")),_=_,s===lt||(s===ct||s===dt)&&r===si){p=ft;var E=d&&_===y&&y.visualViewport?y.visualViewport.height:_[A];m-=E-n.height,m*=l?1:-1}if(s===ct||(s===lt||s===ft)&&r===si){w=dt;var M=d&&_===y&&y.visualViewport?y.visualViewport.width:_[C];f-=M-n.width,f*=l?1:-1}}var P=Object.assign({position:a},c&&Zm),L=h===!0?Qm({x:f,y:m}):{x:f,y:m};if(f=L.x,m=L.y,l){var H;return Object.assign({},P,(H={},H[p]=x?"0":"",H[w]=v?"0":"",H.transform=(y.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",H))}return Object.assign({},P,(t={},t[p]=x?m+"px":"",t[w]=v?f+"px":"",t.transform="",t))}function tb(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=n===void 0?!0:n,r=i.adaptive,o=r===void 0?!0:r,a=i.roundOffsets,l=a===void 0?!0:a;if(!1)var c;var h={placement:bt(t.placement),variation:$t(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:t.options.strategy==="fixed"};t.modifiersData.popperOffsets!=null&&(t.styles.popper=Object.assign({},t.styles.popper,uh(Object.assign({},h,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:l})))),t.modifiersData.arrow!=null&&(t.styles.arrow=Object.assign({},t.styles.arrow,uh(Object.assign({},h,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})}var fh={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:tb,data:{}};var lr={passive:!0};function eb(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,r=s===void 0?!0:s,o=n.resize,a=o===void 0?!0:o,l=st(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return r&&c.forEach(function(h){h.addEventListener("scroll",i.update,lr)}),a&&l.addEventListener("resize",i.update,lr),function(){r&&c.forEach(function(h){h.removeEventListener("scroll",i.update,lr)}),a&&l.removeEventListener("resize",i.update,lr)}}var ph={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:eb,data:{}};var ib={left:"right",right:"left",bottom:"top",top:"bottom"};function Wi(e){return e.replace(/left|right|bottom|top/g,function(t){return ib[t]})}var nb={start:"end",end:"start"};function cr(e){return e.replace(/start|end/g,function(t){return nb[t]})}function ci(e){var t=st(e),i=t.pageXOffset,n=t.pageYOffset;return{scrollLeft:i,scrollTop:n}}function hi(e){return Wt(xt(e)).left+ci(e).scrollLeft}function Yo(e,t){var i=st(e),n=xt(e),s=i.visualViewport,r=n.clientWidth,o=n.clientHeight,a=0,l=0;if(s){r=s.width,o=s.height;var c=jn();(c||!c&&t==="fixed")&&(a=s.offsetLeft,l=s.offsetTop)}return{width:r,height:o,x:a+hi(e),y:l}}function qo(e){var t,i=xt(e),n=ci(e),s=(t=e.ownerDocument)==null?void 0:t.body,r=Jt(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),o=Jt(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+hi(e),l=-n.scrollTop;return At(s||i).direction==="rtl"&&(a+=Jt(i.clientWidth,s?s.clientWidth:0)-r),{width:r,height:o,x:a,y:l}}function di(e){var t=At(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function hr(e){return["html","body","#document"].indexOf(mt(e))>=0?e.ownerDocument.body:pt(e)&&di(e)?e:hr(Ae(e))}function ze(e,t){var i;t===void 0&&(t=[]);var n=hr(e),s=n===((i=e.ownerDocument)==null?void 0:i.body),r=st(n),o=s?[r].concat(r.visualViewport||[],di(n)?n:[]):n,a=t.concat(o);return s?a:a.concat(ze(Ae(o)))}function $i(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function sb(e,t){var i=Wt(e,!1,t==="fixed");return i.top=i.top+e.clientTop,i.left=i.left+e.clientLeft,i.bottom=i.top+e.clientHeight,i.right=i.left+e.clientWidth,i.width=e.clientWidth,i.height=e.clientHeight,i.x=i.left,i.y=i.top,i}function gh(e,t,i){return t===or?$i(Yo(e,i)):zt(t)?sb(t,i):$i(qo(xt(e)))}function rb(e){var t=ze(Ae(e)),i=["absolute","fixed"].indexOf(At(e).position)>=0,n=i&&pt(e)?Kt(e):e;return zt(n)?t.filter(function(s){return zt(s)&&Vn(s,n)&&mt(s)!=="body"}):[]}function Jo(e,t,i,n){var s=t==="clippingParents"?rb(e):[].concat(t),r=[].concat(s,[i]),o=r[0],a=r.reduce(function(l,c){var h=gh(e,c,n);return l.top=Jt(h.top,l.top),l.right=ri(h.right,l.right),l.bottom=ri(h.bottom,l.bottom),l.left=Jt(h.left,l.left),l},gh(e,o,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function Un(e){var t=e.reference,i=e.element,n=e.placement,s=n?bt(n):null,r=n?$t(n):null,o=t.x+t.width/2-i.width/2,a=t.y+t.height/2-i.height/2,l;switch(s){case lt:l={x:o,y:t.y-i.height};break;case ft:l={x:o,y:t.y+t.height};break;case dt:l={x:t.x+t.width,y:a};break;case ct:l={x:t.x-i.width,y:a};break;default:l={x:t.x,y:t.y}}var c=s?ai(s):null;if(c!=null){var h=c==="y"?"height":"width";switch(r){case Se:l[c]=l[c]-(t[h]/2-i[h]/2);break;case si:l[c]=l[c]+(t[h]/2-i[h]/2);break;default:}}return l}function Gt(e,t){t===void 0&&(t={});var i=t,n=i.placement,s=n===void 0?e.placement:n,r=i.strategy,o=r===void 0?e.strategy:r,a=i.boundary,l=a===void 0?oh:a,c=i.rootBoundary,h=c===void 0?or:c,d=i.elementContext,u=d===void 0?ji:d,f=i.altBoundary,g=f===void 0?!1:f,m=i.padding,b=m===void 0?0:m,v=Wn(typeof b!="number"?b:$n(b,Ve)),x=u===ji?ah:ji,w=e.rects.popper,p=e.elements[g?x:u],y=Jo(zt(p)?p:p.contextElement||xt(e.elements.popper),l,h,o),_=Wt(e.elements.reference),A=Un({reference:_,element:w,strategy:"absolute",placement:s}),C=$i(Object.assign({},w,A)),E=u===ji?C:_,M={top:y.top-E.top+v.top,bottom:E.bottom-y.bottom+v.bottom,left:y.left-E.left+v.left,right:E.right-y.right+v.right},P=e.modifiersData.offset;if(u===ji&&P){var L=P[s];Object.keys(M).forEach(function(H){var X=[dt,ft].indexOf(H)>=0?1:-1,j=[lt,ft].indexOf(H)>=0?"y":"x";M[H]+=L[j]*X})}return M}function Ko(e,t){t===void 0&&(t={});var i=t,n=i.placement,s=i.boundary,r=i.rootBoundary,o=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,c=l===void 0?ar:l,h=$t(n),d=h?a?Uo:Uo.filter(function(g){return $t(g)===h}):Ve,u=d.filter(function(g){return c.indexOf(g)>=0});u.length===0&&(u=d);var f=u.reduce(function(g,m){return g[m]=Gt(e,{placement:m,boundary:s,rootBoundary:r,padding:o})[bt(m)],g},{});return Object.keys(f).sort(function(g,m){return f[g]-f[m]})}function ob(e){if(bt(e)===rr)return[];var t=Wi(e);return[cr(e),t,cr(t)]}function ab(e){var t=e.state,i=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var s=i.mainAxis,r=s===void 0?!0:s,o=i.altAxis,a=o===void 0?!0:o,l=i.fallbackPlacements,c=i.padding,h=i.boundary,d=i.rootBoundary,u=i.altBoundary,f=i.flipVariations,g=f===void 0?!0:f,m=i.allowedAutoPlacements,b=t.options.placement,v=bt(b),x=v===b,w=l||(x||!g?[Wi(b)]:ob(b)),p=[b].concat(w).reduce(function(ot,at){return ot.concat(bt(at)===rr?Ko(t,{placement:at,boundary:h,rootBoundary:d,padding:c,flipVariations:g,allowedAutoPlacements:m}):at)},[]),y=t.rects.reference,_=t.rects.popper,A=new Map,C=!0,E=p[0],M=0;M<p.length;M++){var P=p[M],L=bt(P),H=$t(P)===Se,X=[lt,ft].indexOf(L)>=0,j=X?"width":"height",B=Gt(t,{placement:P,boundary:h,rootBoundary:d,altBoundary:u,padding:c}),T=X?H?dt:ct:H?ft:lt;y[j]>_[j]&&(T=Wi(T));var O=Wi(T),F=[];if(r&&F.push(B[L]<=0),a&&F.push(B[T]<=0,B[O]<=0),F.every(function(ot){return ot})){E=P,C=!1;break}A.set(P,F)}if(C)for(var I=g?3:1,W=function(at){var tt=p.find(function(Ut){var gt=A.get(Ut);if(gt)return gt.slice(0,at).every(function(Qt){return Qt})});if(tt)return E=tt,"break"},Q=I;Q>0;Q--){var rt=W(Q);if(rt==="break")break}t.placement!==E&&(t.modifiersData[n]._skip=!0,t.placement=E,t.reset=!0)}}var mh={name:"flip",enabled:!0,phase:"main",fn:ab,requiresIfExists:["offset"],data:{_skip:!1}};function bh(e,t,i){return i===void 0&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function vh(e){return[lt,dt,ft,ct].some(function(t){return e[t]>=0})}function lb(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,r=t.modifiersData.preventOverflow,o=Gt(t,{elementContext:"reference"}),a=Gt(t,{altBoundary:!0}),l=bh(o,n),c=bh(a,s,r),h=vh(l),d=vh(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}var yh={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:lb};function cb(e,t,i){var n=bt(e),s=[ct,lt].indexOf(n)>=0?-1:1,r=typeof i=="function"?i(Object.assign({},t,{placement:e})):i,o=r[0],a=r[1];return o=o||0,a=(a||0)*s,[ct,dt].indexOf(n)>=0?{x:a,y:o}:{x:o,y:a}}function hb(e){var t=e.state,i=e.options,n=e.name,s=i.offset,r=s===void 0?[0,0]:s,o=ar.reduce(function(h,d){return h[d]=cb(d,t.rects,r),h},{}),a=o[t.placement],l=a.x,c=a.y;t.modifiersData.popperOffsets!=null&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[n]=o}var xh={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:hb};function db(e){var t=e.state,i=e.name;t.modifiersData[i]=Un({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})}var _h={name:"popperOffsets",enabled:!0,phase:"read",fn:db,data:{}};function Go(e){return e==="x"?"y":"x"}function ub(e){var t=e.state,i=e.options,n=e.name,s=i.mainAxis,r=s===void 0?!0:s,o=i.altAxis,a=o===void 0?!1:o,l=i.boundary,c=i.rootBoundary,h=i.altBoundary,d=i.padding,u=i.tether,f=u===void 0?!0:u,g=i.tetherOffset,m=g===void 0?0:g,b=Gt(t,{boundary:l,rootBoundary:c,padding:d,altBoundary:h}),v=bt(t.placement),x=$t(t.placement),w=!x,p=ai(v),y=Go(p),_=t.modifiersData.popperOffsets,A=t.rects.reference,C=t.rects.popper,E=typeof m=="function"?m(Object.assign({},t.rects,{placement:t.placement})):m,M=typeof E=="number"?{mainAxis:E,altAxis:E}:Object.assign({mainAxis:0,altAxis:0},E),P=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,L={x:0,y:0};if(!!_){if(r){var H,X=p==="y"?lt:ct,j=p==="y"?ft:dt,B=p==="y"?"height":"width",T=_[p],O=T+b[X],F=T-b[j],I=f?-C[B]/2:0,W=x===Se?A[B]:C[B],Q=x===Se?-C[B]:-A[B],rt=t.elements.arrow,ot=f&&rt?oi(rt):{width:0,height:0},at=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:zn(),tt=at[X],Ut=at[j],gt=li(0,A[B],ot[B]),Qt=w?A[B]/2-I-gt-tt-M.mainAxis:W-gt-tt-M.mainAxis,Xt=w?-A[B]/2+I+gt+Ut+M.mainAxis:Q+gt+Ut+M.mainAxis,fi=t.elements.arrow&&Kt(t.elements.arrow),qn=fi?p==="y"?fi.clientTop||0:fi.clientLeft||0:0,Yi=(H=P?.[p])!=null?H:0,Jn=T+Qt-Yi-qn,Kn=T+Xt-Yi,qi=li(f?ri(O,Jn):O,T,f?Jt(F,Kn):F);_[p]=qi,L[p]=qi-T}if(a){var Ji,Gn=p==="x"?lt:ct,Zn=p==="x"?ft:dt,ue=_[y],Ce=y==="y"?"height":"width",Ki=ue+b[Gn],We=ue-b[Zn],Gi=[lt,ct].indexOf(v)!==-1,Qn=(Ji=P?.[y])!=null?Ji:0,ts=Gi?Ki:ue-A[Ce]-C[Ce]-Qn+M.altAxis,es=Gi?ue+A[Ce]+C[Ce]-Qn-M.altAxis:We,is=f&&Gi?hh(ts,ue,es):li(f?ts:Ki,ue,f?es:We);_[y]=is,L[y]=is-ue}t.modifiersData[n]=L}}var wh={name:"preventOverflow",enabled:!0,phase:"main",fn:ub,requiresIfExists:["offset"]};function Zo(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}function Qo(e){return e===st(e)||!pt(e)?ci(e):Zo(e)}function fb(e){var t=e.getBoundingClientRect(),i=ke(t.width)/e.offsetWidth||1,n=ke(t.height)/e.offsetHeight||1;return i!==1||n!==1}function ta(e,t,i){i===void 0&&(i=!1);var n=pt(t),s=pt(t)&&fb(t),r=xt(t),o=Wt(e,s,i),a={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(n||!n&&!i)&&((mt(t)!=="body"||di(r))&&(a=Qo(t)),pt(t)?(l=Wt(t,!0),l.x+=t.clientLeft,l.y+=t.clientTop):r&&(l.x=hi(r))),{x:o.left+a.scrollLeft-l.x,y:o.top+a.scrollTop-l.y,width:o.width,height:o.height}}function pb(e){var t=new Map,i=new Set,n=[];e.forEach(function(r){t.set(r.name,r)});function s(r){i.add(r.name);var o=[].concat(r.requires||[],r.requiresIfExists||[]);o.forEach(function(a){if(!i.has(a)){var l=t.get(a);l&&s(l)}}),n.push(r)}return e.forEach(function(r){i.has(r.name)||s(r)}),n}function ea(e){var t=pb(e);return lh.reduce(function(i,n){return i.concat(t.filter(function(s){return s.phase===n}))},[])}function ia(e){var t;return function(){return t||(t=new Promise(function(i){Promise.resolve().then(function(){t=void 0,i(e())})})),t}}function na(e){var t=e.reduce(function(i,n){var s=i[n.name];return i[n.name]=s?Object.assign({},s,n,{options:Object.assign({},s.options,n.options),data:Object.assign({},s.data,n.data)}):n,i},{});return Object.keys(t).map(function(i){return t[i]})}var Sh={placement:"bottom",modifiers:[],strategy:"absolute"};function kh(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some(function(n){return!(n&&typeof n.getBoundingClientRect=="function")})}function Ah(e){e===void 0&&(e={});var t=e,i=t.defaultModifiers,n=i===void 0?[]:i,s=t.defaultOptions,r=s===void 0?Sh:s;return function(a,l,c){c===void 0&&(c=r);var h={placement:"bottom",orderedModifiers:[],options:Object.assign({},Sh,r),modifiersData:{},elements:{reference:a,popper:l},attributes:{},styles:{}},d=[],u=!1,f={state:h,setOptions:function(v){var x=typeof v=="function"?v(h.options):v;m(),h.options=Object.assign({},r,h.options,x),h.scrollParents={reference:zt(a)?ze(a):a.contextElement?ze(a.contextElement):[],popper:ze(l)};var w=ea(na([].concat(n,h.options.modifiers)));if(h.orderedModifiers=w.filter(function(P){return P.enabled}),!1){var p;if(getBasePlacement(h.options.placement)===auto)var y;var _,A,C,E,M}return g(),f.update()},forceUpdate:function(){if(!u){var v=h.elements,x=v.reference,w=v.popper;if(!!kh(x,w)){h.rects={reference:ta(x,Kt(w),h.options.strategy==="fixed"),popper:oi(w)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach(function(P){return h.modifiersData[P.name]=Object.assign({},P.data)});for(var p=0,y=0;y<h.orderedModifiers.length;y++){if(h.reset===!0){h.reset=!1,y=-1;continue}var _=h.orderedModifiers[y],A=_.fn,C=_.options,E=C===void 0?{}:C,M=_.name;typeof A=="function"&&(h=A({state:h,options:E,name:M,instance:f})||h)}}}},update:ia(function(){return new Promise(function(b){f.forceUpdate(),b(h)})}),destroy:function(){m(),u=!0}};if(!kh(a,l))return f;f.setOptions(c).then(function(b){!u&&c.onFirstUpdate&&c.onFirstUpdate(b)});function g(){h.orderedModifiers.forEach(function(b){var v=b.name,x=b.options,w=x===void 0?{}:x,p=b.effect;if(typeof p=="function"){var y=p({state:h,name:v,instance:f,options:w}),_=function(){};d.push(y||_)}})}function m(){d.forEach(function(b){return b()}),d=[]}return f}}var gb=[ph,_h,fh,Hn,xh,mh,wh,dh,yh],sa=Ah({defaultModifiers:gb});var Ih='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',mb="tippy-box",Fh="tippy-content",bb="tippy-backdrop",Nh="tippy-arrow",Bh="tippy-svg-arrow",ui={passive:!0,capture:!0},Hh=function(){return document.body};function ra(e,t,i){if(Array.isArray(e)){var n=e[t];return n??(Array.isArray(i)?i[t]:i)}return e}function da(e,t){var i={}.toString.call(e);return i.indexOf("[object")===0&&i.indexOf(t+"]")>-1}function jh(e,t){return typeof e=="function"?e.apply(void 0,t):e}function Ch(e,t){if(t===0)return e;var i;return function(n){clearTimeout(i),i=setTimeout(function(){e(n)},t)}}function vb(e){return e.split(/\s+/).filter(Boolean)}function Ui(e){return[].concat(e)}function Eh(e,t){e.indexOf(t)===-1&&e.push(t)}function yb(e){return e.filter(function(t,i){return e.indexOf(t)===i})}function xb(e){return e.split("-")[0]}function ur(e){return[].slice.call(e)}function Ph(e){return Object.keys(e).reduce(function(t,i){return e[i]!==void 0&&(t[i]=e[i]),t},{})}function Xn(){return document.createElement("div")}function fr(e){return["Element","Fragment"].some(function(t){return da(e,t)})}function _b(e){return da(e,"NodeList")}function wb(e){return da(e,"MouseEvent")}function Sb(e){return!!(e&&e._tippy&&e._tippy.reference===e)}function kb(e){return fr(e)?[e]:_b(e)?ur(e):Array.isArray(e)?e:ur(document.querySelectorAll(e))}function oa(e,t){e.forEach(function(i){i&&(i.style.transitionDuration=t+"ms")})}function Th(e,t){e.forEach(function(i){i&&i.setAttribute("data-state",t)})}function Ab(e){var t,i=Ui(e),n=i[0];return n!=null&&(t=n.ownerDocument)!=null&&t.body?n.ownerDocument:document}function Cb(e,t){var i=t.clientX,n=t.clientY;return e.every(function(s){var r=s.popperRect,o=s.popperState,a=s.props,l=a.interactiveBorder,c=xb(o.placement),h=o.modifiersData.offset;if(!h)return!0;var d=c==="bottom"?h.top.y:0,u=c==="top"?h.bottom.y:0,f=c==="right"?h.left.x:0,g=c==="left"?h.right.x:0,m=r.top-n+d>l,b=n-r.bottom-u>l,v=r.left-i+f>l,x=i-r.right-g>l;return m||b||v||x})}function aa(e,t,i){var n=t+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(s){e[n](s,i)})}function Mh(e,t){for(var i=t;i;){var n;if(e.contains(i))return!0;i=i.getRootNode==null||(n=i.getRootNode())==null?void 0:n.host}return!1}var de={isTouch:!1},Oh=0;function Eb(){de.isTouch||(de.isTouch=!0,window.performance&&document.addEventListener("mousemove",Vh))}function Vh(){var e=performance.now();e-Oh<20&&(de.isTouch=!1,document.removeEventListener("mousemove",Vh)),Oh=e}function Pb(){var e=document.activeElement;if(Sb(e)){var t=e._tippy;e.blur&&!t.state.isVisible&&e.blur()}}function Tb(){document.addEventListener("touchstart",Eb,ui),window.addEventListener("blur",Pb)}var Mb=typeof window<"u"&&typeof document<"u",Ob=Mb?!!window.msCrypto:!1;var Db={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Lb={allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999},Zt=Object.assign({appendTo:Hh,aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},Db,Lb),Rb=Object.keys(Zt),Ib=function(t){var i=Object.keys(t);i.forEach(function(n){Zt[n]=t[n]})};function zh(e){var t=e.plugins||[],i=t.reduce(function(n,s){var r=s.name,o=s.defaultValue;if(r){var a;n[r]=e[r]!==void 0?e[r]:(a=Zt[r])!=null?a:o}return n},{});return Object.assign({},e,i)}function Fb(e,t){var i=t?Object.keys(zh(Object.assign({},Zt,{plugins:t}))):Rb,n=i.reduce(function(s,r){var o=(e.getAttribute("data-tippy-"+r)||"").trim();if(!o)return s;if(r==="content")s[r]=o;else try{s[r]=JSON.parse(o)}catch{s[r]=o}return s},{});return n}function Dh(e,t){var i=Object.assign({},t,{content:jh(t.content,[e])},t.ignoreAttributes?{}:Fb(e,t.plugins));return i.aria=Object.assign({},Zt.aria,i.aria),i.aria={expanded:i.aria.expanded==="auto"?t.interactive:i.aria.expanded,content:i.aria.content==="auto"?t.interactive?null:"describedby":i.aria.content},i}var Nb=function(){return"innerHTML"};function ca(e,t){e[Nb()]=t}function Lh(e){var t=Xn();return e===!0?t.className=Nh:(t.className=Bh,fr(e)?t.appendChild(e):ca(t,e)),t}function Rh(e,t){fr(t.content)?(ca(e,""),e.appendChild(t.content)):typeof t.content!="function"&&(t.allowHTML?ca(e,t.content):e.textContent=t.content)}function ha(e){var t=e.firstElementChild,i=ur(t.children);return{box:t,content:i.find(function(n){return n.classList.contains(Fh)}),arrow:i.find(function(n){return n.classList.contains(Nh)||n.classList.contains(Bh)}),backdrop:i.find(function(n){return n.classList.contains(bb)})}}function Wh(e){var t=Xn(),i=Xn();i.className=mb,i.setAttribute("data-state","hidden"),i.setAttribute("tabindex","-1");var n=Xn();n.className=Fh,n.setAttribute("data-state","hidden"),Rh(n,e.props),t.appendChild(i),i.appendChild(n),s(e.props,e.props);function s(r,o){var a=ha(t),l=a.box,c=a.content,h=a.arrow;o.theme?l.setAttribute("data-theme",o.theme):l.removeAttribute("data-theme"),typeof o.animation=="string"?l.setAttribute("data-animation",o.animation):l.removeAttribute("data-animation"),o.inertia?l.setAttribute("data-inertia",""):l.removeAttribute("data-inertia"),l.style.maxWidth=typeof o.maxWidth=="number"?o.maxWidth+"px":o.maxWidth,o.role?l.setAttribute("role",o.role):l.removeAttribute("role"),(r.content!==o.content||r.allowHTML!==o.allowHTML)&&Rh(c,e.props),o.arrow?h?r.arrow!==o.arrow&&(l.removeChild(h),l.appendChild(Lh(o.arrow))):l.appendChild(Lh(o.arrow)):h&&l.removeChild(h)}return{popper:t,onUpdate:s}}Wh.$$tippy=!0;var Bb=1,dr=[],la=[];function Hb(e,t){var i=Dh(e,Object.assign({},Zt,zh(Ph(t)))),n,s,r,o=!1,a=!1,l=!1,c=!1,h,d,u,f=[],g=Ch(Jn,i.interactiveDebounce),m,b=Bb++,v=null,x=yb(i.plugins),w={isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},p={id:b,reference:e,popper:Xn(),popperInstance:v,props:i,state:w,plugins:x,clearDelayTimeouts:ts,setProps:es,setContent:is,show:Yh,hide:qh,hideWithInteractivity:Jh,enable:Gi,disable:Qn,unmount:Kh,destroy:Gh};if(!i.render)return p;var y=i.render(p),_=y.popper,A=y.onUpdate;_.setAttribute("data-tippy-root",""),_.id="tippy-"+p.id,p.popper=_,e._tippy=p,_._tippy=p;var C=x.map(function(k){return k.fn(p)}),E=e.hasAttribute("aria-expanded");return fi(),I(),T(),O("onCreate",[p]),i.showOnCreate&&Ki(),_.addEventListener("mouseenter",function(){p.props.interactive&&p.state.isVisible&&p.clearDelayTimeouts()}),_.addEventListener("mouseleave",function(){p.props.interactive&&p.props.trigger.indexOf("mouseenter")>=0&&X().addEventListener("mousemove",g)}),p;function M(){var k=p.props.touch;return Array.isArray(k)?k:[k,0]}function P(){return M()[0]==="hold"}function L(){var k;return!!((k=p.props.render)!=null&&k.$$tippy)}function H(){return m||e}function X(){var k=H().parentNode;return k?Ab(k):document}function j(){return ha(_)}function B(k){return p.state.isMounted&&!p.state.isVisible||de.isTouch||h&&h.type==="focus"?0:ra(p.props.delay,k?0:1,Zt.delay)}function T(k){k===void 0&&(k=!1),_.style.pointerEvents=p.props.interactive&&!k?"":"none",_.style.zIndex=""+p.props.zIndex}function O(k,R,N){if(N===void 0&&(N=!0),C.forEach(function(U){U[k]&&U[k].apply(U,R)}),N){var q;(q=p.props)[k].apply(q,R)}}function F(){var k=p.props.aria;if(!!k.content){var R="aria-"+k.content,N=_.id,q=Ui(p.props.triggerTarget||e);q.forEach(function(U){var kt=U.getAttribute(R);if(p.state.isVisible)U.setAttribute(R,kt?kt+" "+N:N);else{var Ft=kt&&kt.replace(N,"").trim();Ft?U.setAttribute(R,Ft):U.removeAttribute(R)}})}}function I(){if(!(E||!p.props.aria.expanded)){var k=Ui(p.props.triggerTarget||e);k.forEach(function(R){p.props.interactive?R.setAttribute("aria-expanded",p.state.isVisible&&R===H()?"true":"false"):R.removeAttribute("aria-expanded")})}}function W(){X().removeEventListener("mousemove",g),dr=dr.filter(function(k){return k!==g})}function Q(k){if(!(de.isTouch&&(l||k.type==="mousedown"))){var R=k.composedPath&&k.composedPath()[0]||k.target;if(!(p.props.interactive&&Mh(_,R))){if(Ui(p.props.triggerTarget||e).some(function(N){return Mh(N,R)})){if(de.isTouch||p.state.isVisible&&p.props.trigger.indexOf("click")>=0)return}else O("onClickOutside",[p,k]);p.props.hideOnClick===!0&&(p.clearDelayTimeouts(),p.hide(),a=!0,setTimeout(function(){a=!1}),p.state.isMounted||tt())}}}function rt(){l=!0}function ot(){l=!1}function at(){var k=X();k.addEventListener("mousedown",Q,!0),k.addEventListener("touchend",Q,ui),k.addEventListener("touchstart",ot,ui),k.addEventListener("touchmove",rt,ui)}function tt(){var k=X();k.removeEventListener("mousedown",Q,!0),k.removeEventListener("touchend",Q,ui),k.removeEventListener("touchstart",ot,ui),k.removeEventListener("touchmove",rt,ui)}function Ut(k,R){Qt(k,function(){!p.state.isVisible&&_.parentNode&&_.parentNode.contains(_)&&R()})}function gt(k,R){Qt(k,R)}function Qt(k,R){var N=j().box;function q(U){U.target===N&&(aa(N,"remove",q),R())}if(k===0)return R();aa(N,"remove",d),aa(N,"add",q),d=q}function Xt(k,R,N){N===void 0&&(N=!1);var q=Ui(p.props.triggerTarget||e);q.forEach(function(U){U.addEventListener(k,R,N),f.push({node:U,eventType:k,handler:R,options:N})})}function fi(){P()&&(Xt("touchstart",Yi,{passive:!0}),Xt("touchend",Kn,{passive:!0})),vb(p.props.trigger).forEach(function(k){if(k!=="manual")switch(Xt(k,Yi),k){case"mouseenter":Xt("mouseleave",Kn);break;case"focus":Xt(Ob?"focusout":"blur",qi);break;case"focusin":Xt("focusout",qi);break}})}function qn(){f.forEach(function(k){var R=k.node,N=k.eventType,q=k.handler,U=k.options;R.removeEventListener(N,q,U)}),f=[]}function Yi(k){var R,N=!1;if(!(!p.state.isEnabled||Ji(k)||a)){var q=((R=h)==null?void 0:R.type)==="focus";h=k,m=k.currentTarget,I(),!p.state.isVisible&&wb(k)&&dr.forEach(function(U){return U(k)}),k.type==="click"&&(p.props.trigger.indexOf("mouseenter")<0||o)&&p.props.hideOnClick!==!1&&p.state.isVisible?N=!0:Ki(k),k.type==="click"&&(o=!N),N&&!q&&We(k)}}function Jn(k){var R=k.target,N=H().contains(R)||_.contains(R);if(!(k.type==="mousemove"&&N)){var q=Ce().concat(_).map(function(U){var kt,Ft=U._tippy,pi=(kt=Ft.popperInstance)==null?void 0:kt.state;return pi?{popperRect:U.getBoundingClientRect(),popperState:pi,props:i}:null}).filter(Boolean);Cb(q,k)&&(W(),We(k))}}function Kn(k){var R=Ji(k)||p.props.trigger.indexOf("click")>=0&&o;if(!R){if(p.props.interactive){p.hideWithInteractivity(k);return}We(k)}}function qi(k){p.props.trigger.indexOf("focusin")<0&&k.target!==H()||p.props.interactive&&k.relatedTarget&&_.contains(k.relatedTarget)||We(k)}function Ji(k){return de.isTouch?P()!==k.type.indexOf("touch")>=0:!1}function Gn(){Zn();var k=p.props,R=k.popperOptions,N=k.placement,q=k.offset,U=k.getReferenceClientRect,kt=k.moveTransition,Ft=L()?ha(_).arrow:null,pi=U?{getBoundingClientRect:U,contextElement:U.contextElement||H()}:e,ua={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(ns){var gi=ns.state;if(L()){var Zh=j(),vr=Zh.box;["placement","reference-hidden","escaped"].forEach(function(ss){ss==="placement"?vr.setAttribute("data-placement",gi.placement):gi.attributes.popper["data-popper-"+ss]?vr.setAttribute("data-"+ss,""):vr.removeAttribute("data-"+ss)}),gi.attributes.popper={}}}},$e=[{name:"offset",options:{offset:q}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!kt}},ua];L()&&Ft&&$e.push({name:"arrow",options:{element:Ft,padding:3}}),$e.push.apply($e,R?.modifiers||[]),p.popperInstance=sa(pi,_,Object.assign({},R,{placement:N,onFirstUpdate:u,modifiers:$e}))}function Zn(){p.popperInstance&&(p.popperInstance.destroy(),p.popperInstance=null)}function ue(){var k=p.props.appendTo,R,N=H();p.props.interactive&&k===Hh||k==="parent"?R=N.parentNode:R=jh(k,[N]),R.contains(_)||R.appendChild(_),p.state.isMounted=!0,Gn()}function Ce(){return ur(_.querySelectorAll("[data-tippy-root]"))}function Ki(k){p.clearDelayTimeouts(),k&&O("onTrigger",[p,k]),at();var R=B(!0),N=M(),q=N[0],U=N[1];de.isTouch&&q==="hold"&&U&&(R=U),R?n=setTimeout(function(){p.show()},R):p.show()}function We(k){if(p.clearDelayTimeouts(),O("onUntrigger",[p,k]),!p.state.isVisible){tt();return}if(!(p.props.trigger.indexOf("mouseenter")>=0&&p.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(k.type)>=0&&o)){var R=B(!1);R?s=setTimeout(function(){p.state.isVisible&&p.hide()},R):r=requestAnimationFrame(function(){p.hide()})}}function Gi(){p.state.isEnabled=!0}function Qn(){p.hide(),p.state.isEnabled=!1}function ts(){clearTimeout(n),clearTimeout(s),cancelAnimationFrame(r)}function es(k){if(!p.state.isDestroyed){O("onBeforeUpdate",[p,k]),qn();var R=p.props,N=Dh(e,Object.assign({},R,Ph(k),{ignoreAttributes:!0}));p.props=N,fi(),R.interactiveDebounce!==N.interactiveDebounce&&(W(),g=Ch(Jn,N.interactiveDebounce)),R.triggerTarget&&!N.triggerTarget?Ui(R.triggerTarget).forEach(function(q){q.removeAttribute("aria-expanded")}):N.triggerTarget&&e.removeAttribute("aria-expanded"),I(),T(),A&&A(R,N),p.popperInstance&&(Gn(),Ce().forEach(function(q){requestAnimationFrame(q._tippy.popperInstance.forceUpdate)})),O("onAfterUpdate",[p,k])}}function is(k){p.setProps({content:k})}function Yh(){var k=p.state.isVisible,R=p.state.isDestroyed,N=!p.state.isEnabled,q=de.isTouch&&!p.props.touch,U=ra(p.props.duration,0,Zt.duration);if(!(k||R||N||q)&&!H().hasAttribute("disabled")&&(O("onShow",[p],!1),p.props.onShow(p)!==!1)){if(p.state.isVisible=!0,L()&&(_.style.visibility="visible"),T(),at(),p.state.isMounted||(_.style.transition="none"),L()){var kt=j(),Ft=kt.box,pi=kt.content;oa([Ft,pi],0)}u=function(){var $e;if(!(!p.state.isVisible||c)){if(c=!0,_.offsetHeight,_.style.transition=p.props.moveTransition,L()&&p.props.animation){var br=j(),ns=br.box,gi=br.content;oa([ns,gi],U),Th([ns,gi],"visible")}F(),I(),Eh(la,p),($e=p.popperInstance)==null||$e.forceUpdate(),O("onMount",[p]),p.props.animation&&L()&&gt(U,function(){p.state.isShown=!0,O("onShown",[p])})}},ue()}}function qh(){var k=!p.state.isVisible,R=p.state.isDestroyed,N=!p.state.isEnabled,q=ra(p.props.duration,1,Zt.duration);if(!(k||R||N)&&(O("onHide",[p],!1),p.props.onHide(p)!==!1)){if(p.state.isVisible=!1,p.state.isShown=!1,c=!1,o=!1,L()&&(_.style.visibility="hidden"),W(),tt(),T(!0),L()){var U=j(),kt=U.box,Ft=U.content;p.props.animation&&(oa([kt,Ft],q),Th([kt,Ft],"hidden"))}F(),I(),p.props.animation?L()&&Ut(q,p.unmount):p.unmount()}}function Jh(k){X().addEventListener("mousemove",g),Eh(dr,g),g(k)}function Kh(){p.state.isVisible&&p.hide(),p.state.isMounted&&(Zn(),Ce().forEach(function(k){k._tippy.unmount()}),_.parentNode&&_.parentNode.removeChild(_),la=la.filter(function(k){return k!==p}),p.state.isMounted=!1,O("onHidden",[p]))}function Gh(){p.state.isDestroyed||(p.clearDelayTimeouts(),p.unmount(),qn(),delete e._tippy,p.state.isDestroyed=!0,O("onDestroy",[p]))}}function Yn(e,t){t===void 0&&(t={});var i=Zt.plugins.concat(t.plugins||[]);Tb();var n=Object.assign({},t,{plugins:i}),s=kb(e);if(!1)var r,o;var a=s.reduce(function(l,c){var h=c&&Hb(c,n);return h&&l.push(h),l},[]);return fr(e)?a[0]:a}Yn.defaultProps=Zt;Yn.setDefaultProps=Ib;Yn.currentInput=de;var p0=Object.assign({},Hn,{effect:function(t){var i=t.state,n={popper:{position:i.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(i.elements.popper.style,n.popper),i.styles=n,i.elements.arrow&&Object.assign(i.elements.arrow.style,n.arrow)}});Yn.setDefaultProps({render:Wh});var $h=Yn;var mr=ad(Xh());js.defaults.font.size=12;js.defaults.font.family="Inter var";var gr;mr.default.config({barColors:{0:"#0284c7"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",e=>{gr||(gr=setTimeout(()=>mr.default.show(),500))});window.addEventListener("phx:page-loading-stop",e=>{clearTimeout(gr),gr=void 0,mr.default.hide()});var Xi={};Xi.Refresher={mounted(){let e="#refresh-selector",t=this;document.addEventListener("visibilitychange",()=>{document.visibilityState==="visible"?t.pushEventTo(e,"resume-refresh",{}):t.pushEventTo(e,"pause-refresh",{})}),"refresh"in localStorage&&t.pushEventTo(e,"select-refresh",{value:localStorage.refresh}),this.el.querySelectorAll("[role='option']").forEach(i=>{i.addEventListener("click",()=>{localStorage.refresh=i.getAttribute("value")})})}};Xi.RestoreTheme={mounted(){this.pushEventTo("#theme-selector","restore",{theme:localStorage.theme})}};Xi.ChangeTheme={applyTheme(){let e=window.matchMedia("(prefers-color-scheme: dark)").matches,t=!("theme"in localStorage);localStorage.theme==="dark"||localStorage.theme==="system"&&e||t&&e?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},mounted(){let e=this;this.el.addEventListener("click",()=>{let t=this.el.getAttribute("value");localStorage.theme=t,this.applyTheme(),e.pushEventTo("#theme-selector","restore",{theme:t})})}};Xi.Tippy={mounted(){let e=this.el.getAttribute("data-title");$h(this.el,{arrow:Ih,content:e,delay:[250,null]})}};var jb={maintainAspectRatio:!1,interaction:{mode:"index"},plugins:{legend:{display:!1}},scales:{x:{stacked:!0,grid:{display:!1}},y:{stacked:!0}}};Xi.Chart={mounted(){let e=new Date,t={labels:[...Array(100).keys()].map(n=>(e=new Date(e.getTime()-n*1e3),e.toLocaleTimeString("en-US",{hour12:!1,timeStyle:"short"}))),datasets:[{label:"completed",data:[],barThickness:9,borderColor:"#22d3ee",backgroundColor:"#22d3ee"},{label:"cancelled",data:[],barThickness:9,borderColor:"#a78bfa",backgroundColor:"#a78bfa"},{label:"discarded",data:[],barThickness:9,borderColor:"#fb7185",backgroundColor:"#fb7185"},{label:"retryable",data:[],barThickness:9,borderColor:"#facc15",backgroundColor:"#facc15"},{label:"scheduled",data:[],barThickness:9,borderColor:"#4ade80",backgroundColor:"#4ade80"}]},i=new js(this.el,{type:"bar",options:jb,data:t});this.handleEvent("chart-update",({points:n})=>{i.data.datasets.forEach(s=>{let r=[n[s.label]].flat();s.data.splice(0,r.length),s.data.push(...r)}),i.update()})}};var Vb=document.querySelector("meta[name='csrf-token']").getAttribute("content"),zb=document.querySelector("meta[name='live-transport']").getAttribute("content"),Wb=document.querySelector("meta[name='live-path']").getAttribute("content"),$b=new rh(Wb,Cc,{transport:zb==="longpoll"?Pn:WebSocket,params:{_csrf_token:Vb},hooks:Xi});$b.connect();})();
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * http://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
