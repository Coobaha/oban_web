(()=>{var Bn=Object.create;var vr=Object.defineProperty;var Un=Object.getOwnPropertyDescriptor;var $n=Object.getOwnPropertyNames;var Vn=Object.getPrototypeOf,Wn=Object.prototype.hasOwnProperty;var qn=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Xn=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of $n(t))!Wn.call(e,n)&&n!==i&&vr(e,n,{get:()=>t[n],enumerable:!(r=Un(t,n))||r.enumerable});return e};var Jn=(e,t,i)=>(i=e!=null?Bn(Vn(e)):{},Xn(t||!e||!e.__esModule?vr(i,"default",{value:e,enumerable:!0}):i,e));var _n=qn((Dn,Ti)=>{(function(e,t){"use strict";(function(){for(var u=0,m=["ms","moz","webkit","o"],g=0;g<m.length&&!e.requestAnimationFrame;++g)e.requestAnimationFrame=e[m[g]+"RequestAnimationFrame"],e.cancelAnimationFrame=e[m[g]+"CancelAnimationFrame"]||e[m[g]+"CancelRequestAnimationFrame"];e.requestAnimationFrame||(e.requestAnimationFrame=function(v,y){var b=new Date().getTime(),x=Math.max(0,16-(b-u)),h=e.setTimeout(function(){v(b+x)},x);return u=b+x,h}),e.cancelAnimationFrame||(e.cancelAnimationFrame=function(v){clearTimeout(v)})})();function i(){r.width=e.innerWidth,r.height=5*l.barThickness;var u=r.getContext("2d");u.shadowBlur=l.shadowBlur,u.shadowColor=l.shadowColor;var m,g=u.createLinearGradient(0,0,r.width,0);for(m in l.barColors)g.addColorStop(m,l.barColors[m]);u.lineWidth=l.barThickness,u.beginPath(),u.moveTo(0,l.barThickness/2),u.lineTo(Math.ceil(s*r.width),l.barThickness/2),u.strokeStyle=g,u.stroke()}var r,n,o,s,a,l={autoRun:!0,barThickness:3,barColors:{0:"rgba(26,  188, 156, .9)",".25":"rgba(52,  152, 219, .9)",".50":"rgba(241, 196, 15,  .9)",".75":"rgba(230, 126, 34,  .9)","1.0":"rgba(211, 84,  0,   .9)"},shadowBlur:10,shadowColor:"rgba(0,   0,   0,   .6)",className:null},d={config:function(u){for(var m in u)l.hasOwnProperty(m)&&(l[m]=u[m])},show:function(){var u,m,g;a||(a=!0,o!==null&&e.cancelAnimationFrame(o),r||((g=(r=t.createElement("canvas")).style).position="fixed",g.top=g.left=g.right=g.margin=g.padding=0,g.zIndex=100001,g.display="none",l.className&&r.classList.add(l.className),t.body.appendChild(r),u="resize",m=i,(g=e).addEventListener?g.addEventListener(u,m,!1):g.attachEvent?g.attachEvent("on"+u,m):g["on"+u]=m),r.style.opacity=1,r.style.display="block",d.progress(0),l.autoRun&&function v(){n=e.requestAnimationFrame(v),d.progress("+"+.05*Math.pow(1-Math.sqrt(s),2))}())},progress:function(u){return u===void 0||(typeof u=="string"&&(u=(0<=u.indexOf("+")||0<=u.indexOf("-")?s:0)+parseFloat(u)),s=1<u?1:u,i()),s},hide:function(){a&&(a=!1,n!=null&&(e.cancelAnimationFrame(n),n=null),function u(){return 1<=d.progress("+.1")&&(r.style.opacity-=.05,r.style.opacity<=.05)?(r.style.display="none",void(o=null)):void(o=e.requestAnimationFrame(u))}())}};typeof Ti=="object"&&typeof Ti.exports=="object"?Ti.exports=d:typeof define=="function"&&define.amd?define(function(){return d}):this.topbar=d}).call(Dn,window,document)});(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function n(o,s){s=s||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(o,s.bubbles,s.cancelable,s.detail),a}return n.prototype=window.Event.prototype,n}function i(n,o){var s=document.createElement("input");return s.type="hidden",s.name=n,s.value=o,s}function r(n,o){var s=n.getAttribute("data-to"),a=i("_method",n.getAttribute("data-method")),l=i("_csrf_token",n.getAttribute("data-csrf")),d=document.createElement("form"),u=document.createElement("input"),m=n.getAttribute("target");d.method=n.getAttribute("data-method")==="get"?"get":"post",d.action=s,d.style.display="none",m?d.target=m:o&&(d.target="_blank"),d.appendChild(l),d.appendChild(a),document.body.appendChild(d),u.type="submit",d.appendChild(u),u.click()}window.addEventListener("click",function(n){var o=n.target;if(!n.defaultPrevented)for(;o&&o.getAttribute;){var s=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!o.dispatchEvent(s))return n.preventDefault(),n.stopImmediatePropagation(),!1;if(o.getAttribute("data-method"))return r(o,n.metaKey||n.shiftKey),n.preventDefault(),!1;o=o.parentNode}},!1),window.addEventListener("phoenix.link.click",function(n){var o=n.target.getAttribute("data-confirm");o&&!window.confirm(o)&&n.preventDefault()},!1)})();var At=e=>typeof e=="function"?e:function(){return e},zn=typeof self<"u"?self:null,Et=typeof window<"u"?window:null,St=zn||Et||St,Gn="2.0.0",Ce={connecting:0,open:1,closing:2,closed:3},Kn=1e4,Yn=1e3,ce={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},_e={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Li={longpoll:"longpoll",websocket:"websocket"},Qn={complete:4},Zt=class{constructor(e,t,i,r){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=r,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(r=>r.status===e).forEach(r=>r.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},gr=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Zn=class{constructor(e,t,i){this.state=ce.closed,this.topic=e,this.params=At(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Zt(this,_e.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new gr(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=ce.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(r=>r.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=ce.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=ce.closed,this.socket.remove(this)}),this.onError(r=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,r),this.isJoining()&&this.joinPush.reset(),this.state=ce.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Zt(this,_e.leave,At({}),this.timeout).send(),this.state=ce.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(_e.reply,(r,n)=>{this.trigger(this.replyEventName(n),r)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(_e.close,e)}onError(e){return this.on(_e.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t>"u"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let r=new Zt(this,e,function(){return t},i);return this.canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=ce.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(_e.close,"leave")},i=new Zt(this,_e.leave,At({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,r){return this.topic!==e?!1:r&&r!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:r}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=ce.joining,this.joinPush.resend(e))}trigger(e,t,i,r){let n=this.onMessage(e,t,i,r);if(t&&!n)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let o=this.bindings.filter(s=>s.event===e);for(let s=0;s<o.length;s++)o[s].callback(n,i,r||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===ce.closed}isErrored(){return this.state===ce.errored}isJoined(){return this.state===ce.joined}isJoining(){return this.state===ce.joining}isLeaving(){return this.state===ce.leaving}},ti=class{static request(e,t,i,r,n,o,s){if(St.XDomainRequest){let a=new St.XDomainRequest;return this.xdomainRequest(a,e,t,r,n,o,s)}else{let a=new St.XMLHttpRequest;return this.xhrRequest(a,e,t,i,r,n,o,s)}}static xdomainRequest(e,t,i,r,n,o,s){return e.timeout=n,e.open(t,i),e.onload=()=>{let a=this.parseJSON(e.responseText);s&&s(a)},o&&(e.ontimeout=o),e.onprogress=()=>{},e.send(r),e}static xhrRequest(e,t,i,r,n,o,s,a){return e.open(t,i,!0),e.timeout=o,e.setRequestHeader("Content-Type",r),e.onerror=()=>a&&a(null),e.onreadystatechange=()=>{if(e.readyState===Qn.complete&&a){let l=this.parseJSON(e.responseText);a(l)}},s&&(e.ontimeout=s),e.send(n),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch{return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var r in e){if(!Object.prototype.hasOwnProperty.call(e,r))continue;let n=t?`${t}[${r}]`:r,o=e[r];typeof o=="object"?i.push(this.serialize(o,n)):i.push(encodeURIComponent(n)+"="+encodeURIComponent(o))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},xt=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=Ce.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Li.websocket),"$1/"+Li.longpoll)}endpointURL(){return ti.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=Ce.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===Ce.open||this.readyState===Ce.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:r}=e;this.token=i}else t=0;switch(t){case 200:r.forEach(n=>{setTimeout(()=>this.onmessage({data:n}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=Ce.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){this.currentBatch?this.currentBatch.push(e):this.awaitingBatchAck?this.batchBuffer.push(e):(this.currentBatch=[e],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(e){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",e.join(`
`),()=>this.onerror("timeout"),t=>{this.awaitingBatchAck=!1,!t||t.status!==200?(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(e,t,i){for(let n of this.reqs)n.abort();this.readyState=Ce.closed;let r=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",r)):this.onclose(r)}ajax(e,t,i,r,n){let o,s=()=>{this.reqs.delete(o),r()};o=ti.request(e,this.endpointURL(),t,i,this.timeout,s,a=>{this.reqs.delete(o),this.isActive()&&n(a)}),this.reqs.add(o)}};var ei={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,r,n,o,s]=JSON.parse(e);return t({join_ref:i,ref:r,topic:n,event:o,payload:s})}},binaryEncode(e){let{join_ref:t,ref:i,event:r,topic:n,payload:o}=e,s=this.META_LENGTH+t.length+i.length+n.length+r.length,a=new ArrayBuffer(this.HEADER_LENGTH+s),l=new DataView(a),d=0;l.setUint8(d++,this.KINDS.push),l.setUint8(d++,t.length),l.setUint8(d++,i.length),l.setUint8(d++,n.length),l.setUint8(d++,r.length),Array.from(t,m=>l.setUint8(d++,m.charCodeAt(0))),Array.from(i,m=>l.setUint8(d++,m.charCodeAt(0))),Array.from(n,m=>l.setUint8(d++,m.charCodeAt(0))),Array.from(r,m=>l.setUint8(d++,m.charCodeAt(0)));var u=new Uint8Array(a.byteLength+o.byteLength);return u.set(new Uint8Array(a),0),u.set(new Uint8Array(o),a.byteLength),u.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),r=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,r);case this.KINDS.reply:return this.decodeReply(e,t,r);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,r)}},decodePush(e,t,i){let r=t.getUint8(1),n=t.getUint8(2),o=t.getUint8(3),s=this.HEADER_LENGTH+this.META_LENGTH-1,a=i.decode(e.slice(s,s+r));s=s+r;let l=i.decode(e.slice(s,s+n));s=s+n;let d=i.decode(e.slice(s,s+o));s=s+o;let u=e.slice(s,e.byteLength);return{join_ref:a,ref:null,topic:l,event:d,payload:u}},decodeReply(e,t,i){let r=t.getUint8(1),n=t.getUint8(2),o=t.getUint8(3),s=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(a,a+r));a=a+r;let d=i.decode(e.slice(a,a+n));a=a+n;let u=i.decode(e.slice(a,a+o));a=a+o;let m=i.decode(e.slice(a,a+s));a=a+s;let g=e.slice(a,e.byteLength),v={status:m,response:g};return{join_ref:l,ref:d,topic:u,event:_e.reply,payload:v}},decodeBroadcast(e,t,i){let r=t.getUint8(1),n=t.getUint8(2),o=this.HEADER_LENGTH+2,s=i.decode(e.slice(o,o+r));o=o+r;let a=i.decode(e.slice(o,o+n));o=o+n;let l=e.slice(o,e.byteLength);return{join_ref:null,ref:null,topic:s,event:a,payload:l}}},br=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||Kn,this.transport=t.transport||St.WebSocket||xt,this.establishedConnections=0,this.defaultEncoder=ei.encode.bind(ei),this.defaultDecoder=ei.decode.bind(ei),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==xt?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;Et&&Et.addEventListener&&(Et.addEventListener("pagehide",r=>{this.conn&&(this.disconnect(),i=this.connectClock)}),Et.addEventListener("pageshow",r=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=r=>t.rejoinAfterMs?t.rejoinAfterMs(r):[1e3,2e3,5e3][r-1]||1e4,this.reconnectAfterMs=r=>t.reconnectAfterMs?t.reconnectAfterMs(r):[10,50,100,150,200,250,500,1e3,2e3][r-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=At(t.params||{}),this.endPoint=`${e}/${Li.websocket}`,this.vsn=t.vsn||Gn,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new gr(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return xt}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.sendBuffer=[],this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=ti.appendParams(ti.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=At(e)),!this.conn&&(this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let r=this.onMessage(n=>{n.ref===t&&(this.off([r]),e(Date.now()-i))});return!0}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),Yn,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===Ce.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,r])=>{r(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(_e.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case Ce.connecting:return"connecting";case Ce.open:return"open";case Ce.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new Zn(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:r,ref:n,join_ref:o}=e;this.log("push",`${t} ${i} (${o}, ${n})`,r)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:r,payload:n,ref:o,join_ref:s}=t;o&&o===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${n.status||""} ${i} ${r} ${o&&"("+o+")"||""}`,n);for(let a=0;a<this.channels.length;a++){let l=this.channels[a];!l.isMember(i,r,n,s)||l.trigger(r,n,o,s)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,l]=this.stateChangeCallbacks.message[a];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var Fr="consecutive-reloads",eo=10,to=5e3,io=1e4,ro=3e4,Br=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],he="data-phx-component",Di="data-phx-link",no="track-static",oo="data-phx-link-state",Re="data-phx-ref",Xe="data-phx-ref-src",Ur="track-uploads",Je="data-phx-upload-ref",Xi="data-phx-preflighted-refs",so="data-phx-done-refs",yr="drop-target",$i="data-phx-active-refs",hi="phx:live-file:updated",Vi="data-phx-skip",wr="data-phx-prune",Er="page-loading",Ar="phx-connected",_i="phx-loading",Ii="phx-no-feedback",Sr="phx-error",st="data-phx-parent-id",Ji="data-phx-main",Dt="data-phx-root-id",ao="trigger-action",pi="feedback-for",Wi="phx-has-focused",lo=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],$r=["checkbox","radio"],mi="phx-has-submitted",Ue="data-phx-session",lt=`[${Ue}]`,xr="data-phx-sticky",Rt="data-phx-static",Ni="data-phx-readonly",ii="data-phx-disabled",qi="disable-with",ri="data-phx-disable-with-restore",Ct="hook",uo="debounce",co="throttle",vi="update",Mi="stream",ho="key",Te="phxPrivate",Cr="auto-recover",ni="phx:live-socket:debug",Hi="phx:live-socket:profiling",ji="phx:live-socket:latency-sim",fo="progress",Tr="mounted",po=1,mo=200,vo="phx-",go=3e4,Tt="debounce-trigger",oi="throttled",kr="debounce-prev-key",bo={debounce:300,throttle:300},si="d",ke="s",de="c",Or="e",Pr="r",Rr="t",yo="p",wo="stream",Eo=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return oe("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},oe=(e,t)=>console.error&&console.error(e,t),Fe=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function Ao(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,r=t.length;i<r;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var So=(e,t,i,r)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,r)},Fi=e=>typeof e=="function"?e:function(){return e},fi=e=>JSON.parse(JSON.stringify(e)),Lt=(e,t,i)=>{do{if(e.matches(`[${t}]`)&&!e.disabled)return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(lt)));return null},kt=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),xo=(e,t)=>JSON.stringify(e)===JSON.stringify(t),Lr=e=>{for(let t in e)return!1;return!0},Be=(e,t)=>e&&t(e),Co=function(e,t,i,r){e.forEach(n=>{new Eo(n,i.config.chunk_size,r).upload()})},Vr={canPushState(){return typeof history.pushState<"u"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,r,n){let o=this.getLocal(e,t,i),s=this.localKey(t,i),a=o===null?r:n(o);return e.setItem(s,JSON.stringify(a)),a},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let n=history.state||{};n.scroll=t.scroll,history.replaceState(n,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let r=this.getHashTargetEl(window.location.hash);r?r.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&Vr.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},Oe=Vr,ye={byId(e){return document.getElementById(e)||oe(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let r=Array.from(e.querySelectorAll(t));return i?r.forEach(i):r},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(Je)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${Je}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${he}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&ye.private(e,"destroyed"))},wantsNewTab(e){return e.ctrlKey||e.shiftKey||e.metaKey||e.button&&e.button===1||e.target.getAttribute("target")==="_blank"},isUnloadableFormSubmit(e){return!e.defaultPrevented&&!this.wantsNewTab(e)},isNewPageHref(e,t){let i;try{i=new URL(e)}catch{try{i=new URL(e,t)}catch{return!0}}return i.host===t.host&&i.protocol===t.protocol&&i.pathname===t.pathname&&i.search===t.search?i.hash===""&&!i.href.endsWith("#"):!0},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(Ue,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${xr}]`)},findPhxChildren(e,t){return this.all(e,`${lt}[${st}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t),r=t.reduce((n,o)=>{let s=`[${he}="${o}"] [${he}]`;return this.filterWithinSameLiveView(this.all(e,s),e).map(a=>parseInt(a.getAttribute(he))).forEach(a=>n.delete(a)),n},i);return r.size===0?new Set(t):r},filterWithinSameLiveView(e,t){return t.querySelector(lt)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(Ue)!==null)return!1}},private(e,t){return e[Te]&&e[Te][t]},deletePrivate(e,t){e[Te]&&delete e[Te][t]},putPrivate(e,t,i){e[Te]||(e[Te]={}),e[Te][t]=i},updatePrivate(e,t,i,r){let n=this.private(e,t);n===void 0?this.putPrivate(e,t,r(i)):this.putPrivate(e,t,r(n))},copyPrivates(e,t){t[Te]&&(e[Te]=t[Te])},putTitle(e){let t=document.querySelector("title");if(t){let{prefix:i,suffix:r}=t.dataset;document.title=`${i||""}${e}${r||""}`}else document.title=e},debounce(e,t,i,r,n,o,s,a){let l=e.getAttribute(i),d=e.getAttribute(n);l===""&&(l=r),d===""&&(d=o);let u=l||d;switch(u){case null:return a();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>a());return;default:let m=parseInt(u),g=()=>d?this.deletePrivate(e,oi):a(),v=this.incCycle(e,Tt,g);if(isNaN(m))return oe(`invalid throttle/debounce value: ${u}`);if(d){let b=!1;if(t.type==="keydown"){let x=this.private(e,kr);this.putPrivate(e,kr,t.key),b=x!==t.key}if(!b&&this.private(e,oi))return!1;a(),this.putPrivate(e,oi,!0),setTimeout(()=>{s()&&this.triggerCycle(e,Tt)},m)}else setTimeout(()=>{s()&&this.triggerCycle(e,Tt,v)},m);let y=e.form;y&&this.once(y,"bind-debounce")&&y.addEventListener("submit",()=>{Array.from(new FormData(y).entries(),([b])=>{let x=y.querySelector(`[name="${b}"]`);this.incCycle(x,Tt),this.deletePrivate(x,oi)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,Tt))}},triggerCycle(e,t,i){let[r,n]=this.private(e,t);i||(i=r),i===r&&(this.incCycle(e,t),n())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[r]=this.private(e,t)||[0,i];return r++,this.putPrivate(e,t,[r,i]),r},discardError(e,t,i){let r=t.getAttribute&&t.getAttribute(i),n=r&&e.querySelector(`[id="${r}"], [name="${r}"], [name="${r}[]"]`);!n||this.private(n,Wi)||this.private(n,mi)||t.classList.add(Ii)},resetForm(e,t){Array.from(e.elements).forEach(i=>{let r=`[${t}="${i.id}"],
                   [${t}="${i.name}"],
                   [${t}="${i.name.replace(/\[\]$/,"")}"]`;this.deletePrivate(i,Wi),this.deletePrivate(i,mi),this.all(document,r,n=>{n.classList.add(Ii)})})},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,Ii)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(st)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(xr)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${st}]`)[0]},dispatchEvent(e,t,i={}){let n={bubbles:i.bubbles===void 0?!0:!!i.bubbles,cancelable:!0,detail:i.detail||{}},o=t==="click"?new MouseEvent("click",n):new CustomEvent(t,n);e.dispatchEvent(o)},cloneNode(e,t){if(typeof t>"u")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let r=i.exclude||[],n=i.isIgnored,o=t.attributes;for(let a=o.length-1;a>=0;a--){let l=o[a].name;r.indexOf(l)<0&&e.setAttribute(l,t.getAttribute(l))}let s=e.attributes;for(let a=s.length-1;a>=0;a--){let l=s[a].name;n?l.startsWith("data-")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||ye.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!ye.isTextualInput(e))return;let r=e.matches(":focus");e.readOnly&&e.blur(),r||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&$r.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return lo.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let r=e.getAttribute(Re);if(r===null)return!0;let n=e.getAttribute(Xe);return ye.isFormInput(e)||e.getAttribute(i)!==null?(ye.isUploadInput(e)&&ye.mergeAttrs(e,t,{isIgnored:!0}),ye.putPrivate(e,Re,t),!1):(Br.forEach(o=>{e.classList.contains(o)&&t.classList.add(o)}),t.setAttribute(Re,r),t.setAttribute(Xe,n),!0)},cleanChildNodes(e,t){if(ye.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(r=>{r.id||(r.nodeType===Node.TEXT_NODE&&r.nodeValue.trim()===""||oe(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(r.outerHTML||r.nodeValue).trim()}"

`),i.push(r))}),i.forEach(r=>r.remove())}},replaceRootContainer(e,t,i){let r=new Set(["id",Ue,Rt,Ji,Dt]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(n=>!r.has(n.name.toLowerCase())).forEach(n=>e.removeAttribute(n.name)),Object.keys(i).filter(n=>!r.has(n.toLowerCase())).forEach(n=>e.setAttribute(n,i[n])),e;{let n=document.createElement(t);return Object.keys(i).forEach(o=>n.setAttribute(o,i[o])),r.forEach(o=>n.setAttribute(o,e.getAttribute(o))),n.innerHTML=e.innerHTML,e.replaceWith(n),n}},getSticky(e,t,i){let r=(ye.private(e,"sticky")||[]).find(([n])=>t===n);if(r){let[n,o,s]=r;return s}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([r,n])=>r!==t))},putSticky(e,t,i){let r=i(e);this.updatePrivate(e,"sticky",[],n=>{let o=n.findIndex(([s])=>t===s);return o>=0?n[o]=[t,i,r]:n.push([t,i,r]),n})},applyStickyOperations(e){let t=ye.private(e,"sticky");!t||t.forEach(([i,r,n])=>this.putSticky(e,i,r))}},f=ye,Bi=class{static isActive(e,t){let i=t._phxRef===void 0,n=e.getAttribute($i).split(",").indexOf(ne.genFileRef(t))>=0;return t.size>0&&(i||n)}static isPreflighted(e,t){return e.getAttribute(Xi).split(",").indexOf(ne.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=ne.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(hi,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{ne.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.fileEl.removeEventListener(hi,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),ne.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(hi,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute($i).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||oe(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:Co}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||oe(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},To=0,ne=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(To++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let r=this.activeFiles(e).find(n=>this.genFileRef(n)===t);i(URL.createObjectURL(r))}static hasUploadsInProgress(e){let t=0;return f.findUploadInputs(e).forEach(i=>{i.getAttribute(Xi)!==i.getAttribute(so)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(r=>{let n={path:e.name},o=e.getAttribute(Je);i[o]=i[o]||[],n.ref=this.genFileRef(r),n.last_modified=r.lastModified,n.name=r.name||n.ref,n.relative_path=r.webkitRelativePath,n.type=r.type,n.size=r.size,i[o].push(n)}),i}static clearFiles(e){e.value=null,e.removeAttribute(Je),f.putPrivate(e,"files",[])}static untrackFile(e,t){f.putPrivate(e,"files",f.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t,i){if(e.getAttribute("multiple")!==null){let r=t.filter(n=>!this.activeFiles(e).find(o=>Object.is(o,n)));f.putPrivate(e,"files",this.activeFiles(e).concat(r)),e.value=null}else i&&i.files.length>0&&(e.files=i.files),f.putPrivate(e,"files",t)}static activeFileInputs(e){let t=f.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(f.private(e,"files")||[]).filter(t=>Bi.isActive(e,t))}static inputsAwaitingPreflight(e){let t=f.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!Bi.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from(ne.filesAwaitingPreflight(e)||[]).map(r=>new Bi(e,r,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(n=>(n.zipPostFlight(e),n.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),n));let r=this._entries.reduce((n,o)=>{let{name:s,callback:a}=o.uploader(i.uploaders);return n[s]=n[s]||{callback:a,entries:[]},n[s].entries.push(o),n},{});for(let n in r){let{callback:o,entries:s}=r[n];o(s,t,e,i)}}},ko={focusMain(){let e=document.querySelector("main h1, main, h1");if(e){let t=e.tabIndex;e.tabIndex=-1,e.focus(),e.tabIndex=t}},anyOf(e,t){return t.find(i=>e instanceof i)},isFocusable(e,t){return e instanceof HTMLAnchorElement&&e.rel!=="ignore"||e instanceof HTMLAreaElement&&e.href!==void 0||!e.disabled&&this.anyOf(e,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||e instanceof HTMLIFrameElement||e.tabIndex>0||!t&&e.tabIndex===0&&e.getAttribute("tabindex")!==null&&e.getAttribute("aria-hidden")!=="true"},attemptFocus(e,t){if(this.isFocusable(e,t))try{e.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(e)},focusFirstInteractive(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(e){let t=e.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},at=ko,Oo={LiveFileUpload:{activeRefs(){return this.el.getAttribute($i)},preflightedRefs(){return this.el.getAttribute(Xi)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(hi))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(Je)),ne.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>at.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>at.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&at.focusFirst(this.el)}}},Po=Oo,Ro=class{constructor(e,t,i){let r=new Set,n=new Set([...t.children].map(s=>s.id)),o=[];Array.from(e.children).forEach(s=>{if(s.id&&(r.add(s.id),n.has(s.id))){let a=s.previousElementSibling&&s.previousElementSibling.id;o.push({elementId:s.id,previousElementId:a})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=o,this.elementIdsToAdd=[...n].filter(s=>!r.has(s))}perform(){let e=f.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?Be(document.getElementById(t.previousElementId),i=>{Be(document.getElementById(t.elementId),r=>{r.previousElementSibling&&r.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",r)})}):Be(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{Be(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},Dr=11;function Lo(e,t){var i=t.attributes,r,n,o,s,a;if(!(t.nodeType===Dr||e.nodeType===Dr)){for(var l=i.length-1;l>=0;l--)r=i[l],n=r.name,o=r.namespaceURI,s=r.value,o?(n=r.localName||n,a=e.getAttributeNS(o,n),a!==s&&(r.prefix==="xmlns"&&(n=r.name),e.setAttributeNS(o,n,s))):(a=e.getAttribute(n),a!==s&&e.setAttribute(n,s));for(var d=e.attributes,u=d.length-1;u>=0;u--)r=d[u],n=r.name,o=r.namespaceURI,o?(n=r.localName||n,t.hasAttributeNS(o,n)||e.removeAttributeNS(o,n)):t.hasAttribute(n)||e.removeAttribute(n)}}var ai,Do="http://www.w3.org/1999/xhtml",ue=typeof document>"u"?void 0:document,_o=!!ue&&"content"in ue.createElement("template"),Io=!!ue&&ue.createRange&&"createContextualFragment"in ue.createRange();function No(e){var t=ue.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function Mo(e){ai||(ai=ue.createRange(),ai.selectNode(ue.body));var t=ai.createContextualFragment(e);return t.childNodes[0]}function Ho(e){var t=ue.createElement("body");return t.innerHTML=e,t.childNodes[0]}function jo(e){return e=e.trim(),_o?No(e):Io?Mo(e):Ho(e)}function li(e,t){var i=e.nodeName,r=t.nodeName,n,o;return i===r?!0:(n=i.charCodeAt(0),o=r.charCodeAt(0),n<=90&&o>=97?i===r.toUpperCase():o<=90&&n>=97?r===i.toUpperCase():!1)}function Fo(e,t){return!t||t===Do?ue.createElement(e):ue.createElementNS(t,e)}function Bo(e,t){for(var i=e.firstChild;i;){var r=i.nextSibling;t.appendChild(i),i=r}return t}function Ui(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var _r={OPTION:function(e,t){var i=e.parentNode;if(i){var r=i.nodeName.toUpperCase();r==="OPTGROUP"&&(i=i.parentNode,r=i&&i.nodeName.toUpperCase()),r==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}Ui(e,t,"selected")},INPUT:function(e,t){Ui(e,t,"checked"),Ui(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var r=e.firstChild;if(r){var n=r.nodeValue;if(n==i||!i&&n==e.placeholder)return;r.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,r=0,n=e.firstChild,o,s;n;)if(s=n.nodeName&&n.nodeName.toUpperCase(),s==="OPTGROUP")o=n,n=o.firstChild;else{if(s==="OPTION"){if(n.hasAttribute("selected")){i=r;break}r++}n=n.nextSibling,!n&&o&&(n=o.nextSibling,o=null)}e.selectedIndex=i}}},Ot=1,Ir=11,Nr=3,Mr=8;function je(){}function Uo(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function $o(e){return function(i,r,n){if(n||(n={}),typeof r=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var o=r;r=ue.createElement("html"),r.innerHTML=o}else r=jo(r);else r.nodeType===Ir&&(r=r.firstElementChild);var s=n.getNodeKey||Uo,a=n.onBeforeNodeAdded||je,l=n.onNodeAdded||je,d=n.onBeforeElUpdated||je,u=n.onElUpdated||je,m=n.onBeforeNodeDiscarded||je,g=n.onNodeDiscarded||je,v=n.onBeforeElChildrenUpdated||je,y=n.skipFromChildren||je,b=n.addChild||function(C,S){return C.appendChild(S)},x=n.childrenOnly===!0,h=Object.create(null),E=[];function T(C){E.push(C)}function c(C,S){if(C.nodeType===Ot)for(var L=C.firstChild;L;){var P=void 0;S&&(P=s(L))?T(P):(g(L),L.firstChild&&c(L,S)),L=L.nextSibling}}function R(C,S,L){m(C)!==!1&&(S&&S.removeChild(C),g(C),c(C,L))}function w(C){if(C.nodeType===Ot||C.nodeType===Ir)for(var S=C.firstChild;S;){var L=s(S);L&&(h[L]=S),w(S),S=S.nextSibling}}w(i);function _(C){l(C);for(var S=C.firstChild;S;){var L=S.nextSibling,P=s(S);if(P){var I=h[P];I&&li(S,I)?(S.parentNode.replaceChild(I,S),H(I,S)):_(S)}else _(S);S=L}}function F(C,S,L){for(;S;){var P=S.nextSibling;(L=s(S))?T(L):R(S,C,!0),S=P}}function H(C,S,L){var P=s(S);P&&delete h[P],!(!L&&(d(C,S)===!1||(e(C,S),u(C),v(C,S)===!1)))&&(C.nodeName!=="TEXTAREA"?B(C,S):_r.TEXTAREA(C,S))}function B(C,S){var L=y(C),P=S.firstChild,I=C.firstChild,Z,te,ie,re,z;e:for(;P;){for(re=P.nextSibling,Z=s(P);!L&&I;){if(ie=I.nextSibling,P.isSameNode&&P.isSameNode(I)){P=re,I=ie;continue e}te=s(I);var ge=I.nodeType,G=void 0;if(ge===P.nodeType&&(ge===Ot?(Z?Z!==te&&((z=h[Z])?ie===z?G=!1:(C.insertBefore(z,I),te?T(te):R(I,C,!0),I=z):G=!1):te&&(G=!1),G=G!==!1&&li(I,P),G&&H(I,P)):(ge===Nr||ge==Mr)&&(G=!0,I.nodeValue!==P.nodeValue&&(I.nodeValue=P.nodeValue))),G){P=re,I=ie;continue e}te?T(te):R(I,C,!0),I=ie}if(Z&&(z=h[Z])&&li(z,P))L||b(C,z),H(z,P);else{var xe=a(P);xe!==!1&&(xe&&(P=xe),P.actualize&&(P=P.actualize(C.ownerDocument||ue)),b(C,P),_(P))}P=re,I=ie}F(C,I,te);var be=_r[C.nodeName];be&&be(C,S)}var O=i,N=O.nodeType,j=r.nodeType;if(!x){if(N===Ot)j===Ot?li(i,r)||(g(i),O=Bo(i,Fo(r.nodeName,r.namespaceURI))):O=r;else if(N===Nr||N===Mr){if(j===N)return O.nodeValue!==r.nodeValue&&(O.nodeValue=r.nodeValue),O;O=r}}if(O===r)g(i);else{if(r.isSameNode&&r.isSameNode(O))return;if(H(O,r,x),E)for(var Q=0,se=E.length;Q<se;Q++){var W=h[E[Q]];W&&R(W,W.parentNode,!1)}}return!x&&O!==i&&i.parentNode&&(O.actualize&&(O=O.actualize(i.ownerDocument||ue)),i.parentNode.replaceChild(O,i)),O}}var Vo=$o(Lo),Hr=Vo,ui=class{static patchEl(e,t,i){Hr(e,t,{childrenOnly:!1,onBeforeElUpdated:(r,n)=>{if(i&&i.isSameNode(r)&&f.isFormInput(r))return f.mergeFocusedInput(r,n),!1}})}constructor(e,t,i,r,n,o){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=r,this.streams=n,this.streamInserts={},this.targetCID=o,this.cidPatch=Fe(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){let e=this.liveSocket.binding(vi);f.all(this.container,`[${e}=${Mi}]`,t=>t.innerHTML=""),f.all(this.container,`[${e}=append] > *, [${e}=prepend] > *`,t=>{t.setAttribute(wr,"")})}perform(){let{view:e,liveSocket:t,container:i,html:r}=this,n=this.isCIDPatch()?this.targetCIDContainer(r):i;if(this.isCIDPatch()&&!n)return;let o=t.getActiveElement(),{selectionStart:s,selectionEnd:a}=o&&f.hasSelectionRange(o)?o:{},l=t.binding(vi),d=t.binding(pi),u=t.binding(qi),m=t.binding(ao),g=[],v=[],y=[],b=null,x=t.time("premorph container prep",()=>this.buildDiffHTML(i,r,l,n));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{this.streams.forEach(([h,E])=>{this.streamInserts=Object.assign(this.streamInserts,h),E.forEach(T=>{let c=i.querySelector(`[id="${T}"]`);c&&(this.maybePendingRemove(c)||(c.remove(),this.onNodeDiscarded(c)))})}),Hr(n,x,{childrenOnly:n.getAttribute(he)===null,getNodeKey:h=>f.isPhxDestroyed(h)?null:h.id,skipFromChildren:h=>h.getAttribute(l)===Mi,addChild:(h,E)=>{let T=E.id?this.streamInserts[E.id]:void 0;if(T===void 0)return h.appendChild(E);if(T===0)h.insertAdjacentElement("afterbegin",E);else if(T===-1)h.appendChild(E);else if(T>0){let c=Array.from(h.children)[T];h.insertBefore(E,c)}},onBeforeNodeAdded:h=>(this.trackBefore("added",h),h),onNodeAdded:h=>{h instanceof HTMLImageElement&&h.srcset?h.srcset=h.srcset:h instanceof HTMLVideoElement&&h.autoplay&&h.play(),f.isNowTriggerFormExternal(h,m)&&(b=h),f.discardError(n,h,d),(f.isPhxChild(h)&&e.ownsElement(h)||f.isPhxSticky(h)&&e.ownsElement(h.parentNode))&&this.trackAfter("phxChildAdded",h),g.push(h)},onNodeDiscarded:h=>this.onNodeDiscarded(h),onBeforeNodeDiscarded:h=>h.getAttribute&&h.getAttribute(wr)!==null?!0:!(h.parentElement!==null&&h.id&&f.isPhxUpdate(h.parentElement,l,[Mi,"append","prepend"])||this.maybePendingRemove(h)||this.skipCIDSibling(h)),onElUpdated:h=>{f.isNowTriggerFormExternal(h,m)&&(b=h),v.push(h),this.maybeReOrderStream(h)},onBeforeElUpdated:(h,E)=>{if(f.cleanChildNodes(E,l),this.skipCIDSibling(E)||f.isPhxSticky(h))return!1;if(f.isIgnored(h,l)||h.form&&h.form.isSameNode(b))return this.trackBefore("updated",h,E),f.mergeAttrs(h,E,{isIgnored:!0}),v.push(h),f.applyStickyOperations(h),!1;if(h.type==="number"&&h.validity&&h.validity.badInput)return!1;if(!f.syncPendingRef(h,E,u))return f.isUploadInput(h)&&(this.trackBefore("updated",h,E),v.push(h)),f.applyStickyOperations(h),!1;if(f.isPhxChild(E)){let c=h.getAttribute(Ue);return f.mergeAttrs(h,E,{exclude:[Rt]}),c!==""&&h.setAttribute(Ue,c),h.setAttribute(Dt,this.rootID),f.applyStickyOperations(h),!1}return f.copyPrivates(E,h),f.discardError(n,E,d),o&&h.isSameNode(o)&&f.isFormInput(h)&&h.type!=="hidden"?(this.trackBefore("updated",h,E),f.mergeFocusedInput(h,E),f.syncAttrsToProps(h),v.push(h),f.applyStickyOperations(h),!1):(f.isPhxUpdate(E,l,["append","prepend"])&&y.push(new Ro(h,E,E.getAttribute(l))),f.syncAttrsToProps(E),f.applyStickyOperations(E),this.trackBefore("updated",h,E),!0)}})}),t.isDebugEnabled()&&Ao(),y.length>0&&t.time("post-morph append/prepend restoration",()=>{y.forEach(h=>h.perform())}),t.silenceEvents(()=>f.restoreFocus(o,s,a)),f.dispatchEvent(document,"phx:update"),g.forEach(h=>this.trackAfter("added",h)),v.forEach(h=>this.trackAfter("updated",h)),this.transitionPendingRemoves(),b&&(t.unload(),b.submit()),!0}onNodeDiscarded(e){(f.isPhxChild(e)||f.isPhxSticky(e))&&this.liveSocket.destroyViewByEl(e),this.trackAfter("discarded",e)}maybePendingRemove(e){return e.getAttribute&&e.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(e),!0):!1}maybeReOrderStream(e){let t=e.id?this.streamInserts[e.id]:void 0;if(t!==void 0){if(t===0)e.parentElement.insertBefore(e,e.parentElement.firstElementChild);else if(t>0){let i=Array.from(e.parentElement.children),r=i.indexOf(e);if(t>=i.length-1)e.parentElement.appendChild(e);else{let n=i[t];r>t?e.parentElement.insertBefore(e,n):e.parentElement.insertBefore(e,n.nextElementSibling)}}}}transitionPendingRemoves(){let{pendingRemoves:e,liveSocket:t}=this;e.length>0&&(t.transitionRemoves(e),t.requestDOMUpdate(()=>{e.forEach(i=>{let r=f.firstPhxChild(i);r&&t.destroyViewByEl(r),i.remove()}),this.trackAfter("transitionsDiscarded",e)}))}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(Vi)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=f.findComponentNodeList(this.container,this.targetCID);return i.length===0&&f.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,r){let n=this.isCIDPatch(),o=n&&r.getAttribute(he)===this.targetCID.toString();if(!n||o)return t;{let s=null,a=document.createElement("template");s=f.cloneNode(r);let[l,...d]=f.findComponentNodeList(s,this.targetCID);return a.innerHTML=t,d.forEach(u=>u.remove()),Array.from(s.childNodes).forEach(u=>{u.id&&u.nodeType===Node.ELEMENT_NODE&&u.getAttribute(he)!==this.targetCID.toString()&&(u.setAttribute(Vi,""),u.innerHTML="")}),Array.from(a.content.childNodes).forEach(u=>s.insertBefore(u,l)),l.remove(),s.outerHTML}}indexOf(e,t){return Array.from(e.children).indexOf(t)}},jr=class{static extract(e){let{[Pr]:t,[Or]:i,[Rr]:r}=e;return delete e[Pr],delete e[Or],delete e[Rr],{diff:e,title:r,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){let[t,i]=this.recursiveToString(this.rendered,this.rendered[de],e);return[t,i]}recursiveToString(e,t=e[de],i){i=i?new Set(i):null;let r={buffer:"",components:t,onlyCids:i,streams:new Set};return this.toOutputBuffer(e,null,r),[r.buffer,r.streams]}componentCIDs(e){return Object.keys(e[de]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[de]?Object.keys(e).length===1:!1}getComponent(e,t){return e[de][t]}mergeDiff(e){let t=e[de],i={};if(delete e[de],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[de]=this.rendered[de]||{},t){let r=this.rendered[de];for(let n in t)t[n]=this.cachedFindComponent(n,t[n],r,t,i);for(let n in t)r[n]=t[n];e[de]=t}}cachedFindComponent(e,t,i,r,n){if(n[e])return n[e];{let o,s,a=t[ke];if(Fe(a)){let l;a>0?l=this.cachedFindComponent(a,r[a],i,r,n):l=i[-a],s=l[ke],o=this.cloneMerge(l,t),o[ke]=s}else o=t[ke]!==void 0?t:this.cloneMerge(i[e]||{},t);return n[e]=o,o}}mutableMerge(e,t){return t[ke]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let r=t[i],n=e[i];kt(r)&&r[ke]===void 0&&kt(n)?this.doMutableMerge(n,r):e[i]=r}}cloneMerge(e,t){let i={...e,...t};for(let r in i){let n=t[r],o=e[r];kt(n)&&n[ke]===void 0&&kt(o)&&(i[r]=this.cloneMerge(o,n))}return i}componentToString(e){let[t,i]=this.recursiveCIDToString(this.rendered[de],e);return[t,i]}pruneCIDs(e){e.forEach(t=>delete this.rendered[de][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[ke]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[si])return this.comprehensionToBuffer(e,t,i);let{[ke]:r}=e;r=this.templateStatic(r,t),i.buffer+=r[0];for(let n=1;n<r.length;n++)this.dynamicToBuffer(e[n-1],t,i),i.buffer+=r[n]}comprehensionToBuffer(e,t,i){let{[si]:r,[ke]:n,[wo]:o}=e,[s,a]=o||[{},[]];n=this.templateStatic(n,t);let l=t||e[yo];for(let d=0;d<r.length;d++){let u=r[d];i.buffer+=n[0];for(let m=1;m<n.length;m++)this.dynamicToBuffer(u[m-1],l,i),i.buffer+=n[m]}o!==void 0&&(e[si].length>0||a.length>0)&&(e[si]=[],i.streams.add(o))}dynamicToBuffer(e,t,i){if(typeof e=="number"){let[r,n]=this.recursiveCIDToString(i.components,e,i.onlyCids);i.buffer+=r,i.streams=new Set([...i.streams,...n])}else kt(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let r=e[t]||oe(`no component for CID ${t}`,e),n=document.createElement("template"),[o,s]=this.recursiveToString(r,e,i);n.innerHTML=o;let a=n.content,l=i&&!i.has(t),[d,u]=Array.from(a.childNodes).reduce(([m,g],v,y)=>v.nodeType===Node.ELEMENT_NODE?v.getAttribute(he)?[m,!0]:(v.setAttribute(he,t),v.id||(v.id=`${this.parentViewId()}-${t}-${y}`),l&&(v.setAttribute(Vi,""),v.innerHTML=""),[!0,g]):v.nodeValue.trim()!==""?(oe(`only HTML element tags are allowed at the root of components.

got: "${v.nodeValue.trim()}"

within:
`,n.innerHTML.trim()),v.replaceWith(this.createSpan(v.nodeValue,t)),[!0,g]):(v.remove(),[m,g]),[!1,!1]);return!d&&!u?(oe(`expected at least one HTML element tag inside a component, but the component is empty:
`,n.innerHTML.trim()),[this.createSpan("",t).outerHTML,s]):!d&&u?(oe("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",n.innerHTML.trim()),[n.innerHTML,s]):[n.innerHTML,s]}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(he,t),i}},Wo=1,Pt=class{static makeID(){return Wo++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let r in this.__callbacks)this[r]=this.__callbacks[r]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(null,e,t,i)}pushEventTo(e,t,i={},r=function(){}){return this.__view.withinTargets(e,(n,o)=>n.pushHookEvent(o,t,i,r))}handleEvent(e,t){let i=(r,n)=>n?e:t(r.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,r=>r.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},ci=null,qo={exec(e,t,i,r,n){let[o,s]=n||[null,{}];(t.charAt(0)==="["?JSON.parse(t):[[o,s]]).forEach(([l,d])=>{l===o&&s.data&&(d.data=Object.assign(d.data||{},s.data)),this.filterToEls(r,d).forEach(u=>{this[`exec_${l}`](e,t,i,r,u,d)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_exec(e,t,i,r,n,[o,s]){(s?f.all(document,s):[r]).forEach(l=>{let d=l.getAttribute(o);if(!d)throw new Error(`expected ${o} to contain JS command on "${s}"`);i.liveSocket.execJS(l,d,e)})},exec_dispatch(e,t,i,r,n,{to:o,event:s,detail:a,bubbles:l}){a=a||{},a.dispatcher=r,f.dispatchEvent(n,s,{detail:a,bubbles:l})},exec_push(e,t,i,r,n,o){if(!i.isConnected())return;let{event:s,data:a,target:l,page_loading:d,loading:u,value:m,dispatcher:g}=o,v={loading:u,value:m,target:l,page_loading:!!d},y=e==="change"&&g?g:r,b=l||y.getAttribute(i.binding("target"))||y;i.withinTargets(b,(x,h)=>{if(e==="change"){let{newCid:E,_target:T,callback:c}=o;T=T||(f.isFormInput(r)?r.name:void 0),T&&(v._target=T),x.pushInput(r,h,E,s||t,v,c)}else if(e==="submit"){let{submitter:E}=o;x.submitForm(r,h,s||t,E,v)}else x.pushEvent(e,r,h,s||t,a,v)})},exec_navigate(e,t,i,r,n,{href:o,replace:s}){i.liveSocket.historyRedirect(o,s?"replace":"push")},exec_patch(e,t,i,r,n,{href:o,replace:s}){i.liveSocket.pushHistoryPatch(o,s?"replace":"push",r)},exec_focus(e,t,i,r,n){window.requestAnimationFrame(()=>at.attemptFocus(n))},exec_focus_first(e,t,i,r,n){window.requestAnimationFrame(()=>at.focusFirstInteractive(n)||at.focusFirst(n))},exec_push_focus(e,t,i,r,n){window.requestAnimationFrame(()=>ci=n||r)},exec_pop_focus(e,t,i,r,n){window.requestAnimationFrame(()=>{ci&&ci.focus(),ci=null})},exec_add_class(e,t,i,r,n,{names:o,transition:s,time:a}){this.addOrRemoveClasses(n,o,[],s,a,i)},exec_remove_class(e,t,i,r,n,{names:o,transition:s,time:a}){this.addOrRemoveClasses(n,[],o,s,a,i)},exec_transition(e,t,i,r,n,{time:o,transition:s}){this.addOrRemoveClasses(n,[],[],s,o,i)},exec_toggle(e,t,i,r,n,{display:o,ins:s,outs:a,time:l}){this.toggle(e,i,n,o,s,a,l)},exec_show(e,t,i,r,n,{display:o,transition:s,time:a}){this.show(e,i,n,o,s,a)},exec_hide(e,t,i,r,n,{display:o,transition:s,time:a}){this.hide(e,i,n,o,s,a)},exec_set_attr(e,t,i,r,n,{attr:[o,s]}){this.setOrRemoveAttrs(n,[[o,s]],[])},exec_remove_attr(e,t,i,r,n,{attr:o}){this.setOrRemoveAttrs(n,[],[o])},show(e,t,i,r,n,o){this.isVisible(i)||this.toggle(e,t,i,r,n,null,o)},hide(e,t,i,r,n,o){this.isVisible(i)&&this.toggle(e,t,i,r,null,n,o)},toggle(e,t,i,r,n,o,s){let[a,l,d]=n||[[],[],[]],[u,m,g]=o||[[],[],[]];if(a.length>0||u.length>0)if(this.isVisible(i)){let v=()=>{this.addOrRemoveClasses(i,m,a.concat(l).concat(d)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,u,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,g,m))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(s,v,()=>{this.addOrRemoveClasses(i,[],u.concat(g)),f.putSticky(i,"toggle",y=>y.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let v=()=>{this.addOrRemoveClasses(i,l,u.concat(m).concat(g));let y=r||this.defaultDisplay(i);f.putSticky(i,"toggle",b=>b.style.display=y),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,d,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(s,v,()=>{this.addOrRemoveClasses(i,[],a.concat(d)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),f.putSticky(i,"toggle",v=>v.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start"));let v=r||this.defaultDisplay(i);f.putSticky(i,"toggle",y=>y.style.display=v),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,r,n,o){let[s,a,l]=r||[[],[],[]];if(s.length>0){let d=()=>this.addOrRemoveClasses(e,a.concat(s),[]),u=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(s).concat(a));return o.transition(n,d,u)}window.requestAnimationFrame(()=>{let[d,u]=f.getSticky(e,"classes",[[],[]]),m=t.filter(b=>d.indexOf(b)<0&&!e.classList.contains(b)),g=i.filter(b=>u.indexOf(b)<0&&e.classList.contains(b)),v=d.filter(b=>i.indexOf(b)<0).concat(m),y=u.filter(b=>t.indexOf(b)<0).concat(g);f.putSticky(e,"classes",b=>(b.classList.remove(...y),b.classList.add(...v),[v,y]))})},setOrRemoveAttrs(e,t,i){let[r,n]=f.getSticky(e,"attrs",[[],[]]),o=t.map(([l,d])=>l).concat(i),s=r.filter(([l,d])=>!o.includes(l)).concat(t),a=n.filter(l=>!o.includes(l)).concat(i);f.putSticky(e,"attrs",l=>(a.forEach(d=>l.removeAttribute(d)),s.forEach(([d,u])=>l.setAttribute(d,u)),[s,a]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?f.all(document,t):[e]},defaultDisplay(e){return{tr:"table-row",td:"table-cell"}[e.tagName.toLowerCase()]||"block"}},Pe=qo,di=(e,t,i=[])=>{let{submitter:r,...n}=t,o=new FormData(e);r&&r.hasAttribute("name")&&r.form&&r.form===e&&o.append(r.name,r.value);let s=[];o.forEach((l,d,u)=>{l instanceof File&&s.push(d)}),s.forEach(l=>o.delete(l));let a=new URLSearchParams;for(let[l,d]of o.entries())(i.length===0||i.indexOf(l)>=0)&&a.append(l,d);for(let l in n)a.append(l,n[l]);return a.toString()},Wr=class{constructor(e,t,i,r,n){this.isDead=!1,this.liveSocket=t,this.flash=r,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(o){o&&o()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(n),session:this.getSession(),static:this.getStatic(),flash:this.flash}))}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(Ji)}connectParams(e){let t=this.liveSocket.params(this.el),i=f.all(document,`[${this.binding(no)}]`).map(r=>r.src||r.href).filter(r=>typeof r=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._live_referer=e,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(Ue)}getStatic(){let e=this.el.getAttribute(Rt);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};f.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(Ar,_i,Sr),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(_i)}}execAll(e){f.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(Ar),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(Fe(e))f.findComponentNodeList(this.el,e).length===0?oe(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&oe(`nothing found matching the phx-target selector "${e}"`),i.forEach(r=>this.liveSocket.owner(r,n=>t(n,r)))}}applyDiff(e,t,i){this.log(e,()=>["",fi(t)]);let{diff:r,reply:n,events:o,title:s}=jr.extract(t);i({diff:r,reply:n,events:o}),s&&window.requestAnimationFrame(()=>f.putTitle(s))}onJoin(e){let{rendered:t,container:i}=e;if(i){let[r,n]=i;this.el=f.replaceRootContainer(this.el,r,n)}this.childJoins=0,this.joinPending=!0,this.flash=null,Oe.dropLocal(this.liveSocket.localStorage,window.location.pathname,Fr),this.applyDiff("mount",t,({diff:r,events:n})=>{this.rendered=new jr(this.id,r);let[o,s]=this.renderContainer(null,"join");this.dropPendingRefs();let a=this.formsForRecovery(o);this.joinCount++,a.length>0?a.forEach(([l,d,u],m)=>{this.pushFormRecovery(l,u,g=>{m===a.length-1&&this.onJoinComplete(g,o,s,n)})}):this.onJoinComplete(e,o,s,n)})}dropPendingRefs(){f.all(document,`[${Xe}="${this.id}"][${Re}]`,e=>{e.removeAttribute(Re),e.removeAttribute(Xe)})}onJoinComplete({live_patch:e},t,i,r){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i,r);f.findPhxChildrenInFragment(t,this.id).filter(o=>{let s=o.id&&this.el.querySelector(`[id="${o.id}"]`),a=s&&s.getAttribute(Rt);return a&&o.setAttribute(Rt,a),this.joinChild(o)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,r)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i,r)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,r)])}attachTrueDocEl(){this.el=f.byId(this.id),this.el.setAttribute(Dt,this.root.id)}execNewMounted(){f.all(this.el,`[${this.binding(Ct)}], [data-phx-${Ct}]`,e=>{this.maybeAddNewHook(e)}),f.all(this.el,`[${this.binding(Tr)}]`,e=>this.maybeMounted(e))}applyJoinPatch(e,t,i,r){this.attachTrueDocEl();let n=new ui(this,this.el,this.id,t,i,null);if(n.markPrunableContentForRemoval(),this.performPatch(n,!1),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(r),this.applyPendingUpdates(),e){let{kind:o,to:s}=e;this.liveSocket.historyPatch(s,o)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),r=i&&f.isIgnored(e,this.binding(vi));if(i&&!e.isEqualNode(t)&&!(r&&xo(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(Tr)),i=t&&f.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),f.putPrivate(e,"mounted",!0))}maybeAddNewHook(e,t){let i=this.addHook(e);i&&i.__mounted()}performPatch(e,t){let i=[],r=!1,n=new Set;return e.after("added",o=>{this.liveSocket.triggerDOM("onNodeAdded",[o]),this.maybeAddNewHook(o),o.getAttribute&&this.maybeMounted(o)}),e.after("phxChildAdded",o=>{f.isPhxSticky(o)?this.liveSocket.joinRootViews():r=!0}),e.before("updated",(o,s)=>{this.triggerBeforeUpdateHook(o,s)&&n.add(o.id)}),e.after("updated",o=>{n.has(o.id)&&this.getHook(o).__updated()}),e.after("discarded",o=>{o.nodeType===Node.ELEMENT_NODE&&i.push(o)}),e.after("transitionsDiscarded",o=>this.afterElementsRemoved(o,t)),e.perform(),this.afterElementsRemoved(i,t),r}afterElementsRemoved(e,t){let i=[];e.forEach(r=>{let n=f.all(r,`[${he}]`),o=f.all(r,`[${this.binding(Ct)}]`);n.concat(r).forEach(s=>{let a=this.componentID(s);Fe(a)&&i.indexOf(a)===-1&&i.push(a)}),o.concat(r).forEach(s=>{let a=this.getHook(s);a&&this.destroyHook(a)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){f.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(st)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new Wr(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{f.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(n=>{this.componentPatch(this.rendered.getComponent(e,n),n)&&(i=!0)})}):Lr(e)||this.liveSocket.time("full patch complete",()=>{let[r,n]=this.renderContainer(e,"update"),o=new ui(this,this.el,this.id,r,n,null);i=this.performPatch(o,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,r=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,[n,o]=this.rendered.toString(r);return[`<${i}>${n}</${i}>`,o]})}componentPatch(e,t){if(Lr(e))return!1;let[i,r]=this.rendered.componentToString(t),n=new ui(this,this.el,this.id,i,r,t);return this.performPatch(n,!0)}getHook(e){return this.viewHooks[Pt.elementID(e)]}addHook(e){if(Pt.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Ct}`)||e.getAttribute(this.binding(Ct));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||oe(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let r=new Pt(this,e,i);return this.viewHooks[Pt.elementID(r.el)]=r,r}else t!==null&&oe(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[Pt.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let i in t)e(this.getChildById(i))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:i,flash:r}=e,n=this.expandURL(t);this.liveSocket.historyRedirect(n,i,r)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="reload")return this.log("error",()=>[`failed mount with ${e.status}. Falling back to page request`,e]),this.onRedirect({to:this.href});if(e.reason==="unauthorized"||e.reason==="stale")return this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href});if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(mo)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||this.displayError()}displayError(){this.isMain()&&f.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(_i,Sr),this.execAll(this.binding("disconnected"))}pushWithReply(e,t,i,r=function(){}){if(!this.isConnected())return;let[n,[o],s]=e?e():[null,[],{}],a=function(){};return(s.page_loading||o&&o.getAttribute(this.binding(Er))!==null)&&(a=this.liveSocket.withPageLoading({kind:"element",target:o})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,go).receive("ok",l=>{let d=u=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),n!==null&&this.undoRefs(n),a(),r(l,u)};l.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",l.diff,({diff:u,reply:m,events:g})=>{this.update(u,g),d(m)})}):d(null)}))}undoRefs(e){!this.isConnected()||f.all(document,`[${Xe}="${this.id}"][${Re}="${e}"]`,t=>{let i=t.getAttribute(ii);t.removeAttribute(Re),t.removeAttribute(Xe),t.getAttribute(Ni)!==null&&(t.readOnly=!1,t.removeAttribute(Ni)),i!==null&&(t.disabled=i==="true",t.removeAttribute(ii)),Br.forEach(o=>f.removeClass(t,o));let r=t.getAttribute(ri);r!==null&&(t.innerText=r,t.removeAttribute(ri));let n=f.private(t,Re);if(n){let o=this.triggerBeforeUpdateHook(t,n);ui.patchEl(t,n,this.liveSocket.getActiveElement()),o&&o.__updated(),f.deletePrivate(t,Re)}})}putRef(e,t,i={}){let r=this.ref++,n=this.binding(qi);return i.loading&&(e=e.concat(f.all(document,i.loading))),e.forEach(o=>{o.classList.add(`phx-${t}-loading`),o.setAttribute(Re,r),o.setAttribute(Xe,this.el.id);let s=o.getAttribute(n);s!==null&&(o.getAttribute(ri)||o.setAttribute(ri,o.innerText),s!==""&&(o.innerText=s),o.setAttribute("disabled",""))}),[r,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(he);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(Fe(t))return t;let r=e.getAttribute(this.binding("target"));return Fe(r)?parseInt(r):t&&(r!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return Fe(e)?e:e?Be(e.closest(`[${he}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,r){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",t,i]),!1;let[n,o,s]=this.putRef([],"hook");return this.pushWithReply(()=>[n,o,s],"event",{type:"hook",event:t,value:i,cid:this.closestComponentID(e)},(a,l)=>r(l,n)),n}extractMeta(e,t,i){let r=this.binding("value-");for(let n=0;n<e.attributes.length;n++){t||(t={});let o=e.attributes[n].name;o.startsWith(r)&&(t[o.replace(r,"")]=e.getAttribute(o))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&$r.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let n in i)t[n]=i[n]}return t}pushEvent(e,t,i,r,n,o={}){this.pushWithReply(()=>this.putRef([t],e,o),"event",{type:e,event:r,value:this.extractMeta(t,n,o.value),cid:this.targetComponentID(t,i,o)})}pushFileProgress(e,t,i,r=function(){}){this.liveSocket.withinOwners(e.form,(n,o)=>{n.pushWithReply(null,"progress",{event:e.getAttribute(n.binding(fo)),ref:e.getAttribute(Je),entry_ref:t,progress:i,cid:n.targetComponentID(e.form,o)},r)})}pushInput(e,t,i,r,n,o){let s,a=Fe(i)?i:this.targetComponentID(e.form,t),l=()=>this.putRef([e,e.form],"change",n),d;e.getAttribute(this.binding("change"))?d=di(e.form,{_target:n._target},[e.name]):d=di(e.form,{_target:n._target}),f.isUploadInput(e)&&e.files&&e.files.length>0&&ne.trackFiles(e,Array.from(e.files)),s=ne.serializeUploads(e);let u={type:"form",event:r,value:d,uploads:s,cid:a};this.pushWithReply(l,"event",u,m=>{if(f.showError(e,this.liveSocket.binding(pi)),f.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if(ne.filesAwaitingPreflight(e).length>0){let[g,v]=l();this.uploadFiles(e.form,t,g,a,y=>{o&&o(m),this.triggerAwaitingSubmit(e.form)})}}else o&&o(m)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,r,n,o]=t;this.cancelSubmit(e),o()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,r,n])=>t.isSameNode(e))}scheduleSubmit(e,t,i,r){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,r])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,r])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}disableForm(e,t={}){let i=u=>!(Lt(u,`${this.binding(vi)}=ignore`,u.form)||Lt(u,"data-phx-update=ignore",u.form)),r=u=>u.hasAttribute(this.binding(qi)),n=u=>u.tagName=="BUTTON",o=u=>["INPUT","TEXTAREA","SELECT"].includes(u.tagName),s=Array.from(e.elements),a=s.filter(r),l=s.filter(n).filter(i),d=s.filter(o).filter(i);return l.forEach(u=>{u.setAttribute(ii,u.disabled),u.disabled=!0}),d.forEach(u=>{u.setAttribute(Ni,u.readOnly),u.readOnly=!0,u.files&&(u.setAttribute(ii,u.disabled),u.disabled=!0)}),e.setAttribute(this.binding(Er),""),this.putRef([e].concat(a).concat(l).concat(d),"submit",t)}pushFormSubmit(e,t,i,r,n,o){let s=()=>this.disableForm(e,n),a=this.targetComponentID(e,t);if(ne.hasUploadsInProgress(e)){let[l,d]=s(),u=()=>this.pushFormSubmit(e,r,t,i,n,o);return this.scheduleSubmit(e,l,n,u)}else if(ne.inputsAwaitingPreflight(e).length>0){let[l,d]=s(),u=()=>[l,d,n];this.uploadFiles(e,t,l,a,m=>{let g=di(e,{submitter:r});this.pushWithReply(u,"event",{type:"form",event:i,value:g,cid:a},o)})}else{let l=di(e,{submitter:r});this.pushWithReply(s,"event",{type:"form",event:i,value:l,cid:a},o)}}uploadFiles(e,t,i,r,n){let o=this.joinCount,s=ne.activeFileInputs(e),a=s.length;s.forEach(l=>{let d=new ne(l,this,()=>{a--,a===0&&n()});this.uploaders[l]=d;let u=d.entries().map(g=>g.toPreflightPayload()),m={ref:l.getAttribute(Je),entries:u,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",m]),this.pushWithReply(null,"allow_upload",m,g=>{if(this.log("upload",()=>["got preflight response",g]),g.error){this.undoRefs(i);let[v,y]=g.error;this.log("upload",()=>[`error for entry ${v}`,y])}else{let v=y=>{this.channel.onError(()=>{this.joinCount===o&&y()})};d.initAdapterUpload(g,v,this.liveSocket)}})})}dispatchUploads(e,t){let i=f.findUploadInputs(this.el).filter(r=>r.name===e);i.length===0?oe(`no live file inputs found matching the name "${e}"`):i.length>1?oe(`duplicate live file inputs found matching the name "${e}"`):f.dispatchEvent(i[0],Ur,{detail:{files:t}})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(r,n)=>{let o=Array.from(e.elements).find(a=>f.isFormInput(a)&&a.type!=="hidden"&&!a.hasAttribute(this.binding("change"))),s=e.getAttribute(this.binding(Cr))||e.getAttribute(this.binding("change"));Pe.exec("change",s,r,o,["push",{_target:o.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let r=this.liveSocket.setPendingLink(e),n=t?()=>this.putRef([t],"click"):null,o=()=>this.liveSocket.redirect(window.location.href),s=this.pushWithReply(n,"live_patch",{url:e},a=>{this.liveSocket.requestDOMUpdate(()=>{a.link_redirect?this.liveSocket.replaceMain(e,null,i,r):(this.liveSocket.commitPendingLink(r)&&(this.href=e),this.applyPendingUpdates(),i&&i(r))})});s?s.receive("timeout",o):o()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,f.all(this.el,`form[${t}]`).filter(r=>r.id&&this.ownsElement(r)).filter(r=>r.elements.length>0).filter(r=>r.getAttribute(this.binding(Cr))!=="ignore").map(r=>{let n=i.content.querySelector(`form[id="${r.id}"][${t}="${r.getAttribute(t)}"]`);return n?[r,n,this.targetComponentID(n)]:[r,null,null]}).filter(([r,n,o])=>n)}maybePushComponentsDestroyed(e){let t=e.filter(i=>f.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(r=>t.indexOf(r)!==-1);let i=t.filter(r=>f.findComponentNodeList(this.el,r).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},r=>{this.rendered.pruneCIDs(r.cids)})}))}ownsElement(e){let t=e.closest(lt);return e.getAttribute(st)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,i,r,n={}){f.putPrivate(e,mi,!0);let o=this.liveSocket.binding(pi),s=Array.from(e.elements);s.forEach(a=>f.putPrivate(a,mi,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,r,n,()=>{s.forEach(a=>f.showError(a,o)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},qr=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||vo,this.opts=i,this.params=Fi(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(fi(bo),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=fi(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||po,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||eo,this.reloadJitterMin=i.reloadJitterMin||to,this.reloadJitterMax=i.reloadJitterMax||io,this.failsafeJitter=i.failsafeJitter||ro,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:Fi(),onBeforeElUpdated:Fi()},i.dom||{}),this.transitions=new Xo,window.addEventListener("pagehide",r=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(Hi)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(ni)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(ni)==="false"}enableDebug(){this.sessionStorage.setItem(ni,"true")}enableProfiling(){this.sessionStorage.setItem(Hi,"true")}disableDebug(){this.sessionStorage.setItem(ni,"false")}disableProfiling(){this.sessionStorage.removeItem(Hi)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(ji,e)}disableLatencySim(){this.sessionStorage.removeItem(ji)}getLatencySim(){let e=this.sessionStorage.getItem(ji);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,r=>Pe.exec(i,t,r,e))}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[r,n]=i();this.viewLogger(e,t,r,n)}else if(this.isDebugEnabled()){let[r,n]=i();So(e,t,r,n)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,r=>{let n=this.getLatencySim();n?setTimeout(()=>i(r),n):i(r)})}wrapPush(e,t,i){let r=this.getLatencySim(),n=e.joinCount;if(!r)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===n&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();let o={receives:[],receive(s,a){this.receives.push([s,a])}};return setTimeout(()=>{e.isDestroyed()||o.receives.reduce((s,[a,l])=>s.receive(a,l),i())},r),o}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,r=this.reloadJitterMax,n=Math.floor(Math.random()*(r-i+1))+i,o=Oe.updateLocal(this.localStorage,window.location.pathname,Fr,0,s=>s+1);o>this.maxReloads&&(n=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${o} consecutive reloads`]),o>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},n)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?Po[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinDeadView(){let e=document.body;if(e&&!this.isPhxView(e)&&!this.isPhxView(document.firstElementChild)){let t=this.newRootView(e);t.setHref(this.getHref()),t.joinDead(),this.main||(this.main=t),window.requestAnimationFrame(()=>t.execNewMounted())}}joinRootViews(){let e=!1;return f.all(document,`${lt}:not([${st}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.hasAttribute(Ji)&&(this.main=i)}e=!0}),e}redirect(e,t){this.unload(),Oe.redirect(e,t)}replaceMain(e,t,i=null,r=this.setPendingLink(e)){let n=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let o=f.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(o,t,n),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((s,a)=>{s===1&&this.commitPendingLink(r)&&this.requestDOMUpdate(()=>{f.findPhxSticky(document).forEach(l=>o.appendChild(l)),this.outgoingMainEl.replaceWith(o),this.outgoingMainEl=null,i&&requestAnimationFrame(i),a()})})}transitionRemoves(e){let t=this.binding("remove");e=e||f.all(document,`[${t}]`),e.forEach(i=>{document.body.contains(i)&&this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(Ue)!==null}newRootView(e,t,i){let r=new Wr(e,this,null,t,i);return this.roots[r.id]=r,r}owner(e,t){let i=Be(e.closest(lt),r=>this.getViewByEl(r))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(Dt);return Be(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(Dt));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:e}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(t=>{if(t&&t.code===1001)return this.unload();if(t&&t.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),e||this.bindNav(),this.bindClicks(),e||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,i,r,n,o,s)=>{let a=n.getAttribute(this.binding(ho)),l=t.key&&t.key.toLowerCase();if(a&&a.toLowerCase()!==l)return;let d={key:t.key,...this.eventMeta(i,t,n)};Pe.exec(i,o,r,n,["push",{data:d}])}),this.bind({blur:"focusout",focus:"focusin"},(t,i,r,n,o,s)=>{if(!s){let a={key:t.key,...this.eventMeta(i,t,n)};Pe.exec(i,o,r,n,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(t,i,r,n,o,s,a)=>{if(a==="window"){let l=this.eventMeta(i,t,n);Pe.exec(i,s,r,n,["push",{data:l}])}}),window.addEventListener("dragover",t=>t.preventDefault()),window.addEventListener("drop",t=>{t.preventDefault();let i=Be(Lt(t.target,this.binding(yr)),o=>o.getAttribute(this.binding(yr))),r=i&&document.getElementById(i),n=Array.from(t.dataTransfer.files||[]);!r||r.disabled||n.length===0||!(r.files instanceof FileList)||(ne.trackFiles(r,n,t.dataTransfer),r.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Ur,t=>{let i=t.target;if(!f.isUploadInput(i))return;let r=Array.from(t.detail.files||[]).filter(n=>n instanceof File||n instanceof Blob);ne.trackFiles(i,r),i.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let r=this.metadataCallbacks[e];return r?r(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let r=e[i];this.on(r,n=>{let o=this.binding(i),s=this.binding(`window-${i}`),a=n.target.getAttribute&&n.target.getAttribute(o);a?this.debounce(n.target,n,r,()=>{this.withinOwners(n.target,l=>{t(n,i,l,n.target,a,null)})}):f.all(document,`[${s}]`,l=>{let d=l.getAttribute(s);this.debounce(l,n,r,()=>{this.withinOwners(l,u=>{t(n,i,u,l,d,"window")})})})})}}bindClicks(){window.addEventListener("click",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let r=this.binding(t);window.addEventListener(e,n=>{let o=null;if(i)o=n.target.matches(`[${r}]`)?n.target:n.target.querySelector(`[${r}]`);else{let a=this.clickStartedAtTarget||n.target;o=Lt(a,r),this.dispatchClickAway(n,a),this.clickStartedAtTarget=null}let s=o&&o.getAttribute(r);if(!s){let a=n.target instanceof HTMLAnchorElement?n.target.getAttribute("href"):null;!i&&a!==null&&!f.wantsNewTab(n)&&f.isNewPageHref(a,window.location)&&this.unload();return}o.getAttribute("href")==="#"&&n.preventDefault(),this.debounce(o,n,"click",()=>{this.withinOwners(o,a=>{Pe.exec("click",s,a,o,["push",{data:this.eventMeta("click",n,o)}])})})},i)}dispatchClickAway(e,t){let i=this.binding("click-away");f.all(document,`[${i}]`,r=>{r.isSameNode(t)||r.contains(t)||this.withinOwners(e.target,n=>{let o=r.getAttribute(i);Pe.isVisible(r)&&Pe.exec("click",o,n,r,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!Oe.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{Oe.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:r,root:n,scroll:o}=t.state||{},s=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&r===this.main.id?this.main.pushLinkPatch(s,null,()=>{this.maybeScroll(o)}):this.replaceMain(s,null,()=>{n&&this.replaceRootHistory(),this.maybeScroll(o)})})},!1),window.addEventListener("click",t=>{let i=Lt(t.target,Di),r=i&&i.getAttribute(Di);if(!r||!this.isConnected()||!this.main||f.wantsNewTab(t))return;let n=i.href,o=i.getAttribute(oo);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==n&&this.requestDOMUpdate(()=>{if(r==="patch")this.pushHistoryPatch(n,o,i);else if(r==="redirect")this.historyRedirect(n,o);else throw new Error(`expected ${Di} to be "patch" or "redirect", got: ${r}`);let s=i.getAttribute(this.binding("click"));s&&this.requestDOMUpdate(()=>this.execJS(i,s,"click"))})},!1)}maybeScroll(e){typeof e=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,e)})}dispatchEvent(e,t={}){f.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){f.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>f.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){if(!this.isConnected())return Oe.redirect(e);this.withPageLoading({to:e,kind:"patch"},r=>{this.main.pushLinkPatch(e,i,n=>{this.historyPatch(e,t,n),r()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(Oe.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){if(!this.isConnected())return Oe.redirect(e,i);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:n,host:o}=window.location;e=`${n}//${o}${e}`}let r=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},n=>{this.replaceMain(e,i,()=>{Oe.pushState(t,{type:"redirect",id:this.main.id,scroll:r},e),this.registerNewLocation(window.location),n()})})}replaceRootHistory(){Oe.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=fi(e),!0)}bindForms(){let e=0,t=!1;this.on("submit",i=>{let r=i.target.getAttribute(this.binding("submit")),n=i.target.getAttribute(this.binding("change"));!t&&n&&!r&&(t=!0,i.preventDefault(),this.withinOwners(i.target,o=>{o.disableForm(i.target),window.requestAnimationFrame(()=>{f.isUnloadableFormSubmit(i)&&this.unload(),i.target.submit()})}))},!0),this.on("submit",i=>{let r=i.target.getAttribute(this.binding("submit"));if(!r){f.isUnloadableFormSubmit(i)&&this.unload();return}i.preventDefault(),i.target.disabled=!0,this.withinOwners(i.target,n=>{Pe.exec("submit",r,n,i.target,["push",{submitter:i.submitter}])})},!1);for(let i of["change","input"])this.on(i,r=>{let n=this.binding("change"),o=r.target,s=o.getAttribute(n),a=o.form&&o.form.getAttribute(n),l=s||a;if(!l||o.type==="number"&&o.validity&&o.validity.badInput)return;let d=s?o:o.form,u=e;e++;let{at:m,type:g}=f.private(o,"prev-iteration")||{};m===u-1&&i!==g||(f.putPrivate(o,"prev-iteration",{at:u,type:i}),this.debounce(o,r,i,()=>{this.withinOwners(d,v=>{f.putPrivate(o,Wi,!0),f.isTextualInput(o)||this.setActiveElement(o),Pe.exec("change",l,v,o,["push",{_target:r.target.name,dispatcher:d}])})}))},!1);this.on("reset",i=>{let r=i.target;f.resetForm(r,this.binding(pi));let n=Array.from(r.elements).find(o=>o.type==="reset");window.requestAnimationFrame(()=>{n.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(e,t,i,r){if(i==="blur"||i==="focusout")return r();let n=this.binding(uo),o=this.binding(co),s=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(e,l=>{let d=()=>!l.isDestroyed()&&document.body.contains(e);f.debounce(e,t,n,s,o,a,d,()=>{r()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},Xo=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(e=>{clearTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let r=setTimeout(()=>{this.transitions.delete(r),i(),this.flushPendingOps()},e);this.transitions.add(r)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let e=this.pendingOps.shift();e&&(e(),this.flushPendingOps())}};var $="top",X="bottom",q="right",V="left",gi="auto",$e=[$,X,q,V],Ie="start",ze="end",Xr="clippingParents",bi="viewport",ut="popper",Jr="reference",zi=$e.reduce(function(e,t){return e.concat([t+"-"+Ie,t+"-"+ze])},[]),yi=[].concat($e,[gi]).reduce(function(e,t){return e.concat([t,t+"-"+Ie,t+"-"+ze])},[]),Jo="beforeRead",zo="read",Go="afterRead",Ko="beforeMain",Yo="main",Qo="afterMain",Zo="beforeWrite",es="write",ts="afterWrite",zr=[Jo,zo,Go,Ko,Yo,Qo,Zo,es,ts];function K(e){return e?(e.nodeName||"").toLowerCase():null}function U(e){if(e==null)return window;if(e.toString()!=="[object Window]"){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function pe(e){var t=U(e).Element;return e instanceof t||e instanceof Element}function J(e){var t=U(e).HTMLElement;return e instanceof t||e instanceof HTMLElement}function ct(e){if(typeof ShadowRoot>"u")return!1;var t=U(e).ShadowRoot;return e instanceof t||e instanceof ShadowRoot}function is(e){var t=e.state;Object.keys(t.elements).forEach(function(i){var r=t.styles[i]||{},n=t.attributes[i]||{},o=t.elements[i];!J(o)||!K(o)||(Object.assign(o.style,r),Object.keys(n).forEach(function(s){var a=n[s];a===!1?o.removeAttribute(s):o.setAttribute(s,a===!0?"":a)}))})}function rs(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach(function(r){var n=t.elements[r],o=t.attributes[r]||{},s=Object.keys(t.styles.hasOwnProperty(r)?t.styles[r]:i[r]),a=s.reduce(function(l,d){return l[d]="",l},{});!J(n)||!K(n)||(Object.assign(n.style,a),Object.keys(o).forEach(function(l){n.removeAttribute(l)}))})}}var _t={name:"applyStyles",enabled:!0,phase:"write",fn:is,effect:rs,requires:["computeStyles"]};function Y(e){return e.split("-")[0]}var we=Math.max,Ge=Math.min,Ne=Math.round;function dt(){var e=navigator.userAgentData;return e!=null&&e.brands?e.brands.map(function(t){return t.brand+"/"+t.version}).join(" "):navigator.userAgent}function It(){return!/^((?!chrome|android).)*safari/i.test(dt())}function me(e,t,i){t===void 0&&(t=!1),i===void 0&&(i=!1);var r=e.getBoundingClientRect(),n=1,o=1;t&&J(e)&&(n=e.offsetWidth>0&&Ne(r.width)/e.offsetWidth||1,o=e.offsetHeight>0&&Ne(r.height)/e.offsetHeight||1);var s=pe(e)?U(e):window,a=s.visualViewport,l=!It()&&i,d=(r.left+(l&&a?a.offsetLeft:0))/n,u=(r.top+(l&&a?a.offsetTop:0))/o,m=r.width/n,g=r.height/o;return{width:m,height:g,top:u,right:d+m,bottom:u+g,left:d,x:d,y:u}}function Ke(e){var t=me(e),i=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:r}}function Nt(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&ct(i)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function le(e){return U(e).getComputedStyle(e)}function Gi(e){return["table","td","th"].indexOf(K(e))>=0}function ee(e){return((pe(e)?e.ownerDocument:e.document)||window.document).documentElement}function Me(e){return K(e)==="html"?e:e.assignedSlot||e.parentNode||(ct(e)?e.host:null)||ee(e)}function Gr(e){return!J(e)||le(e).position==="fixed"?null:e.offsetParent}function ns(e){var t=/firefox/i.test(dt()),i=/Trident/i.test(dt());if(i&&J(e)){var r=le(e);if(r.position==="fixed")return null}var n=Me(e);for(ct(n)&&(n=n.host);J(n)&&["html","body"].indexOf(K(n))<0;){var o=le(n);if(o.transform!=="none"||o.perspective!=="none"||o.contain==="paint"||["transform","perspective"].indexOf(o.willChange)!==-1||t&&o.willChange==="filter"||t&&o.filter&&o.filter!=="none")return n;n=n.parentNode}return null}function Ee(e){for(var t=U(e),i=Gr(e);i&&Gi(i)&&le(i).position==="static";)i=Gr(i);return i&&(K(i)==="html"||K(i)==="body"&&le(i).position==="static")?t:i||ns(e)||t}function Ye(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Qe(e,t,i){return we(e,Ge(t,i))}function Kr(e,t,i){var r=Qe(e,t,i);return r>i?i:r}function Mt(){return{top:0,right:0,bottom:0,left:0}}function Ht(e){return Object.assign({},Mt(),e)}function jt(e,t){return t.reduce(function(i,r){return i[r]=e,i},{})}var os=function(t,i){return t=typeof t=="function"?t(Object.assign({},i.rects,{placement:i.placement})):t,Ht(typeof t!="number"?t:jt(t,$e))};function ss(e){var t,i=e.state,r=e.name,n=e.options,o=i.elements.arrow,s=i.modifiersData.popperOffsets,a=Y(i.placement),l=Ye(a),d=[V,q].indexOf(a)>=0,u=d?"height":"width";if(!(!o||!s)){var m=os(n.padding,i),g=Ke(o),v=l==="y"?$:V,y=l==="y"?X:q,b=i.rects.reference[u]+i.rects.reference[l]-s[l]-i.rects.popper[u],x=s[l]-i.rects.reference[l],h=Ee(o),E=h?l==="y"?h.clientHeight||0:h.clientWidth||0:0,T=b/2-x/2,c=m[v],R=E-g[u]-m[y],w=E/2-g[u]/2+T,_=Qe(c,w,R),F=l;i.modifiersData[r]=(t={},t[F]=_,t.centerOffset=_-w,t)}}function as(e){var t=e.state,i=e.options,r=i.element,n=r===void 0?"[data-popper-arrow]":r;n!=null&&(typeof n=="string"&&(n=t.elements.popper.querySelector(n),!n)||!Nt(t.elements.popper,n)||(t.elements.arrow=n))}var Yr={name:"arrow",enabled:!0,phase:"main",fn:ss,effect:as,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ve(e){return e.split("-")[1]}var ls={top:"auto",right:"auto",bottom:"auto",left:"auto"};function us(e){var t=e.x,i=e.y,r=window,n=r.devicePixelRatio||1;return{x:Ne(t*n)/n||0,y:Ne(i*n)/n||0}}function Qr(e){var t,i=e.popper,r=e.popperRect,n=e.placement,o=e.variation,s=e.offsets,a=e.position,l=e.gpuAcceleration,d=e.adaptive,u=e.roundOffsets,m=e.isFixed,g=s.x,v=g===void 0?0:g,y=s.y,b=y===void 0?0:y,x=typeof u=="function"?u({x:v,y:b}):{x:v,y:b};v=x.x,b=x.y;var h=s.hasOwnProperty("x"),E=s.hasOwnProperty("y"),T=V,c=$,R=window;if(d){var w=Ee(i),_="clientHeight",F="clientWidth";if(w===U(i)&&(w=ee(i),le(w).position!=="static"&&a==="absolute"&&(_="scrollHeight",F="scrollWidth")),w=w,n===$||(n===V||n===q)&&o===ze){c=X;var H=m&&w===R&&R.visualViewport?R.visualViewport.height:w[_];b-=H-r.height,b*=l?1:-1}if(n===V||(n===$||n===X)&&o===ze){T=q;var B=m&&w===R&&R.visualViewport?R.visualViewport.width:w[F];v-=B-r.width,v*=l?1:-1}}var O=Object.assign({position:a},d&&ls),N=u===!0?us({x:v,y:b}):{x:v,y:b};if(v=N.x,b=N.y,l){var j;return Object.assign({},O,(j={},j[c]=E?"0":"",j[T]=h?"0":"",j.transform=(R.devicePixelRatio||1)<=1?"translate("+v+"px, "+b+"px)":"translate3d("+v+"px, "+b+"px, 0)",j))}return Object.assign({},O,(t={},t[c]=E?b+"px":"",t[T]=h?v+"px":"",t.transform="",t))}function cs(e){var t=e.state,i=e.options,r=i.gpuAcceleration,n=r===void 0?!0:r,o=i.adaptive,s=o===void 0?!0:o,a=i.roundOffsets,l=a===void 0?!0:a;if(!1)var d;var u={placement:Y(t.placement),variation:ve(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:t.options.strategy==="fixed"};t.modifiersData.popperOffsets!=null&&(t.styles.popper=Object.assign({},t.styles.popper,Qr(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),t.modifiersData.arrow!=null&&(t.styles.arrow=Object.assign({},t.styles.arrow,Qr(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})}var Zr={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:cs,data:{}};var wi={passive:!0};function ds(e){var t=e.state,i=e.instance,r=e.options,n=r.scroll,o=n===void 0?!0:n,s=r.resize,a=s===void 0?!0:s,l=U(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&d.forEach(function(u){u.addEventListener("scroll",i.update,wi)}),a&&l.addEventListener("resize",i.update,wi),function(){o&&d.forEach(function(u){u.removeEventListener("scroll",i.update,wi)}),a&&l.removeEventListener("resize",i.update,wi)}}var en={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:ds,data:{}};var hs={left:"right",right:"left",bottom:"top",top:"bottom"};function ht(e){return e.replace(/left|right|bottom|top/g,function(t){return hs[t]})}var fs={start:"end",end:"start"};function Ei(e){return e.replace(/start|end/g,function(t){return fs[t]})}function Ze(e){var t=U(e),i=t.pageXOffset,r=t.pageYOffset;return{scrollLeft:i,scrollTop:r}}function et(e){return me(ee(e)).left+Ze(e).scrollLeft}function Ki(e,t){var i=U(e),r=ee(e),n=i.visualViewport,o=r.clientWidth,s=r.clientHeight,a=0,l=0;if(n){o=n.width,s=n.height;var d=It();(d||!d&&t==="fixed")&&(a=n.offsetLeft,l=n.offsetTop)}return{width:o,height:s,x:a+et(e),y:l}}function Yi(e){var t,i=ee(e),r=Ze(e),n=(t=e.ownerDocument)==null?void 0:t.body,o=we(i.scrollWidth,i.clientWidth,n?n.scrollWidth:0,n?n.clientWidth:0),s=we(i.scrollHeight,i.clientHeight,n?n.scrollHeight:0,n?n.clientHeight:0),a=-r.scrollLeft+et(e),l=-r.scrollTop;return le(n||i).direction==="rtl"&&(a+=we(i.clientWidth,n?n.clientWidth:0)-o),{width:o,height:s,x:a,y:l}}function tt(e){var t=le(e),i=t.overflow,r=t.overflowX,n=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+n+r)}function Ai(e){return["html","body","#document"].indexOf(K(e))>=0?e.ownerDocument.body:J(e)&&tt(e)?e:Ai(Me(e))}function Ve(e,t){var i;t===void 0&&(t=[]);var r=Ai(e),n=r===((i=e.ownerDocument)==null?void 0:i.body),o=U(r),s=n?[o].concat(o.visualViewport||[],tt(r)?r:[]):r,a=t.concat(s);return n?a:a.concat(Ve(Me(s)))}function ft(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ps(e,t){var i=me(e,!1,t==="fixed");return i.top=i.top+e.clientTop,i.left=i.left+e.clientLeft,i.bottom=i.top+e.clientHeight,i.right=i.left+e.clientWidth,i.width=e.clientWidth,i.height=e.clientHeight,i.x=i.left,i.y=i.top,i}function tn(e,t,i){return t===bi?ft(Ki(e,i)):pe(t)?ps(t,i):ft(Yi(ee(e)))}function ms(e){var t=Ve(Me(e)),i=["absolute","fixed"].indexOf(le(e).position)>=0,r=i&&J(e)?Ee(e):e;return pe(r)?t.filter(function(n){return pe(n)&&Nt(n,r)&&K(n)!=="body"}):[]}function Qi(e,t,i,r){var n=t==="clippingParents"?ms(e):[].concat(t),o=[].concat(n,[i]),s=o[0],a=o.reduce(function(l,d){var u=tn(e,d,r);return l.top=we(u.top,l.top),l.right=Ge(u.right,l.right),l.bottom=Ge(u.bottom,l.bottom),l.left=we(u.left,l.left),l},tn(e,s,r));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function Ft(e){var t=e.reference,i=e.element,r=e.placement,n=r?Y(r):null,o=r?ve(r):null,s=t.x+t.width/2-i.width/2,a=t.y+t.height/2-i.height/2,l;switch(n){case $:l={x:s,y:t.y-i.height};break;case X:l={x:s,y:t.y+t.height};break;case q:l={x:t.x+t.width,y:a};break;case V:l={x:t.x-i.width,y:a};break;default:l={x:t.x,y:t.y}}var d=n?Ye(n):null;if(d!=null){var u=d==="y"?"height":"width";switch(o){case Ie:l[d]=l[d]-(t[u]/2-i[u]/2);break;case ze:l[d]=l[d]+(t[u]/2-i[u]/2);break;default:}}return l}function Ae(e,t){t===void 0&&(t={});var i=t,r=i.placement,n=r===void 0?e.placement:r,o=i.strategy,s=o===void 0?e.strategy:o,a=i.boundary,l=a===void 0?Xr:a,d=i.rootBoundary,u=d===void 0?bi:d,m=i.elementContext,g=m===void 0?ut:m,v=i.altBoundary,y=v===void 0?!1:v,b=i.padding,x=b===void 0?0:b,h=Ht(typeof x!="number"?x:jt(x,$e)),E=g===ut?Jr:ut,T=e.rects.popper,c=e.elements[y?E:g],R=Qi(pe(c)?c:c.contextElement||ee(e.elements.popper),l,u,s),w=me(e.elements.reference),_=Ft({reference:w,element:T,strategy:"absolute",placement:n}),F=ft(Object.assign({},T,_)),H=g===ut?F:w,B={top:R.top-H.top+h.top,bottom:H.bottom-R.bottom+h.bottom,left:R.left-H.left+h.left,right:H.right-R.right+h.right},O=e.modifiersData.offset;if(g===ut&&O){var N=O[n];Object.keys(B).forEach(function(j){var Q=[q,X].indexOf(j)>=0?1:-1,se=[$,X].indexOf(j)>=0?"y":"x";B[j]+=N[se]*Q})}return B}function Zi(e,t){t===void 0&&(t={});var i=t,r=i.placement,n=i.boundary,o=i.rootBoundary,s=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,d=l===void 0?yi:l,u=ve(r),m=u?a?zi:zi.filter(function(y){return ve(y)===u}):$e,g=m.filter(function(y){return d.indexOf(y)>=0});g.length===0&&(g=m);var v=g.reduce(function(y,b){return y[b]=Ae(e,{placement:b,boundary:n,rootBoundary:o,padding:s})[Y(b)],y},{});return Object.keys(v).sort(function(y,b){return v[y]-v[b]})}function vs(e){if(Y(e)===gi)return[];var t=ht(e);return[Ei(e),t,Ei(t)]}function gs(e){var t=e.state,i=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var n=i.mainAxis,o=n===void 0?!0:n,s=i.altAxis,a=s===void 0?!0:s,l=i.fallbackPlacements,d=i.padding,u=i.boundary,m=i.rootBoundary,g=i.altBoundary,v=i.flipVariations,y=v===void 0?!0:v,b=i.allowedAutoPlacements,x=t.options.placement,h=Y(x),E=h===x,T=l||(E||!y?[ht(x)]:vs(x)),c=[x].concat(T).reduce(function(ie,re){return ie.concat(Y(re)===gi?Zi(t,{placement:re,boundary:u,rootBoundary:m,padding:d,flipVariations:y,allowedAutoPlacements:b}):re)},[]),R=t.rects.reference,w=t.rects.popper,_=new Map,F=!0,H=c[0],B=0;B<c.length;B++){var O=c[B],N=Y(O),j=ve(O)===Ie,Q=[$,X].indexOf(N)>=0,se=Q?"width":"height",W=Ae(t,{placement:O,boundary:u,rootBoundary:m,altBoundary:g,padding:d}),C=Q?j?q:V:j?X:$;R[se]>w[se]&&(C=ht(C));var S=ht(C),L=[];if(o&&L.push(W[N]<=0),a&&L.push(W[C]<=0,W[S]<=0),L.every(function(ie){return ie})){H=O,F=!1;break}_.set(O,L)}if(F)for(var P=y?3:1,I=function(re){var z=c.find(function(ge){var G=_.get(ge);if(G)return G.slice(0,re).every(function(xe){return xe})});if(z)return H=z,"break"},Z=P;Z>0;Z--){var te=I(Z);if(te==="break")break}t.placement!==H&&(t.modifiersData[r]._skip=!0,t.placement=H,t.reset=!0)}}var rn={name:"flip",enabled:!0,phase:"main",fn:gs,requiresIfExists:["offset"],data:{_skip:!1}};function nn(e,t,i){return i===void 0&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function on(e){return[$,q,X,V].some(function(t){return e[t]>=0})}function bs(e){var t=e.state,i=e.name,r=t.rects.reference,n=t.rects.popper,o=t.modifiersData.preventOverflow,s=Ae(t,{elementContext:"reference"}),a=Ae(t,{altBoundary:!0}),l=nn(s,r),d=nn(a,n,o),u=on(l),m=on(d);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:d,isReferenceHidden:u,hasPopperEscaped:m},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":m})}var sn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:bs};function ys(e,t,i){var r=Y(e),n=[V,$].indexOf(r)>=0?-1:1,o=typeof i=="function"?i(Object.assign({},t,{placement:e})):i,s=o[0],a=o[1];return s=s||0,a=(a||0)*n,[V,q].indexOf(r)>=0?{x:a,y:s}:{x:s,y:a}}function ws(e){var t=e.state,i=e.options,r=e.name,n=i.offset,o=n===void 0?[0,0]:n,s=yi.reduce(function(u,m){return u[m]=ys(m,t.rects,o),u},{}),a=s[t.placement],l=a.x,d=a.y;t.modifiersData.popperOffsets!=null&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=d),t.modifiersData[r]=s}var an={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:ws};function Es(e){var t=e.state,i=e.name;t.modifiersData[i]=Ft({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})}var ln={name:"popperOffsets",enabled:!0,phase:"read",fn:Es,data:{}};function er(e){return e==="x"?"y":"x"}function As(e){var t=e.state,i=e.options,r=e.name,n=i.mainAxis,o=n===void 0?!0:n,s=i.altAxis,a=s===void 0?!1:s,l=i.boundary,d=i.rootBoundary,u=i.altBoundary,m=i.padding,g=i.tether,v=g===void 0?!0:g,y=i.tetherOffset,b=y===void 0?0:y,x=Ae(t,{boundary:l,rootBoundary:d,padding:m,altBoundary:u}),h=Y(t.placement),E=ve(t.placement),T=!E,c=Ye(h),R=er(c),w=t.modifiersData.popperOffsets,_=t.rects.reference,F=t.rects.popper,H=typeof b=="function"?b(Object.assign({},t.rects,{placement:t.placement})):b,B=typeof H=="number"?{mainAxis:H,altAxis:H}:Object.assign({mainAxis:0,altAxis:0},H),O=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,N={x:0,y:0};if(!!w){if(o){var j,Q=c==="y"?$:V,se=c==="y"?X:q,W=c==="y"?"height":"width",C=w[c],S=C+x[Q],L=C-x[se],P=v?-F[W]/2:0,I=E===Ie?_[W]:F[W],Z=E===Ie?-F[W]:-_[W],te=t.elements.arrow,ie=v&&te?Ke(te):{width:0,height:0},re=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:Mt(),z=re[Q],ge=re[se],G=Qe(0,_[W],ie[W]),xe=T?_[W]/2-P-G-z-B.mainAxis:I-G-z-B.mainAxis,be=T?-_[W]/2+P+G+ge+B.mainAxis:Z+G+ge+B.mainAxis,rt=t.elements.arrow&&Ee(t.elements.arrow),$t=rt?c==="y"?rt.clientTop||0:rt.clientLeft||0:0,vt=(j=O?.[c])!=null?j:0,Vt=C+xe-vt-$t,Wt=C+be-vt,gt=Qe(v?Ge(S,Vt):S,C,v?we(L,Wt):L);w[c]=gt,N[c]=gt-C}if(a){var bt,qt=c==="x"?$:V,Xt=c==="x"?X:q,De=w[R],He=R==="y"?"height":"width",yt=De+x[qt],We=De-x[Xt],wt=[$,V].indexOf(h)!==-1,Jt=(bt=O?.[R])!=null?bt:0,zt=wt?yt:De-_[He]-F[He]-Jt+B.altAxis,Gt=wt?De+_[He]+F[He]-Jt-B.altAxis:We,Kt=v&&wt?Kr(zt,De,Gt):Qe(v?zt:yt,De,v?Gt:We);w[R]=Kt,N[R]=Kt-De}t.modifiersData[r]=N}}var un={name:"preventOverflow",enabled:!0,phase:"main",fn:As,requiresIfExists:["offset"]};function tr(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}function ir(e){return e===U(e)||!J(e)?Ze(e):tr(e)}function Ss(e){var t=e.getBoundingClientRect(),i=Ne(t.width)/e.offsetWidth||1,r=Ne(t.height)/e.offsetHeight||1;return i!==1||r!==1}function rr(e,t,i){i===void 0&&(i=!1);var r=J(t),n=J(t)&&Ss(t),o=ee(t),s=me(e,n,i),a={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(r||!r&&!i)&&((K(t)!=="body"||tt(o))&&(a=ir(t)),J(t)?(l=me(t,!0),l.x+=t.clientLeft,l.y+=t.clientTop):o&&(l.x=et(o))),{x:s.left+a.scrollLeft-l.x,y:s.top+a.scrollTop-l.y,width:s.width,height:s.height}}function xs(e){var t=new Map,i=new Set,r=[];e.forEach(function(o){t.set(o.name,o)});function n(o){i.add(o.name);var s=[].concat(o.requires||[],o.requiresIfExists||[]);s.forEach(function(a){if(!i.has(a)){var l=t.get(a);l&&n(l)}}),r.push(o)}return e.forEach(function(o){i.has(o.name)||n(o)}),r}function nr(e){var t=xs(e);return zr.reduce(function(i,r){return i.concat(t.filter(function(n){return n.phase===r}))},[])}function or(e){var t;return function(){return t||(t=new Promise(function(i){Promise.resolve().then(function(){t=void 0,i(e())})})),t}}function sr(e){var t=e.reduce(function(i,r){var n=i[r.name];return i[r.name]=n?Object.assign({},n,r,{options:Object.assign({},n.options,r.options),data:Object.assign({},n.data,r.data)}):r,i},{});return Object.keys(t).map(function(i){return t[i]})}var cn={placement:"bottom",modifiers:[],strategy:"absolute"};function dn(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some(function(r){return!(r&&typeof r.getBoundingClientRect=="function")})}function hn(e){e===void 0&&(e={});var t=e,i=t.defaultModifiers,r=i===void 0?[]:i,n=t.defaultOptions,o=n===void 0?cn:n;return function(a,l,d){d===void 0&&(d=o);var u={placement:"bottom",orderedModifiers:[],options:Object.assign({},cn,o),modifiersData:{},elements:{reference:a,popper:l},attributes:{},styles:{}},m=[],g=!1,v={state:u,setOptions:function(h){var E=typeof h=="function"?h(u.options):h;b(),u.options=Object.assign({},o,u.options,E),u.scrollParents={reference:pe(a)?Ve(a):a.contextElement?Ve(a.contextElement):[],popper:Ve(l)};var T=nr(sr([].concat(r,u.options.modifiers)));if(u.orderedModifiers=T.filter(function(O){return O.enabled}),!1){var c;if(getBasePlacement(u.options.placement)===auto)var R;var w,_,F,H,B}return y(),v.update()},forceUpdate:function(){if(!g){var h=u.elements,E=h.reference,T=h.popper;if(!!dn(E,T)){u.rects={reference:rr(E,Ee(T),u.options.strategy==="fixed"),popper:Ke(T)},u.reset=!1,u.placement=u.options.placement,u.orderedModifiers.forEach(function(O){return u.modifiersData[O.name]=Object.assign({},O.data)});for(var c=0,R=0;R<u.orderedModifiers.length;R++){if(u.reset===!0){u.reset=!1,R=-1;continue}var w=u.orderedModifiers[R],_=w.fn,F=w.options,H=F===void 0?{}:F,B=w.name;typeof _=="function"&&(u=_({state:u,options:H,name:B,instance:v})||u)}}}},update:or(function(){return new Promise(function(x){v.forceUpdate(),x(u)})}),destroy:function(){b(),g=!0}};if(!dn(a,l))return v;v.setOptions(d).then(function(x){!g&&d.onFirstUpdate&&d.onFirstUpdate(x)});function y(){u.orderedModifiers.forEach(function(x){var h=x.name,E=x.options,T=E===void 0?{}:E,c=x.effect;if(typeof c=="function"){var R=c({state:u,name:h,instance:v,options:T}),w=function(){};m.push(R||w)}})}function b(){m.forEach(function(x){return x()}),m=[]}return v}}var Cs=[en,ln,Zr,_t,an,rn,un,Yr,sn],ar=hn({defaultModifiers:Cs});var An='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',Ts="tippy-box",Sn="tippy-content",ks="tippy-backdrop",xn="tippy-arrow",Cn="tippy-svg-arrow",it={passive:!0,capture:!0},Tn=function(){return document.body};function lr(e,t,i){if(Array.isArray(e)){var r=e[t];return r??(Array.isArray(i)?i[t]:i)}return e}function pr(e,t){var i={}.toString.call(e);return i.indexOf("[object")===0&&i.indexOf(t+"]")>-1}function kn(e,t){return typeof e=="function"?e.apply(void 0,t):e}function fn(e,t){if(t===0)return e;var i;return function(r){clearTimeout(i),i=setTimeout(function(){e(r)},t)}}function Os(e){return e.split(/\s+/).filter(Boolean)}function pt(e){return[].concat(e)}function pn(e,t){e.indexOf(t)===-1&&e.push(t)}function Ps(e){return e.filter(function(t,i){return e.indexOf(t)===i})}function Rs(e){return e.split("-")[0]}function xi(e){return[].slice.call(e)}function mn(e){return Object.keys(e).reduce(function(t,i){return e[i]!==void 0&&(t[i]=e[i]),t},{})}function Bt(){return document.createElement("div")}function Ci(e){return["Element","Fragment"].some(function(t){return pr(e,t)})}function Ls(e){return pr(e,"NodeList")}function Ds(e){return pr(e,"MouseEvent")}function _s(e){return!!(e&&e._tippy&&e._tippy.reference===e)}function Is(e){return Ci(e)?[e]:Ls(e)?xi(e):Array.isArray(e)?e:xi(document.querySelectorAll(e))}function ur(e,t){e.forEach(function(i){i&&(i.style.transitionDuration=t+"ms")})}function vn(e,t){e.forEach(function(i){i&&i.setAttribute("data-state",t)})}function Ns(e){var t,i=pt(e),r=i[0];return r!=null&&(t=r.ownerDocument)!=null&&t.body?r.ownerDocument:document}function Ms(e,t){var i=t.clientX,r=t.clientY;return e.every(function(n){var o=n.popperRect,s=n.popperState,a=n.props,l=a.interactiveBorder,d=Rs(s.placement),u=s.modifiersData.offset;if(!u)return!0;var m=d==="bottom"?u.top.y:0,g=d==="top"?u.bottom.y:0,v=d==="right"?u.left.x:0,y=d==="left"?u.right.x:0,b=o.top-r+m>l,x=r-o.bottom-g>l,h=o.left-i+v>l,E=i-o.right-y>l;return b||x||h||E})}function cr(e,t,i){var r=t+"EventListener";["transitionend","webkitTransitionEnd"].forEach(function(n){e[r](n,i)})}function gn(e,t){for(var i=t;i;){var r;if(e.contains(i))return!0;i=i.getRootNode==null||(r=i.getRootNode())==null?void 0:r.host}return!1}var Le={isTouch:!1},bn=0;function Hs(){Le.isTouch||(Le.isTouch=!0,window.performance&&document.addEventListener("mousemove",On))}function On(){var e=performance.now();e-bn<20&&(Le.isTouch=!1,document.removeEventListener("mousemove",On)),bn=e}function js(){var e=document.activeElement;if(_s(e)){var t=e._tippy;e.blur&&!t.state.isVisible&&e.blur()}}function Fs(){document.addEventListener("touchstart",Hs,it),window.addEventListener("blur",js)}var Bs=typeof window<"u"&&typeof document<"u",Us=Bs?!!window.msCrypto:!1;var $s={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Vs={allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999},Se=Object.assign({appendTo:Tn,aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},$s,Vs),Ws=Object.keys(Se),qs=function(t){var i=Object.keys(t);i.forEach(function(r){Se[r]=t[r]})};function Pn(e){var t=e.plugins||[],i=t.reduce(function(r,n){var o=n.name,s=n.defaultValue;if(o){var a;r[o]=e[o]!==void 0?e[o]:(a=Se[o])!=null?a:s}return r},{});return Object.assign({},e,i)}function Xs(e,t){var i=t?Object.keys(Pn(Object.assign({},Se,{plugins:t}))):Ws,r=i.reduce(function(n,o){var s=(e.getAttribute("data-tippy-"+o)||"").trim();if(!s)return n;if(o==="content")n[o]=s;else try{n[o]=JSON.parse(s)}catch{n[o]=s}return n},{});return r}function yn(e,t){var i=Object.assign({},t,{content:kn(t.content,[e])},t.ignoreAttributes?{}:Xs(e,t.plugins));return i.aria=Object.assign({},Se.aria,i.aria),i.aria={expanded:i.aria.expanded==="auto"?t.interactive:i.aria.expanded,content:i.aria.content==="auto"?t.interactive?null:"describedby":i.aria.content},i}var Js=function(){return"innerHTML"};function hr(e,t){e[Js()]=t}function wn(e){var t=Bt();return e===!0?t.className=xn:(t.className=Cn,Ci(e)?t.appendChild(e):hr(t,e)),t}function En(e,t){Ci(t.content)?(hr(e,""),e.appendChild(t.content)):typeof t.content!="function"&&(t.allowHTML?hr(e,t.content):e.textContent=t.content)}function fr(e){var t=e.firstElementChild,i=xi(t.children);return{box:t,content:i.find(function(r){return r.classList.contains(Sn)}),arrow:i.find(function(r){return r.classList.contains(xn)||r.classList.contains(Cn)}),backdrop:i.find(function(r){return r.classList.contains(ks)})}}function Rn(e){var t=Bt(),i=Bt();i.className=Ts,i.setAttribute("data-state","hidden"),i.setAttribute("tabindex","-1");var r=Bt();r.className=Sn,r.setAttribute("data-state","hidden"),En(r,e.props),t.appendChild(i),i.appendChild(r),n(e.props,e.props);function n(o,s){var a=fr(t),l=a.box,d=a.content,u=a.arrow;s.theme?l.setAttribute("data-theme",s.theme):l.removeAttribute("data-theme"),typeof s.animation=="string"?l.setAttribute("data-animation",s.animation):l.removeAttribute("data-animation"),s.inertia?l.setAttribute("data-inertia",""):l.removeAttribute("data-inertia"),l.style.maxWidth=typeof s.maxWidth=="number"?s.maxWidth+"px":s.maxWidth,s.role?l.setAttribute("role",s.role):l.removeAttribute("role"),(o.content!==s.content||o.allowHTML!==s.allowHTML)&&En(d,e.props),s.arrow?u?o.arrow!==s.arrow&&(l.removeChild(u),l.appendChild(wn(s.arrow))):l.appendChild(wn(s.arrow)):u&&l.removeChild(u)}return{popper:t,onUpdate:n}}Rn.$$tippy=!0;var zs=1,Si=[],dr=[];function Gs(e,t){var i=yn(e,Object.assign({},Se,Pn(mn(t)))),r,n,o,s=!1,a=!1,l=!1,d=!1,u,m,g,v=[],y=fn(Vt,i.interactiveDebounce),b,x=zs++,h=null,E=Ps(i.plugins),T={isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},c={id:x,reference:e,popper:Bt(),popperInstance:h,props:i,state:T,plugins:E,clearDelayTimeouts:zt,setProps:Gt,setContent:Kt,show:In,hide:Nn,hideWithInteractivity:Mn,enable:wt,disable:Jt,unmount:Hn,destroy:jn};if(!i.render)return c;var R=i.render(c),w=R.popper,_=R.onUpdate;w.setAttribute("data-tippy-root",""),w.id="tippy-"+c.id,c.popper=w,e._tippy=c,w._tippy=c;var F=E.map(function(p){return p.fn(c)}),H=e.hasAttribute("aria-expanded");return rt(),P(),C(),S("onCreate",[c]),i.showOnCreate&&yt(),w.addEventListener("mouseenter",function(){c.props.interactive&&c.state.isVisible&&c.clearDelayTimeouts()}),w.addEventListener("mouseleave",function(){c.props.interactive&&c.props.trigger.indexOf("mouseenter")>=0&&Q().addEventListener("mousemove",y)}),c;function B(){var p=c.props.touch;return Array.isArray(p)?p:[p,0]}function O(){return B()[0]==="hold"}function N(){var p;return!!((p=c.props.render)!=null&&p.$$tippy)}function j(){return b||e}function Q(){var p=j().parentNode;return p?Ns(p):document}function se(){return fr(w)}function W(p){return c.state.isMounted&&!c.state.isVisible||Le.isTouch||u&&u.type==="focus"?0:lr(c.props.delay,p?0:1,Se.delay)}function C(p){p===void 0&&(p=!1),w.style.pointerEvents=c.props.interactive&&!p?"":"none",w.style.zIndex=""+c.props.zIndex}function S(p,A,k){if(k===void 0&&(k=!0),F.forEach(function(D){D[p]&&D[p].apply(D,A)}),k){var M;(M=c.props)[p].apply(M,A)}}function L(){var p=c.props.aria;if(!!p.content){var A="aria-"+p.content,k=w.id,M=pt(c.props.triggerTarget||e);M.forEach(function(D){var ae=D.getAttribute(A);if(c.state.isVisible)D.setAttribute(A,ae?ae+" "+k:k);else{var fe=ae&&ae.replace(k,"").trim();fe?D.setAttribute(A,fe):D.removeAttribute(A)}})}}function P(){if(!(H||!c.props.aria.expanded)){var p=pt(c.props.triggerTarget||e);p.forEach(function(A){c.props.interactive?A.setAttribute("aria-expanded",c.state.isVisible&&A===j()?"true":"false"):A.removeAttribute("aria-expanded")})}}function I(){Q().removeEventListener("mousemove",y),Si=Si.filter(function(p){return p!==y})}function Z(p){if(!(Le.isTouch&&(l||p.type==="mousedown"))){var A=p.composedPath&&p.composedPath()[0]||p.target;if(!(c.props.interactive&&gn(w,A))){if(pt(c.props.triggerTarget||e).some(function(k){return gn(k,A)})){if(Le.isTouch||c.state.isVisible&&c.props.trigger.indexOf("click")>=0)return}else S("onClickOutside",[c,p]);c.props.hideOnClick===!0&&(c.clearDelayTimeouts(),c.hide(),a=!0,setTimeout(function(){a=!1}),c.state.isMounted||z())}}}function te(){l=!0}function ie(){l=!1}function re(){var p=Q();p.addEventListener("mousedown",Z,!0),p.addEventListener("touchend",Z,it),p.addEventListener("touchstart",ie,it),p.addEventListener("touchmove",te,it)}function z(){var p=Q();p.removeEventListener("mousedown",Z,!0),p.removeEventListener("touchend",Z,it),p.removeEventListener("touchstart",ie,it),p.removeEventListener("touchmove",te,it)}function ge(p,A){xe(p,function(){!c.state.isVisible&&w.parentNode&&w.parentNode.contains(w)&&A()})}function G(p,A){xe(p,A)}function xe(p,A){var k=se().box;function M(D){D.target===k&&(cr(k,"remove",M),A())}if(p===0)return A();cr(k,"remove",m),cr(k,"add",M),m=M}function be(p,A,k){k===void 0&&(k=!1);var M=pt(c.props.triggerTarget||e);M.forEach(function(D){D.addEventListener(p,A,k),v.push({node:D,eventType:p,handler:A,options:k})})}function rt(){O()&&(be("touchstart",vt,{passive:!0}),be("touchend",Wt,{passive:!0})),Os(c.props.trigger).forEach(function(p){if(p!=="manual")switch(be(p,vt),p){case"mouseenter":be("mouseleave",Wt);break;case"focus":be(Us?"focusout":"blur",gt);break;case"focusin":be("focusout",gt);break}})}function $t(){v.forEach(function(p){var A=p.node,k=p.eventType,M=p.handler,D=p.options;A.removeEventListener(k,M,D)}),v=[]}function vt(p){var A,k=!1;if(!(!c.state.isEnabled||bt(p)||a)){var M=((A=u)==null?void 0:A.type)==="focus";u=p,b=p.currentTarget,P(),!c.state.isVisible&&Ds(p)&&Si.forEach(function(D){return D(p)}),p.type==="click"&&(c.props.trigger.indexOf("mouseenter")<0||s)&&c.props.hideOnClick!==!1&&c.state.isVisible?k=!0:yt(p),p.type==="click"&&(s=!k),k&&!M&&We(p)}}function Vt(p){var A=p.target,k=j().contains(A)||w.contains(A);if(!(p.type==="mousemove"&&k)){var M=He().concat(w).map(function(D){var ae,fe=D._tippy,nt=(ae=fe.popperInstance)==null?void 0:ae.state;return nt?{popperRect:D.getBoundingClientRect(),popperState:nt,props:i}:null}).filter(Boolean);Ms(M,p)&&(I(),We(p))}}function Wt(p){var A=bt(p)||c.props.trigger.indexOf("click")>=0&&s;if(!A){if(c.props.interactive){c.hideWithInteractivity(p);return}We(p)}}function gt(p){c.props.trigger.indexOf("focusin")<0&&p.target!==j()||c.props.interactive&&p.relatedTarget&&w.contains(p.relatedTarget)||We(p)}function bt(p){return Le.isTouch?O()!==p.type.indexOf("touch")>=0:!1}function qt(){Xt();var p=c.props,A=p.popperOptions,k=p.placement,M=p.offset,D=p.getReferenceClientRect,ae=p.moveTransition,fe=N()?fr(w).arrow:null,nt=D?{getBoundingClientRect:D,contextElement:D.contextElement||j()}:e,mr={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(Yt){var ot=Yt.state;if(N()){var Fn=se(),Ri=Fn.box;["placement","reference-hidden","escaped"].forEach(function(Qt){Qt==="placement"?Ri.setAttribute("data-placement",ot.placement):ot.attributes.popper["data-popper-"+Qt]?Ri.setAttribute("data-"+Qt,""):Ri.removeAttribute("data-"+Qt)}),ot.attributes.popper={}}}},qe=[{name:"offset",options:{offset:M}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!ae}},mr];N()&&fe&&qe.push({name:"arrow",options:{element:fe,padding:3}}),qe.push.apply(qe,A?.modifiers||[]),c.popperInstance=ar(nt,w,Object.assign({},A,{placement:k,onFirstUpdate:g,modifiers:qe}))}function Xt(){c.popperInstance&&(c.popperInstance.destroy(),c.popperInstance=null)}function De(){var p=c.props.appendTo,A,k=j();c.props.interactive&&p===Tn||p==="parent"?A=k.parentNode:A=kn(p,[k]),A.contains(w)||A.appendChild(w),c.state.isMounted=!0,qt()}function He(){return xi(w.querySelectorAll("[data-tippy-root]"))}function yt(p){c.clearDelayTimeouts(),p&&S("onTrigger",[c,p]),re();var A=W(!0),k=B(),M=k[0],D=k[1];Le.isTouch&&M==="hold"&&D&&(A=D),A?r=setTimeout(function(){c.show()},A):c.show()}function We(p){if(c.clearDelayTimeouts(),S("onUntrigger",[c,p]),!c.state.isVisible){z();return}if(!(c.props.trigger.indexOf("mouseenter")>=0&&c.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(p.type)>=0&&s)){var A=W(!1);A?n=setTimeout(function(){c.state.isVisible&&c.hide()},A):o=requestAnimationFrame(function(){c.hide()})}}function wt(){c.state.isEnabled=!0}function Jt(){c.hide(),c.state.isEnabled=!1}function zt(){clearTimeout(r),clearTimeout(n),cancelAnimationFrame(o)}function Gt(p){if(!c.state.isDestroyed){S("onBeforeUpdate",[c,p]),$t();var A=c.props,k=yn(e,Object.assign({},A,mn(p),{ignoreAttributes:!0}));c.props=k,rt(),A.interactiveDebounce!==k.interactiveDebounce&&(I(),y=fn(Vt,k.interactiveDebounce)),A.triggerTarget&&!k.triggerTarget?pt(A.triggerTarget).forEach(function(M){M.removeAttribute("aria-expanded")}):k.triggerTarget&&e.removeAttribute("aria-expanded"),P(),C(),_&&_(A,k),c.popperInstance&&(qt(),He().forEach(function(M){requestAnimationFrame(M._tippy.popperInstance.forceUpdate)})),S("onAfterUpdate",[c,p])}}function Kt(p){c.setProps({content:p})}function In(){var p=c.state.isVisible,A=c.state.isDestroyed,k=!c.state.isEnabled,M=Le.isTouch&&!c.props.touch,D=lr(c.props.duration,0,Se.duration);if(!(p||A||k||M)&&!j().hasAttribute("disabled")&&(S("onShow",[c],!1),c.props.onShow(c)!==!1)){if(c.state.isVisible=!0,N()&&(w.style.visibility="visible"),C(),re(),c.state.isMounted||(w.style.transition="none"),N()){var ae=se(),fe=ae.box,nt=ae.content;ur([fe,nt],0)}g=function(){var qe;if(!(!c.state.isVisible||d)){if(d=!0,w.offsetHeight,w.style.transition=c.props.moveTransition,N()&&c.props.animation){var Pi=se(),Yt=Pi.box,ot=Pi.content;ur([Yt,ot],D),vn([Yt,ot],"visible")}L(),P(),pn(dr,c),(qe=c.popperInstance)==null||qe.forceUpdate(),S("onMount",[c]),c.props.animation&&N()&&G(D,function(){c.state.isShown=!0,S("onShown",[c])})}},De()}}function Nn(){var p=!c.state.isVisible,A=c.state.isDestroyed,k=!c.state.isEnabled,M=lr(c.props.duration,1,Se.duration);if(!(p||A||k)&&(S("onHide",[c],!1),c.props.onHide(c)!==!1)){if(c.state.isVisible=!1,c.state.isShown=!1,d=!1,s=!1,N()&&(w.style.visibility="hidden"),I(),z(),C(!0),N()){var D=se(),ae=D.box,fe=D.content;c.props.animation&&(ur([ae,fe],M),vn([ae,fe],"hidden"))}L(),P(),c.props.animation?N()&&ge(M,c.unmount):c.unmount()}}function Mn(p){Q().addEventListener("mousemove",y),pn(Si,y),y(p)}function Hn(){c.state.isVisible&&c.hide(),c.state.isMounted&&(Xt(),He().forEach(function(p){p._tippy.unmount()}),w.parentNode&&w.parentNode.removeChild(w),dr=dr.filter(function(p){return p!==c}),c.state.isMounted=!1,S("onHidden",[c]))}function jn(){c.state.isDestroyed||(c.clearDelayTimeouts(),c.unmount(),$t(),delete e._tippy,c.state.isDestroyed=!0,S("onDestroy",[c]))}}function Ut(e,t){t===void 0&&(t={});var i=Se.plugins.concat(t.plugins||[]);Fs();var r=Object.assign({},t,{plugins:i}),n=Is(e);if(!1)var o,s;var a=n.reduce(function(l,d){var u=d&&Gs(d,r);return u&&l.push(u),l},[]);return Ci(e)?a[0]:a}Ut.defaultProps=Se;Ut.setDefaultProps=qs;Ut.currentInput=Le;var md=Object.assign({},_t,{effect:function(t){var i=t.state,r={popper:{position:i.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(i.elements.popper.style,r.popper),i.styles=r,i.elements.arrow&&Object.assign(i.elements.arrow.style,r.arrow)}});Ut.setDefaultProps({render:Rn});var Ln=Ut;var Oi=Jn(_n()),ki;Oi.default.config({barColors:{0:"#0284c7"},shadowColor:"rgba(0, 0, 0, .3)"});window.addEventListener("phx:page-loading-start",e=>{ki||(ki=setTimeout(()=>Oi.default.show(),500))});window.addEventListener("phx:page-loading-stop",e=>{clearTimeout(ki),ki=void 0,Oi.default.hide()});var mt={};mt.Refresher={mounted(){let e="#refresh-selector",t=this;document.addEventListener("visibilitychange",()=>{document.visibilityState==="visible"?t.pushEventTo(e,"resume-refresh",{}):t.pushEventTo(e,"pause-refresh",{})}),"refresh"in localStorage&&t.pushEventTo(e,"select-refresh",{value:localStorage.refresh}),this.el.querySelectorAll("[role='option']").forEach(i=>{i.addEventListener("click",()=>{localStorage.refresh=i.getAttribute("value")})})}};mt.RestoreTheme={mounted(){this.pushEventTo("#theme-selector","restore",{theme:localStorage.theme})}};mt.ChangeTheme={applyTheme(){let e=window.matchMedia("(prefers-color-scheme: dark)").matches,t=!("theme"in localStorage);localStorage.theme==="dark"||localStorage.theme==="system"&&e||t&&e?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},mounted(){let e=this;this.el.addEventListener("click",()=>{let t=this.el.getAttribute("value");localStorage.theme=t,this.applyTheme(),e.pushEventTo("#theme-selector","restore",{theme:t})})}};mt.Tippy={mounted(){let e=this.el.getAttribute("data-title");Ln(this.el,{arrow:An,content:e,delay:[250,null]})}};mt.Chart={mounted(){let s={hour12:!1,timeStyle:"long"},a=this.el.querySelector("#chart-tooltip"),l=this.el.querySelector("#chart-d"),d=a.querySelector("[rel='date']"),u=a.querySelector("[rel='rect']"),m=[...a.querySelectorAll("g")];l.addEventListener("mouseenter",()=>{a.setAttribute("display","visible")}),l.addEventListener("mouseleave",()=>{a.setAttribute("display","none")}),l.addEventListener("mouseover",g=>{let v=g.target.parentElement,y=v.getAttribute("data-offset")-32,b=v.querySelectorAll("rect[data-value]"),x=v.getAttribute("data-tstamp")*1e3,h=new Date(x);a.setAttribute("transform",`translate(${y},${192})`),d.childNodes[0].nodeValue=h.toLocaleTimeString("en-US",s),m.forEach(T=>T.setAttribute("display","none"));let E=42;b.forEach(T=>{let c=T.getAttribute("data-label"),R=T.getAttribute("data-value"),w=m.find(F=>F.getAttribute("rel")===c),_=w.querySelector("text").childNodes[0];_.nodeValue=`${c} ${R}`,w.setAttribute("display","visible"),w.setAttribute("transform",`translate(${10}, ${E})`),E+=16}),u.setAttribute("height",E-16+2)})}};var Ks=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Ys=document.querySelector("meta[name='live-transport']").getAttribute("content"),Qs=document.querySelector("meta[name='live-path']").getAttribute("content"),Zs=new qr(Qs,br,{transport:Ys==="longpoll"?xt:WebSocket,params:{_csrf_token:Ks},hooks:mt});Zs.connect();})();
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * http://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
